
demo_state_machine_l4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08005c7c  08005c7c  00015c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006058  08006058  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  08006058  08006058  00016058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006060  08006060  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006060  08006060  00016060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006064  08006064  00016064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08006068  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200000f0  08006158  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08006158  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9d1  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fef  00000000  00000000  0002caf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002eae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  0002f570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c85  00000000  00000000  0002ff18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d19f  00000000  00000000  00055b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eba37  00000000  00000000  00062d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e773  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003994  00000000  00000000  0014e7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00152158  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0015217c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c64 	.word	0x08005c64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	08005c64 	.word	0x08005c64

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002be:	f000 b9bf 	b.w	8000640 <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000350:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000354:	f000 b974 	b.w	8000640 <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	4604      	mov	r4, r0
 8000378:	468e      	mov	lr, r1
 800037a:	2b00      	cmp	r3, #0
 800037c:	d14d      	bne.n	800041a <__udivmoddi4+0xaa>
 800037e:	428a      	cmp	r2, r1
 8000380:	4694      	mov	ip, r2
 8000382:	d969      	bls.n	8000458 <__udivmoddi4+0xe8>
 8000384:	fab2 f282 	clz	r2, r2
 8000388:	b152      	cbz	r2, 80003a0 <__udivmoddi4+0x30>
 800038a:	fa01 f302 	lsl.w	r3, r1, r2
 800038e:	f1c2 0120 	rsb	r1, r2, #32
 8000392:	fa20 f101 	lsr.w	r1, r0, r1
 8000396:	fa0c fc02 	lsl.w	ip, ip, r2
 800039a:	ea41 0e03 	orr.w	lr, r1, r3
 800039e:	4094      	lsls	r4, r2
 80003a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a4:	0c21      	lsrs	r1, r4, #16
 80003a6:	fbbe f6f8 	udiv	r6, lr, r8
 80003aa:	fa1f f78c 	uxth.w	r7, ip
 80003ae:	fb08 e316 	mls	r3, r8, r6, lr
 80003b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003b6:	fb06 f107 	mul.w	r1, r6, r7
 80003ba:	4299      	cmp	r1, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x64>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003c6:	f080 811f 	bcs.w	8000608 <__udivmoddi4+0x298>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 811c 	bls.w	8000608 <__udivmoddi4+0x298>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	4463      	add	r3, ip
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003dc:	fb08 3310 	mls	r3, r8, r0, r3
 80003e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003e4:	fb00 f707 	mul.w	r7, r0, r7
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	d90a      	bls.n	8000402 <__udivmoddi4+0x92>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f4:	f080 810a 	bcs.w	800060c <__udivmoddi4+0x29c>
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	f240 8107 	bls.w	800060c <__udivmoddi4+0x29c>
 80003fe:	4464      	add	r4, ip
 8000400:	3802      	subs	r0, #2
 8000402:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000406:	1be4      	subs	r4, r4, r7
 8000408:	2600      	movs	r6, #0
 800040a:	b11d      	cbz	r5, 8000414 <__udivmoddi4+0xa4>
 800040c:	40d4      	lsrs	r4, r2
 800040e:	2300      	movs	r3, #0
 8000410:	e9c5 4300 	strd	r4, r3, [r5]
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	428b      	cmp	r3, r1
 800041c:	d909      	bls.n	8000432 <__udivmoddi4+0xc2>
 800041e:	2d00      	cmp	r5, #0
 8000420:	f000 80ef 	beq.w	8000602 <__udivmoddi4+0x292>
 8000424:	2600      	movs	r6, #0
 8000426:	e9c5 0100 	strd	r0, r1, [r5]
 800042a:	4630      	mov	r0, r6
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	fab3 f683 	clz	r6, r3
 8000436:	2e00      	cmp	r6, #0
 8000438:	d14a      	bne.n	80004d0 <__udivmoddi4+0x160>
 800043a:	428b      	cmp	r3, r1
 800043c:	d302      	bcc.n	8000444 <__udivmoddi4+0xd4>
 800043e:	4282      	cmp	r2, r0
 8000440:	f200 80f9 	bhi.w	8000636 <__udivmoddi4+0x2c6>
 8000444:	1a84      	subs	r4, r0, r2
 8000446:	eb61 0303 	sbc.w	r3, r1, r3
 800044a:	2001      	movs	r0, #1
 800044c:	469e      	mov	lr, r3
 800044e:	2d00      	cmp	r5, #0
 8000450:	d0e0      	beq.n	8000414 <__udivmoddi4+0xa4>
 8000452:	e9c5 4e00 	strd	r4, lr, [r5]
 8000456:	e7dd      	b.n	8000414 <__udivmoddi4+0xa4>
 8000458:	b902      	cbnz	r2, 800045c <__udivmoddi4+0xec>
 800045a:	deff      	udf	#255	; 0xff
 800045c:	fab2 f282 	clz	r2, r2
 8000460:	2a00      	cmp	r2, #0
 8000462:	f040 8092 	bne.w	800058a <__udivmoddi4+0x21a>
 8000466:	eba1 010c 	sub.w	r1, r1, ip
 800046a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046e:	fa1f fe8c 	uxth.w	lr, ip
 8000472:	2601      	movs	r6, #1
 8000474:	0c20      	lsrs	r0, r4, #16
 8000476:	fbb1 f3f7 	udiv	r3, r1, r7
 800047a:	fb07 1113 	mls	r1, r7, r3, r1
 800047e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000482:	fb0e f003 	mul.w	r0, lr, r3
 8000486:	4288      	cmp	r0, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x12c>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x12a>
 8000494:	4288      	cmp	r0, r1
 8000496:	f200 80cb 	bhi.w	8000630 <__udivmoddi4+0x2c0>
 800049a:	4643      	mov	r3, r8
 800049c:	1a09      	subs	r1, r1, r0
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a4:	fb07 1110 	mls	r1, r7, r0, r1
 80004a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ac:	fb0e fe00 	mul.w	lr, lr, r0
 80004b0:	45a6      	cmp	lr, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x156>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004bc:	d202      	bcs.n	80004c4 <__udivmoddi4+0x154>
 80004be:	45a6      	cmp	lr, r4
 80004c0:	f200 80bb 	bhi.w	800063a <__udivmoddi4+0x2ca>
 80004c4:	4608      	mov	r0, r1
 80004c6:	eba4 040e 	sub.w	r4, r4, lr
 80004ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ce:	e79c      	b.n	800040a <__udivmoddi4+0x9a>
 80004d0:	f1c6 0720 	rsb	r7, r6, #32
 80004d4:	40b3      	lsls	r3, r6
 80004d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004da:	ea4c 0c03 	orr.w	ip, ip, r3
 80004de:	fa20 f407 	lsr.w	r4, r0, r7
 80004e2:	fa01 f306 	lsl.w	r3, r1, r6
 80004e6:	431c      	orrs	r4, r3
 80004e8:	40f9      	lsrs	r1, r7
 80004ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ee:	fa00 f306 	lsl.w	r3, r0, r6
 80004f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004f6:	0c20      	lsrs	r0, r4, #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000500:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000504:	fb08 f00e 	mul.w	r0, r8, lr
 8000508:	4288      	cmp	r0, r1
 800050a:	fa02 f206 	lsl.w	r2, r2, r6
 800050e:	d90b      	bls.n	8000528 <__udivmoddi4+0x1b8>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000518:	f080 8088 	bcs.w	800062c <__udivmoddi4+0x2bc>
 800051c:	4288      	cmp	r0, r1
 800051e:	f240 8085 	bls.w	800062c <__udivmoddi4+0x2bc>
 8000522:	f1a8 0802 	sub.w	r8, r8, #2
 8000526:	4461      	add	r1, ip
 8000528:	1a09      	subs	r1, r1, r0
 800052a:	b2a4      	uxth	r4, r4
 800052c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000530:	fb09 1110 	mls	r1, r9, r0, r1
 8000534:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000538:	fb00 fe0e 	mul.w	lr, r0, lr
 800053c:	458e      	cmp	lr, r1
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x1e2>
 8000540:	eb1c 0101 	adds.w	r1, ip, r1
 8000544:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000548:	d26c      	bcs.n	8000624 <__udivmoddi4+0x2b4>
 800054a:	458e      	cmp	lr, r1
 800054c:	d96a      	bls.n	8000624 <__udivmoddi4+0x2b4>
 800054e:	3802      	subs	r0, #2
 8000550:	4461      	add	r1, ip
 8000552:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000556:	fba0 9402 	umull	r9, r4, r0, r2
 800055a:	eba1 010e 	sub.w	r1, r1, lr
 800055e:	42a1      	cmp	r1, r4
 8000560:	46c8      	mov	r8, r9
 8000562:	46a6      	mov	lr, r4
 8000564:	d356      	bcc.n	8000614 <__udivmoddi4+0x2a4>
 8000566:	d053      	beq.n	8000610 <__udivmoddi4+0x2a0>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x212>
 800056a:	ebb3 0208 	subs.w	r2, r3, r8
 800056e:	eb61 010e 	sbc.w	r1, r1, lr
 8000572:	fa01 f707 	lsl.w	r7, r1, r7
 8000576:	fa22 f306 	lsr.w	r3, r2, r6
 800057a:	40f1      	lsrs	r1, r6
 800057c:	431f      	orrs	r7, r3
 800057e:	e9c5 7100 	strd	r7, r1, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	40d8      	lsrs	r0, r3
 8000590:	fa0c fc02 	lsl.w	ip, ip, r2
 8000594:	fa21 f303 	lsr.w	r3, r1, r3
 8000598:	4091      	lsls	r1, r2
 800059a:	4301      	orrs	r1, r0
 800059c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005a0:	fa1f fe8c 	uxth.w	lr, ip
 80005a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005a8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ac:	0c0b      	lsrs	r3, r1, #16
 80005ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005b2:	fb00 f60e 	mul.w	r6, r0, lr
 80005b6:	429e      	cmp	r6, r3
 80005b8:	fa04 f402 	lsl.w	r4, r4, r2
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x260>
 80005be:	eb1c 0303 	adds.w	r3, ip, r3
 80005c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005c6:	d22f      	bcs.n	8000628 <__udivmoddi4+0x2b8>
 80005c8:	429e      	cmp	r6, r3
 80005ca:	d92d      	bls.n	8000628 <__udivmoddi4+0x2b8>
 80005cc:	3802      	subs	r0, #2
 80005ce:	4463      	add	r3, ip
 80005d0:	1b9b      	subs	r3, r3, r6
 80005d2:	b289      	uxth	r1, r1
 80005d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005d8:	fb07 3316 	mls	r3, r7, r6, r3
 80005dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005e0:	fb06 f30e 	mul.w	r3, r6, lr
 80005e4:	428b      	cmp	r3, r1
 80005e6:	d908      	bls.n	80005fa <__udivmoddi4+0x28a>
 80005e8:	eb1c 0101 	adds.w	r1, ip, r1
 80005ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005f0:	d216      	bcs.n	8000620 <__udivmoddi4+0x2b0>
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d914      	bls.n	8000620 <__udivmoddi4+0x2b0>
 80005f6:	3e02      	subs	r6, #2
 80005f8:	4461      	add	r1, ip
 80005fa:	1ac9      	subs	r1, r1, r3
 80005fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000600:	e738      	b.n	8000474 <__udivmoddi4+0x104>
 8000602:	462e      	mov	r6, r5
 8000604:	4628      	mov	r0, r5
 8000606:	e705      	b.n	8000414 <__udivmoddi4+0xa4>
 8000608:	4606      	mov	r6, r0
 800060a:	e6e3      	b.n	80003d4 <__udivmoddi4+0x64>
 800060c:	4618      	mov	r0, r3
 800060e:	e6f8      	b.n	8000402 <__udivmoddi4+0x92>
 8000610:	454b      	cmp	r3, r9
 8000612:	d2a9      	bcs.n	8000568 <__udivmoddi4+0x1f8>
 8000614:	ebb9 0802 	subs.w	r8, r9, r2
 8000618:	eb64 0e0c 	sbc.w	lr, r4, ip
 800061c:	3801      	subs	r0, #1
 800061e:	e7a3      	b.n	8000568 <__udivmoddi4+0x1f8>
 8000620:	4646      	mov	r6, r8
 8000622:	e7ea      	b.n	80005fa <__udivmoddi4+0x28a>
 8000624:	4620      	mov	r0, r4
 8000626:	e794      	b.n	8000552 <__udivmoddi4+0x1e2>
 8000628:	4640      	mov	r0, r8
 800062a:	e7d1      	b.n	80005d0 <__udivmoddi4+0x260>
 800062c:	46d0      	mov	r8, sl
 800062e:	e77b      	b.n	8000528 <__udivmoddi4+0x1b8>
 8000630:	3b02      	subs	r3, #2
 8000632:	4461      	add	r1, ip
 8000634:	e732      	b.n	800049c <__udivmoddi4+0x12c>
 8000636:	4630      	mov	r0, r6
 8000638:	e709      	b.n	800044e <__udivmoddi4+0xde>
 800063a:	4464      	add	r4, ip
 800063c:	3802      	subs	r0, #2
 800063e:	e742      	b.n	80004c6 <__udivmoddi4+0x156>

08000640 <__aeabi_idiv0>:
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop

08000644 <stdout_callback>:
  "\x1b[94m", "\x1b[36m", "\x1b[32m", "\x1b[33m", "\x1b[31m", "\x1b[35m"
};
#endif


static void stdout_callback(log_Event *ev) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af02      	add	r7, sp, #8
 800064a:	6078      	str	r0, [r7, #4]
  fprintf(
    ev->udata, "%s %s%-5s\x1b[0m \x1b[90m%s:%d:\x1b[0m ",
    buf, level_colors[ev->level], level_strings[ev->level],
    ev->file, ev->line);
#else
  fprintf(ev->udata, "%s %s:%d: ", level_strings[ev->level], ev->file, ev->line);//, buf ,"%s %-5s %s:%d: "
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6918      	ldr	r0, [r3, #16]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a11      	ldr	r2, [pc, #68]	; (800069c <stdout_callback+0x58>)
 8000656:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6899      	ldr	r1, [r3, #8]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	460b      	mov	r3, r1
 8000666:	490e      	ldr	r1, [pc, #56]	; (80006a0 <stdout_callback+0x5c>)
 8000668:	f003 fa26 	bl	8003ab8 <fiprintf>
#endif
  vfprintf(ev->udata, ev->fmt, ev->ap);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6918      	ldr	r0, [r3, #16]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6859      	ldr	r1, [r3, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	f003 fe2c 	bl	80042d4 <vfiprintf>
  fprintf(ev->udata, "\n");
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	691b      	ldr	r3, [r3, #16]
 8000680:	4619      	mov	r1, r3
 8000682:	200a      	movs	r0, #10
 8000684:	f003 fa62 	bl	8003b4c <fputc>
  fflush(ev->udata);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	691b      	ldr	r3, [r3, #16]
 800068c:	4618      	mov	r0, r3
 800068e:	f003 f92b 	bl	80038e8 <fflush>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000000 	.word	0x20000000
 80006a0:	08005cac 	.word	0x08005cac

080006a4 <lock>:
  fprintf(ev->udata, "\n");
  fflush(ev->udata);
}


static void lock(void)   {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  if (L.lock) { L.lock(true, L.udata); }
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <lock+0x20>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d006      	beq.n	80006be <lock+0x1a>
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <lock+0x20>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	4a03      	ldr	r2, [pc, #12]	; (80006c4 <lock+0x20>)
 80006b6:	6812      	ldr	r2, [r2, #0]
 80006b8:	4611      	mov	r1, r2
 80006ba:	2001      	movs	r0, #1
 80006bc:	4798      	blx	r3
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000010c 	.word	0x2000010c

080006c8 <unlock>:


static void unlock(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  if (L.lock) { L.lock(false, L.udata); }
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <unlock+0x20>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d006      	beq.n	80006e2 <unlock+0x1a>
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <unlock+0x20>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	4a03      	ldr	r2, [pc, #12]	; (80006e8 <unlock+0x20>)
 80006da:	6812      	ldr	r2, [r2, #0]
 80006dc:	4611      	mov	r1, r2
 80006de:	2000      	movs	r0, #0
 80006e0:	4798      	blx	r3
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000010c 	.word	0x2000010c

080006ec <init_event>:
int log_add_fp(FILE *fp, int level) {
  return log_add_callback(file_callback, fp, level);
}


static void init_event(log_Event *ev, void *udata) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
  if (!ev->time) {
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d10e      	bne.n	800071c <init_event+0x30>
    time_t t = time(NULL);
 80006fe:	2000      	movs	r0, #0
 8000700:	f004 f8ea 	bl	80048d8 <time>
 8000704:	4602      	mov	r2, r0
 8000706:	460b      	mov	r3, r1
 8000708:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ev->time = localtime(&t);
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	4618      	mov	r0, r3
 8000712:	f003 fa67 	bl	8003be4 <localtime>
 8000716:	4602      	mov	r2, r0
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	60da      	str	r2, [r3, #12]
  }
  ev->udata = udata;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	683a      	ldr	r2, [r7, #0]
 8000720:	611a      	str	r2, [r3, #16]
}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <log_log>:

//#define __FILENAME__ (strrchr(__FILE__, '/') ? strrchr(__FILE__, '/') + 1 : __FILE__)

void log_log(int level, const char *file, int line, const char *fmt, ...) {
 800072c:	b408      	push	{r3}
 800072e:	b580      	push	{r7, lr}
 8000730:	b08f      	sub	sp, #60	; 0x3c
 8000732:	af00      	add	r7, sp, #0
 8000734:	60f8      	str	r0, [r7, #12]
 8000736:	60b9      	str	r1, [r7, #8]
 8000738:	607a      	str	r2, [r7, #4]
//  // Construct the output string
////  snprintf(output, sizeof(output), "%s/%s", basename(folder), file_name);
//	char *files = file;
//	char filename =  (strrchr(*files, '/') ? strrchr(*files, '/') + 1 : *files);
	//TODO file with parent folder is needed
  log_Event ev = {
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
 800074a:	615a      	str	r2, [r3, #20]
 800074c:	619a      	str	r2, [r3, #24]
 800074e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000750:	61bb      	str	r3, [r7, #24]
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	61fb      	str	r3, [r7, #28]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
    .file  = file,
    .line  = line,
    .level = level,
  };

  lock();
 800075e:	f7ff ffa1 	bl	80006a4 <lock>

  if (!L.quiet && level >= L.level) {
 8000762:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <log_log+0xe8>)
 8000764:	7b1b      	ldrb	r3, [r3, #12]
 8000766:	f083 0301 	eor.w	r3, r3, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d015      	beq.n	800079c <log_log+0x70>
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <log_log+0xe8>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	429a      	cmp	r2, r3
 8000778:	db10      	blt.n	800079c <log_log+0x70>
    init_event(&ev, stderr);
 800077a:	4b27      	ldr	r3, [pc, #156]	; (8000818 <log_log+0xec>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	68da      	ldr	r2, [r3, #12]
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ffb0 	bl	80006ec <init_event>
    va_start(ev.ap, fmt);
 800078c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000790:	617b      	str	r3, [r7, #20]
    stdout_callback(&ev);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff54 	bl	8000644 <stdout_callback>
    va_end(ev.ap);
  }

  for (int i = 0; i < MAX_CALLBACKS && L.callbacks[i].fn; i++) {
 800079c:	2300      	movs	r3, #0
 800079e:	637b      	str	r3, [r7, #52]	; 0x34
 80007a0:	e021      	b.n	80007e6 <log_log+0xba>
    Callback *cb = &L.callbacks[i];
 80007a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007a4:	4613      	mov	r3, r2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	4413      	add	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	3310      	adds	r3, #16
 80007ae:	4a19      	ldr	r2, [pc, #100]	; (8000814 <log_log+0xe8>)
 80007b0:	4413      	add	r3, r2
 80007b2:	633b      	str	r3, [r7, #48]	; 0x30
    if (level >= cb->level) {
 80007b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	db10      	blt.n	80007e0 <log_log+0xb4>
      init_event(&ev, cb->udata);
 80007be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007c0:	685a      	ldr	r2, [r3, #4]
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4611      	mov	r1, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff8f 	bl	80006ec <init_event>
      va_start(ev.ap, fmt);
 80007ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007d2:	617b      	str	r3, [r7, #20]
      cb->fn(&ev);
 80007d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f107 0214 	add.w	r2, r7, #20
 80007dc:	4610      	mov	r0, r2
 80007de:	4798      	blx	r3
  for (int i = 0; i < MAX_CALLBACKS && L.callbacks[i].fn; i++) {
 80007e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007e2:	3301      	adds	r3, #1
 80007e4:	637b      	str	r3, [r7, #52]	; 0x34
 80007e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007e8:	2b1f      	cmp	r3, #31
 80007ea:	dc0a      	bgt.n	8000802 <log_log+0xd6>
 80007ec:	4909      	ldr	r1, [pc, #36]	; (8000814 <log_log+0xe8>)
 80007ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007f0:	4613      	mov	r3, r2
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	4413      	add	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	440b      	add	r3, r1
 80007fa:	3310      	adds	r3, #16
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1cf      	bne.n	80007a2 <log_log+0x76>
      va_end(ev.ap);
    }
  }

  unlock();
 8000802:	f7ff ff61 	bl	80006c8 <unlock>
}
 8000806:	bf00      	nop
 8000808:	373c      	adds	r7, #60	; 0x3c
 800080a:	46bd      	mov	sp, r7
 800080c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000810:	b001      	add	sp, #4
 8000812:	4770      	bx	lr
 8000814:	2000010c 	.word	0x2000010c
 8000818:	20000028 	.word	0x20000028

0800081c <__io_putchar>:
 *
 * @param ch : return the length of character
 * @return
 */
int __io_putchar(int ch)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &*c, 1, 10);
 800082a:	f107 010c 	add.w	r1, r7, #12
 800082e:	230a      	movs	r3, #10
 8000830:	2201      	movs	r2, #1
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <__io_putchar+0x28>)
 8000834:	f002 f9c2 	bl	8002bbc <HAL_UART_Transmit>
 return ch;
 8000838:	687b      	ldr	r3, [r7, #4]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200002ac 	.word	0x200002ac

08000848 <_write>:

int _write(int file,char *ptr, int len)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	e009      	b.n	800086e <_write+0x26>
 {
 __io_putchar(*ptr++);
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	1c5a      	adds	r2, r3, #1
 800085e:	60ba      	str	r2, [r7, #8]
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ffda 	bl	800081c <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	3301      	adds	r3, #1
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	697a      	ldr	r2, [r7, #20]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	429a      	cmp	r2, r3
 8000874:	dbf1      	blt.n	800085a <_write+0x12>
 }
return len;
 8000876:	687b      	ldr	r3, [r7, #4]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <_read>:
 * @param fd
 * @param ptr
 * @param len
 * @return
 */
int _read(int fd, char* ptr, int len) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d10f      	bne.n	80008b2 <_read+0x32>
    hstatus = HAL_UART_Receive(&huart2, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000896:	2201      	movs	r2, #1
 8000898:	68b9      	ldr	r1, [r7, #8]
 800089a:	480b      	ldr	r0, [pc, #44]	; (80008c8 <_read+0x48>)
 800089c:	f002 fa22 	bl	8002ce4 <HAL_UART_Receive>
 80008a0:	4603      	mov	r3, r0
 80008a2:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80008a4:	7dfb      	ldrb	r3, [r7, #23]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d101      	bne.n	80008ae <_read+0x2e>
      return 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	e008      	b.n	80008c0 <_read+0x40>
    else
      return EIO;
 80008ae:	2305      	movs	r3, #5
 80008b0:	e006      	b.n	80008c0 <_read+0x40>
  }
  errno = EBADF;
 80008b2:	f002 ff51 	bl	8003758 <__errno>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2209      	movs	r2, #9
 80008ba:	601a      	str	r2, [r3, #0]
  return -1;
 80008bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200002ac 	.word	0x200002ac

080008cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <MX_GPIO_Init+0xc4>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a2a      	ldr	r2, [pc, #168]	; (8000990 <MX_GPIO_Init+0xc4>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b28      	ldr	r3, [pc, #160]	; (8000990 <MX_GPIO_Init+0xc4>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	4b25      	ldr	r3, [pc, #148]	; (8000990 <MX_GPIO_Init+0xc4>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a24      	ldr	r2, [pc, #144]	; (8000990 <MX_GPIO_Init+0xc4>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b22      	ldr	r3, [pc, #136]	; (8000990 <MX_GPIO_Init+0xc4>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <MX_GPIO_Init+0xc4>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a1e      	ldr	r2, [pc, #120]	; (8000990 <MX_GPIO_Init+0xc4>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_GPIO_Init+0xc4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <MX_GPIO_Init+0xc4>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a18      	ldr	r2, [pc, #96]	; (8000990 <MX_GPIO_Init+0xc4>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_GPIO_Init+0xc4>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2120      	movs	r1, #32
 8000946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094a:	f000 fdb1 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800094e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	480c      	ldr	r0, [pc, #48]	; (8000994 <MX_GPIO_Init+0xc8>)
 8000964:	f000 fbfa 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000968:	2320      	movs	r3, #32
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000982:	f000 fbeb 	bl	800115c <HAL_GPIO_Init>

}
 8000986:	bf00      	nop
 8000988:	3728      	adds	r7, #40	; 0x28
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000
 8000994:	48000800 	.word	0x48000800

08000998 <turn_led_on>:
	  void (*state_handler)(void);
} state_machine_t;

static state_machine_t state_machine;

void turn_led_on(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2120      	movs	r1, #32
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a4:	f000 fd84 	bl	80014b0 <HAL_GPIO_WritePin>
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <turn_led_off>:

void turn_led_off(void) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2120      	movs	r1, #32
 80009b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b8:	f000 fd7a 	bl	80014b0 <HAL_GPIO_WritePin>
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <transition_state>:
		  state_machine->current_state = STATE_OFF;
		  state_machine->state_handler = turn_led_on;
	  }
}

void transition_state(state_machine_t *state_machine) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    switch (state_machine->current_state) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d002      	beq.n	80009d6 <transition_state+0x16>
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d00b      	beq.n	80009ec <transition_state+0x2c>
            state_machine->current_state = STATE_OFF;
            state_machine->state_handler = turn_led_off;
            HAL_Delay(1000);
            break;
        default:
            break;
 80009d4:	e015      	b.n	8000a02 <transition_state+0x42>
            state_machine->current_state = STATE_ON;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
            state_machine->state_handler = turn_led_on;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <transition_state+0x4c>)
 80009e0:	605a      	str	r2, [r3, #4]
            HAL_Delay(1000);
 80009e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e6:	f000 faaf 	bl	8000f48 <HAL_Delay>
            break;
 80009ea:	e00a      	b.n	8000a02 <transition_state+0x42>
            state_machine->current_state = STATE_OFF;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
            state_machine->state_handler = turn_led_off;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <transition_state+0x50>)
 80009f6:	605a      	str	r2, [r3, #4]
            HAL_Delay(1000);
 80009f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009fc:	f000 faa4 	bl	8000f48 <HAL_Delay>
            break;
 8000a00:	bf00      	nop
    }
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	08000999 	.word	0x08000999
 8000a10:	080009ad 	.word	0x080009ad

08000a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a18:	f000 fa1a 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1c:	f000 f820 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a20:	f7ff ff54 	bl	80008cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a24:	f000 f95e 	bl	8000ce4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  state_machine.current_state = STATE_OFF;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <main+0x3c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
  state_machine.state_handler = turn_led_off;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <main+0x3c>)
 8000a30:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <main+0x40>)
 8000a32:	605a      	str	r2, [r3, #4]
//	HAL_Delay(1000);
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
//	HAL_Delay(1000);

//	read_button_state(&state_machine);
	log_info("Hello Sourabh");
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <main+0x44>)
 8000a36:	229d      	movs	r2, #157	; 0x9d
 8000a38:	4908      	ldr	r1, [pc, #32]	; (8000a5c <main+0x48>)
 8000a3a:	2002      	movs	r0, #2
 8000a3c:	f7ff fe76 	bl	800072c <log_log>
	transition_state(&state_machine);
 8000a40:	4803      	ldr	r0, [pc, #12]	; (8000a50 <main+0x3c>)
 8000a42:	f7ff ffbd 	bl	80009c0 <transition_state>
	state_machine.state_handler();
 8000a46:	4b02      	ldr	r3, [pc, #8]	; (8000a50 <main+0x3c>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	4798      	blx	r3
	log_info("Hello Sourabh");
 8000a4c:	e7f2      	b.n	8000a34 <main+0x20>
 8000a4e:	bf00      	nop
 8000a50:	2000029c 	.word	0x2000029c
 8000a54:	080009ad 	.word	0x080009ad
 8000a58:	08005cdc 	.word	0x08005cdc
 8000a5c:	08005cec 	.word	0x08005cec

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b096      	sub	sp, #88	; 0x58
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2244      	movs	r2, #68	; 0x44
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f003 f9ee 	bl	8003e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	463b      	mov	r3, r7
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a86:	f000 fd39 	bl	80014fc <HAL_PWREx_ControlVoltageScaling>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a90:	f000 f837 	bl	8000b02 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a94:	2302      	movs	r3, #2
 8000a96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9e:	2310      	movs	r3, #16
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000aae:	230a      	movs	r3, #10
 8000ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fd70 	bl	80015a8 <HAL_RCC_OscConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ace:	f000 f818 	bl	8000b02 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2104      	movs	r1, #4
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 f938 	bl	8001d60 <HAL_RCC_ClockConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000af6:	f000 f804 	bl	8000b02 <Error_Handler>
  }
}
 8000afa:	bf00      	nop
 8000afc:	3758      	adds	r7, #88	; 0x58
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b06:	b672      	cpsid	i
}
 8000b08:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <Error_Handler+0x8>

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_MspInit+0x44>)
 8000b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b16:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <HAL_MspInit+0x44>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <HAL_MspInit+0x44>)
 8000b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x44>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x44>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6593      	str	r3, [r2, #88]	; 0x58
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x44>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <NMI_Handler+0x4>

08000b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <MemManage_Handler+0x4>

08000b66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba0:	f000 f9b2 	bl	8000f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return 1;
 8000bac:	2301      	movs	r3, #1
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_kill>:

int _kill(int pid, int sig)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bc2:	f002 fdc9 	bl	8003758 <__errno>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2216      	movs	r2, #22
 8000bca:	601a      	str	r2, [r3, #0]
  return -1;
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <_exit>:

void _exit (int status)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ffe7 	bl	8000bb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bea:	e7fe      	b.n	8000bea <_exit+0x12>

08000bec <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c14:	605a      	str	r2, [r3, #4]
  return 0;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <_isatty>:

int _isatty(int file)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c2c:	2301      	movs	r3, #1
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b085      	sub	sp, #20
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	60f8      	str	r0, [r7, #12]
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f002 fd68 	bl	8003758 <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20018000 	.word	0x20018000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	200002a8 	.word	0x200002a8
 8000cbc:	20000370 	.word	0x20000370

08000cc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_USART2_UART_Init+0x58>)
 8000cea:	4a15      	ldr	r2, [pc, #84]	; (8000d40 <MX_USART2_UART_Init+0x5c>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <MX_USART2_UART_Init+0x58>)
 8000cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_USART2_UART_Init+0x58>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_USART2_UART_Init+0x58>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_USART2_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_USART2_UART_Init+0x58>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_USART2_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_USART2_UART_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <MX_USART2_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_USART2_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_USART2_UART_Init+0x58>)
 8000d28:	f001 fefa 	bl	8002b20 <HAL_UART_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d32:	f7ff fee6 	bl	8000b02 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200002ac 	.word	0x200002ac
 8000d40:	40004400 	.word	0x40004400

08000d44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b0ac      	sub	sp, #176	; 0xb0
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2288      	movs	r2, #136	; 0x88
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f003 f873 	bl	8003e50 <memset>
  if(uartHandle->Instance==USART2)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a21      	ldr	r2, [pc, #132]	; (8000df4 <HAL_UART_MspInit+0xb0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d13b      	bne.n	8000dec <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d74:	2302      	movs	r3, #2
 8000d76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4618      	mov	r0, r3
 8000d82:	f001 fa11 	bl	80021a8 <HAL_RCCEx_PeriphCLKConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d8c:	f7ff feb9 	bl	8000b02 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_UART_MspInit+0xb4>)
 8000d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d94:	4a18      	ldr	r2, [pc, #96]	; (8000df8 <HAL_UART_MspInit+0xb4>)
 8000d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d9c:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <HAL_UART_MspInit+0xb4>)
 8000d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <HAL_UART_MspInit+0xb4>)
 8000daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dac:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <HAL_UART_MspInit+0xb4>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db4:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <HAL_UART_MspInit+0xb4>)
 8000db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd8:	2307      	movs	r3, #7
 8000dda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000de2:	4619      	mov	r1, r3
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de8:	f000 f9b8 	bl	800115c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dec:	bf00      	nop
 8000dee:	37b0      	adds	r7, #176	; 0xb0
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40004400 	.word	0x40004400
 8000df8:	40021000 	.word	0x40021000

08000dfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e00:	f7ff ff5e 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	; (8000e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <LoopForever+0xe>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	; (8000e48 <LoopForever+0x16>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f002 feb7 	bl	8003b9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e2e:	f7ff fdf1 	bl	8000a14 <main>

08000e32 <LoopForever>:

LoopForever:
    b LoopForever
 8000e32:	e7fe      	b.n	8000e32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8000e40:	08006068 	.word	0x08006068
  ldr r2, =_sbss
 8000e44:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8000e48:	2000036c 	.word	0x2000036c

08000e4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC1_2_IRQHandler>
	...

08000e50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <HAL_Init+0x3c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <HAL_Init+0x3c>)
 8000e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e64:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e66:	2003      	movs	r0, #3
 8000e68:	f000 f944 	bl	80010f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f000 f80f 	bl	8000e90 <HAL_InitTick>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d002      	beq.n	8000e7e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	71fb      	strb	r3, [r7, #7]
 8000e7c:	e001      	b.n	8000e82 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e7e:	f7ff fe45 	bl	8000b0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e82:	79fb      	ldrb	r3, [r7, #7]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40022000 	.word	0x40022000

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_InitTick+0x6c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d023      	beq.n	8000eec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <HAL_InitTick+0x70>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <HAL_InitTick+0x6c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f941 	bl	8001142 <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10f      	bne.n	8000ee6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d809      	bhi.n	8000ee0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ed4:	f000 f919 	bl	800110a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_InitTick+0x74>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e007      	b.n	8000ef0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e004      	b.n	8000ef0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	e001      	b.n	8000ef0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000024 	.word	0x20000024
 8000f00:	2000001c 	.word	0x2000001c
 8000f04:	20000020 	.word	0x20000020

08000f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x20>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x24>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_IncTick+0x24>)
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000024 	.word	0x20000024
 8000f2c:	20000330 	.word	0x20000330

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <HAL_GetTick+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000330 	.word	0x20000330

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff ffee 	bl	8000f30 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_Delay+0x44>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ffde 	bl	8000f30 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f7      	bhi.n	8000f70 <HAL_Delay+0x28>
  {
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000024 	.word	0x20000024

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c0:	d301      	bcc.n	80010c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00f      	b.n	80010e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <SysTick_Config+0x40>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ce:	210f      	movs	r1, #15
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010d4:	f7ff ff8e 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <SysTick_Config+0x40>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <SysTick_Config+0x40>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	e000e010 	.word	0xe000e010

080010f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ff47 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800111c:	f7ff ff5c 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 8001120:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	6978      	ldr	r0, [r7, #20]
 8001128:	f7ff ff8e 	bl	8001048 <NVIC_EncodePriority>
 800112c:	4602      	mov	r2, r0
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff5d 	bl	8000ff4 <__NVIC_SetPriority>
}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffb0 	bl	80010b0 <SysTick_Config>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116a:	e17f      	b.n	800146c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	2101      	movs	r1, #1
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	fa01 f303 	lsl.w	r3, r1, r3
 8001178:	4013      	ands	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 8171 	beq.w	8001466 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b01      	cmp	r3, #1
 800118e:	d005      	beq.n	800119c <HAL_GPIO_Init+0x40>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d130      	bne.n	80011fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011d2:	2201      	movs	r2, #1
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	091b      	lsrs	r3, r3, #4
 80011e8:	f003 0201 	and.w	r2, r3, #1
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	2b03      	cmp	r3, #3
 8001208:	d118      	bne.n	800123c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001210:	2201      	movs	r2, #1
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	08db      	lsrs	r3, r3, #3
 8001226:	f003 0201 	and.w	r2, r3, #1
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b03      	cmp	r3, #3
 8001246:	d017      	beq.n	8001278 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d123      	bne.n	80012cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	08da      	lsrs	r2, r3, #3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3208      	adds	r2, #8
 800128c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	220f      	movs	r2, #15
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	08da      	lsrs	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3208      	adds	r2, #8
 80012c6:	6939      	ldr	r1, [r7, #16]
 80012c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0203 	and.w	r2, r3, #3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 80ac 	beq.w	8001466 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b5f      	ldr	r3, [pc, #380]	; (800148c <HAL_GPIO_Init+0x330>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001312:	4a5e      	ldr	r2, [pc, #376]	; (800148c <HAL_GPIO_Init+0x330>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6613      	str	r3, [r2, #96]	; 0x60
 800131a:	4b5c      	ldr	r3, [pc, #368]	; (800148c <HAL_GPIO_Init+0x330>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001326:	4a5a      	ldr	r2, [pc, #360]	; (8001490 <HAL_GPIO_Init+0x334>)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	089b      	lsrs	r3, r3, #2
 800132c:	3302      	adds	r3, #2
 800132e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	220f      	movs	r2, #15
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001350:	d025      	beq.n	800139e <HAL_GPIO_Init+0x242>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4f      	ldr	r2, [pc, #316]	; (8001494 <HAL_GPIO_Init+0x338>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d01f      	beq.n	800139a <HAL_GPIO_Init+0x23e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4e      	ldr	r2, [pc, #312]	; (8001498 <HAL_GPIO_Init+0x33c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d019      	beq.n	8001396 <HAL_GPIO_Init+0x23a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4d      	ldr	r2, [pc, #308]	; (800149c <HAL_GPIO_Init+0x340>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d013      	beq.n	8001392 <HAL_GPIO_Init+0x236>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4c      	ldr	r2, [pc, #304]	; (80014a0 <HAL_GPIO_Init+0x344>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00d      	beq.n	800138e <HAL_GPIO_Init+0x232>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4b      	ldr	r2, [pc, #300]	; (80014a4 <HAL_GPIO_Init+0x348>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d007      	beq.n	800138a <HAL_GPIO_Init+0x22e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4a      	ldr	r2, [pc, #296]	; (80014a8 <HAL_GPIO_Init+0x34c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_GPIO_Init+0x22a>
 8001382:	2306      	movs	r3, #6
 8001384:	e00c      	b.n	80013a0 <HAL_GPIO_Init+0x244>
 8001386:	2307      	movs	r3, #7
 8001388:	e00a      	b.n	80013a0 <HAL_GPIO_Init+0x244>
 800138a:	2305      	movs	r3, #5
 800138c:	e008      	b.n	80013a0 <HAL_GPIO_Init+0x244>
 800138e:	2304      	movs	r3, #4
 8001390:	e006      	b.n	80013a0 <HAL_GPIO_Init+0x244>
 8001392:	2303      	movs	r3, #3
 8001394:	e004      	b.n	80013a0 <HAL_GPIO_Init+0x244>
 8001396:	2302      	movs	r3, #2
 8001398:	e002      	b.n	80013a0 <HAL_GPIO_Init+0x244>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <HAL_GPIO_Init+0x244>
 800139e:	2300      	movs	r3, #0
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	f002 0203 	and.w	r2, r2, #3
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	4093      	lsls	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013b0:	4937      	ldr	r1, [pc, #220]	; (8001490 <HAL_GPIO_Init+0x334>)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013be:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <HAL_GPIO_Init+0x350>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013e2:	4a32      	ldr	r2, [pc, #200]	; (80014ac <HAL_GPIO_Init+0x350>)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013e8:	4b30      	ldr	r3, [pc, #192]	; (80014ac <HAL_GPIO_Init+0x350>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800140c:	4a27      	ldr	r2, [pc, #156]	; (80014ac <HAL_GPIO_Init+0x350>)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <HAL_GPIO_Init+0x350>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001436:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <HAL_GPIO_Init+0x350>)
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <HAL_GPIO_Init+0x350>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001460:	4a12      	ldr	r2, [pc, #72]	; (80014ac <HAL_GPIO_Init+0x350>)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	3301      	adds	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa22 f303 	lsr.w	r3, r2, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	f47f ae78 	bne.w	800116c <HAL_GPIO_Init+0x10>
  }
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	371c      	adds	r7, #28
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000
 8001490:	40010000 	.word	0x40010000
 8001494:	48000400 	.word	0x48000400
 8001498:	48000800 	.word	0x48000800
 800149c:	48000c00 	.word	0x48000c00
 80014a0:	48001000 	.word	0x48001000
 80014a4:	48001400 	.word	0x48001400
 80014a8:	48001800 	.word	0x48001800
 80014ac:	40010400 	.word	0x40010400

080014b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
 80014bc:	4613      	mov	r3, r2
 80014be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014c0:	787b      	ldrb	r3, [r7, #1]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014c6:	887a      	ldrh	r2, [r7, #2]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40007000 	.word	0x40007000

080014fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800150a:	d130      	bne.n	800156e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800150c:	4b23      	ldr	r3, [pc, #140]	; (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001518:	d038      	beq.n	800158c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001522:	4a1e      	ldr	r2, [pc, #120]	; (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001524:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001528:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2232      	movs	r2, #50	; 0x32
 8001530:	fb02 f303 	mul.w	r3, r2, r3
 8001534:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	0c9b      	lsrs	r3, r3, #18
 800153c:	3301      	adds	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001540:	e002      	b.n	8001548 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3b01      	subs	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001554:	d102      	bne.n	800155c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f2      	bne.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001568:	d110      	bne.n	800158c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e00f      	b.n	800158e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157a:	d007      	beq.n	800158c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001584:	4a05      	ldr	r2, [pc, #20]	; (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800158a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40007000 	.word	0x40007000
 80015a0:	2000001c 	.word	0x2000001c
 80015a4:	431bde83 	.word	0x431bde83

080015a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e3ca      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ba:	4b97      	ldr	r3, [pc, #604]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c4:	4b94      	ldr	r3, [pc, #592]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 80e4 	beq.w	80017a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d007      	beq.n	80015f2 <HAL_RCC_OscConfig+0x4a>
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	2b0c      	cmp	r3, #12
 80015e6:	f040 808b 	bne.w	8001700 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	f040 8087 	bne.w	8001700 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015f2:	4b89      	ldr	r3, [pc, #548]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d005      	beq.n	800160a <HAL_RCC_OscConfig+0x62>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e3a2      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1a      	ldr	r2, [r3, #32]
 800160e:	4b82      	ldr	r3, [pc, #520]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d004      	beq.n	8001624 <HAL_RCC_OscConfig+0x7c>
 800161a:	4b7f      	ldr	r3, [pc, #508]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001622:	e005      	b.n	8001630 <HAL_RCC_OscConfig+0x88>
 8001624:	4b7c      	ldr	r3, [pc, #496]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001630:	4293      	cmp	r3, r2
 8001632:	d223      	bcs.n	800167c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4618      	mov	r0, r3
 800163a:	f000 fd55 	bl	80020e8 <RCC_SetFlashLatencyFromMSIRange>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e383      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001648:	4b73      	ldr	r3, [pc, #460]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a72      	ldr	r2, [pc, #456]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800164e:	f043 0308 	orr.w	r3, r3, #8
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b70      	ldr	r3, [pc, #448]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	496d      	ldr	r1, [pc, #436]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001666:	4b6c      	ldr	r3, [pc, #432]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	4968      	ldr	r1, [pc, #416]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
 800167a:	e025      	b.n	80016c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800167c:	4b66      	ldr	r3, [pc, #408]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a65      	ldr	r2, [pc, #404]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001682:	f043 0308 	orr.w	r3, r3, #8
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	4b63      	ldr	r3, [pc, #396]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4960      	ldr	r1, [pc, #384]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800169a:	4b5f      	ldr	r3, [pc, #380]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	495b      	ldr	r1, [pc, #364]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d109      	bne.n	80016c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 fd15 	bl	80020e8 <RCC_SetFlashLatencyFromMSIRange>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e343      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016c8:	f000 fc4a 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b52      	ldr	r3, [pc, #328]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	091b      	lsrs	r3, r3, #4
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	4950      	ldr	r1, [pc, #320]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80016da:	5ccb      	ldrb	r3, [r1, r3]
 80016dc:	f003 031f 	and.w	r3, r3, #31
 80016e0:	fa22 f303 	lsr.w	r3, r2, r3
 80016e4:	4a4e      	ldr	r2, [pc, #312]	; (8001820 <HAL_RCC_OscConfig+0x278>)
 80016e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016e8:	4b4e      	ldr	r3, [pc, #312]	; (8001824 <HAL_RCC_OscConfig+0x27c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fbcf 	bl	8000e90 <HAL_InitTick>
 80016f2:	4603      	mov	r3, r0
 80016f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d052      	beq.n	80017a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	e327      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d032      	beq.n	800176e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001708:	4b43      	ldr	r3, [pc, #268]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a42      	ldr	r2, [pc, #264]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001714:	f7ff fc0c 	bl	8000f30 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800171c:	f7ff fc08 	bl	8000f30 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e310      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800172e:	4b3a      	ldr	r3, [pc, #232]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800173a:	4b37      	ldr	r3, [pc, #220]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a36      	ldr	r2, [pc, #216]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001740:	f043 0308 	orr.w	r3, r3, #8
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b34      	ldr	r3, [pc, #208]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4931      	ldr	r1, [pc, #196]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001754:	4313      	orrs	r3, r2
 8001756:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001758:	4b2f      	ldr	r3, [pc, #188]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	492c      	ldr	r1, [pc, #176]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001768:	4313      	orrs	r3, r2
 800176a:	604b      	str	r3, [r1, #4]
 800176c:	e01a      	b.n	80017a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800176e:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a29      	ldr	r2, [pc, #164]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800177a:	f7ff fbd9 	bl	8000f30 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001782:	f7ff fbd5 	bl	8000f30 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e2dd      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001794:	4b20      	ldr	r3, [pc, #128]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f0      	bne.n	8001782 <HAL_RCC_OscConfig+0x1da>
 80017a0:	e000      	b.n	80017a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d074      	beq.n	800189a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d005      	beq.n	80017c2 <HAL_RCC_OscConfig+0x21a>
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	2b0c      	cmp	r3, #12
 80017ba:	d10e      	bne.n	80017da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d10b      	bne.n	80017da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d064      	beq.n	8001898 <HAL_RCC_OscConfig+0x2f0>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d160      	bne.n	8001898 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e2ba      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e2:	d106      	bne.n	80017f2 <HAL_RCC_OscConfig+0x24a>
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 80017ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	e026      	b.n	8001840 <HAL_RCC_OscConfig+0x298>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017fa:	d115      	bne.n	8001828 <HAL_RCC_OscConfig+0x280>
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a05      	ldr	r2, [pc, #20]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001802:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a02      	ldr	r2, [pc, #8]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800180e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e014      	b.n	8001840 <HAL_RCC_OscConfig+0x298>
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000
 800181c:	08005d0c 	.word	0x08005d0c
 8001820:	2000001c 	.word	0x2000001c
 8001824:	20000020 	.word	0x20000020
 8001828:	4ba0      	ldr	r3, [pc, #640]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a9f      	ldr	r2, [pc, #636]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 800182e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b9d      	ldr	r3, [pc, #628]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a9c      	ldr	r2, [pc, #624]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 800183a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d013      	beq.n	8001870 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff fb72 	bl	8000f30 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fb6e 	bl	8000f30 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e276      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001862:	4b92      	ldr	r3, [pc, #584]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x2a8>
 800186e:	e014      	b.n	800189a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff fb5e 	bl	8000f30 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff fb5a 	bl	8000f30 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e262      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800188a:	4b88      	ldr	r3, [pc, #544]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x2d0>
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d060      	beq.n	8001968 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_OscConfig+0x310>
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2b0c      	cmp	r3, #12
 80018b0:	d119      	bne.n	80018e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d116      	bne.n	80018e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b8:	4b7c      	ldr	r3, [pc, #496]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_OscConfig+0x328>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e23f      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	4b76      	ldr	r3, [pc, #472]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	061b      	lsls	r3, r3, #24
 80018de:	4973      	ldr	r1, [pc, #460]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e4:	e040      	b.n	8001968 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d023      	beq.n	8001936 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ee:	4b6f      	ldr	r3, [pc, #444]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a6e      	ldr	r2, [pc, #440]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff fb19 	bl	8000f30 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001902:	f7ff fb15 	bl	8000f30 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e21d      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001914:	4b65      	ldr	r3, [pc, #404]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001920:	4b62      	ldr	r3, [pc, #392]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	061b      	lsls	r3, r3, #24
 800192e:	495f      	ldr	r1, [pc, #380]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
 8001934:	e018      	b.n	8001968 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001936:	4b5d      	ldr	r3, [pc, #372]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a5c      	ldr	r2, [pc, #368]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 800193c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff faf5 	bl	8000f30 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194a:	f7ff faf1 	bl	8000f30 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e1f9      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800195c:	4b53      	ldr	r3, [pc, #332]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d03c      	beq.n	80019ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01c      	beq.n	80019b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197c:	4b4b      	ldr	r3, [pc, #300]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 800197e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001982:	4a4a      	ldr	r2, [pc, #296]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198c:	f7ff fad0 	bl	8000f30 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001994:	f7ff facc 	bl	8000f30 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e1d4      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a6:	4b41      	ldr	r3, [pc, #260]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 80019a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0ef      	beq.n	8001994 <HAL_RCC_OscConfig+0x3ec>
 80019b4:	e01b      	b.n	80019ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b6:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 80019b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019bc:	4a3b      	ldr	r2, [pc, #236]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c6:	f7ff fab3 	bl	8000f30 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ce:	f7ff faaf 	bl	8000f30 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e1b7      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e0:	4b32      	ldr	r3, [pc, #200]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 80019e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1ef      	bne.n	80019ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 80a6 	beq.w	8001b48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fc:	2300      	movs	r3, #0
 80019fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a00:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10d      	bne.n	8001a28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0c:	4b27      	ldr	r3, [pc, #156]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a10:	4a26      	ldr	r2, [pc, #152]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a16:	6593      	str	r3, [r2, #88]	; 0x58
 8001a18:	4b24      	ldr	r3, [pc, #144]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a24:	2301      	movs	r3, #1
 8001a26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_RCC_OscConfig+0x508>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d118      	bne.n	8001a66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a34:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <HAL_RCC_OscConfig+0x508>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <HAL_RCC_OscConfig+0x508>)
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a40:	f7ff fa76 	bl	8000f30 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a48:	f7ff fa72 	bl	8000f30 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e17a      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_RCC_OscConfig+0x508>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d108      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4d8>
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a7e:	e029      	b.n	8001ad4 <HAL_RCC_OscConfig+0x52c>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d115      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x50c>
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8e:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9e:	4a03      	ldr	r2, [pc, #12]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa8:	e014      	b.n	8001ad4 <HAL_RCC_OscConfig+0x52c>
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40007000 	.word	0x40007000
 8001ab4:	4b9c      	ldr	r3, [pc, #624]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aba:	4a9b      	ldr	r2, [pc, #620]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ac4:	4b98      	ldr	r3, [pc, #608]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aca:	4a97      	ldr	r2, [pc, #604]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d016      	beq.n	8001b0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001adc:	f7ff fa28 	bl	8000f30 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae2:	e00a      	b.n	8001afa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae4:	f7ff fa24 	bl	8000f30 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e12a      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001afa:	4b8b      	ldr	r3, [pc, #556]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0ed      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x53c>
 8001b08:	e015      	b.n	8001b36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0a:	f7ff fa11 	bl	8000f30 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7ff fa0d 	bl	8000f30 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e113      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b28:	4b7f      	ldr	r3, [pc, #508]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1ed      	bne.n	8001b12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b36:	7ffb      	ldrb	r3, [r7, #31]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d105      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3c:	4b7a      	ldr	r3, [pc, #488]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b40:	4a79      	ldr	r2, [pc, #484]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b46:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 80fe 	beq.w	8001d4e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	f040 80d0 	bne.w	8001cfc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b5c:	4b72      	ldr	r3, [pc, #456]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 0203 	and.w	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d130      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d127      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d11f      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b9c:	2a07      	cmp	r2, #7
 8001b9e:	bf14      	ite	ne
 8001ba0:	2201      	movne	r2, #1
 8001ba2:	2200      	moveq	r2, #0
 8001ba4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d113      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb4:	085b      	lsrs	r3, r3, #1
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d109      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	085b      	lsrs	r3, r3, #1
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d06e      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2b0c      	cmp	r3, #12
 8001bd6:	d069      	beq.n	8001cac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bd8:	4b53      	ldr	r3, [pc, #332]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d105      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001be4:	4b50      	ldr	r3, [pc, #320]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0ad      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bf4:	4b4c      	ldr	r3, [pc, #304]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a4b      	ldr	r2, [pc, #300]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bfe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c00:	f7ff f996 	bl	8000f30 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c08:	f7ff f992 	bl	8000f30 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e09a      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c1a:	4b43      	ldr	r3, [pc, #268]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c26:	4b40      	ldr	r3, [pc, #256]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	4b40      	ldr	r3, [pc, #256]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c36:	3a01      	subs	r2, #1
 8001c38:	0112      	lsls	r2, r2, #4
 8001c3a:	4311      	orrs	r1, r2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c40:	0212      	lsls	r2, r2, #8
 8001c42:	4311      	orrs	r1, r2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c48:	0852      	lsrs	r2, r2, #1
 8001c4a:	3a01      	subs	r2, #1
 8001c4c:	0552      	lsls	r2, r2, #21
 8001c4e:	4311      	orrs	r1, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c54:	0852      	lsrs	r2, r2, #1
 8001c56:	3a01      	subs	r2, #1
 8001c58:	0652      	lsls	r2, r2, #25
 8001c5a:	4311      	orrs	r1, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c60:	0912      	lsrs	r2, r2, #4
 8001c62:	0452      	lsls	r2, r2, #17
 8001c64:	430a      	orrs	r2, r1
 8001c66:	4930      	ldr	r1, [pc, #192]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c6c:	4b2e      	ldr	r3, [pc, #184]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a2d      	ldr	r2, [pc, #180]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c78:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	4a2a      	ldr	r2, [pc, #168]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c84:	f7ff f954 	bl	8000f30 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7ff f950 	bl	8000f30 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e058      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9e:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001caa:	e050      	b.n	8001d4e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e04f      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d148      	bne.n	8001d4e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cbc:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cc8:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4a16      	ldr	r2, [pc, #88]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cd4:	f7ff f92c 	bl	8000f30 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7ff f928 	bl	8000f30 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e030      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x734>
 8001cfa:	e028      	b.n	8001d4e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	d023      	beq.n	8001d4a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a08      	ldr	r2, [pc, #32]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0e:	f7ff f90f 	bl	8000f30 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d14:	e00c      	b.n	8001d30 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d16:	f7ff f90b 	bl	8000f30 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d905      	bls.n	8001d30 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e013      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_RCC_OscConfig+0x7b0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1ec      	bne.n	8001d16 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_RCC_OscConfig+0x7b0>)
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	4905      	ldr	r1, [pc, #20]	; (8001d58 <HAL_RCC_OscConfig+0x7b0>)
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_RCC_OscConfig+0x7b4>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	60cb      	str	r3, [r1, #12]
 8001d48:	e001      	b.n	8001d4e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3720      	adds	r7, #32
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	feeefffc 	.word	0xfeeefffc

08001d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0e7      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d74:	4b75      	ldr	r3, [pc, #468]	; (8001f4c <HAL_RCC_ClockConfig+0x1ec>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d910      	bls.n	8001da4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d82:	4b72      	ldr	r3, [pc, #456]	; (8001f4c <HAL_RCC_ClockConfig+0x1ec>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 0207 	bic.w	r2, r3, #7
 8001d8a:	4970      	ldr	r1, [pc, #448]	; (8001f4c <HAL_RCC_ClockConfig+0x1ec>)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d92:	4b6e      	ldr	r3, [pc, #440]	; (8001f4c <HAL_RCC_ClockConfig+0x1ec>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0cf      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d010      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	4b66      	ldr	r3, [pc, #408]	; (8001f50 <HAL_RCC_ClockConfig+0x1f0>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d908      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc0:	4b63      	ldr	r3, [pc, #396]	; (8001f50 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	4960      	ldr	r1, [pc, #384]	; (8001f50 <HAL_RCC_ClockConfig+0x1f0>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d04c      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de6:	4b5a      	ldr	r3, [pc, #360]	; (8001f50 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d121      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0a6      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfe:	4b54      	ldr	r3, [pc, #336]	; (8001f50 <HAL_RCC_ClockConfig+0x1f0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d115      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e09a      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d107      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e16:	4b4e      	ldr	r3, [pc, #312]	; (8001f50 <HAL_RCC_ClockConfig+0x1f0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e08e      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e26:	4b4a      	ldr	r3, [pc, #296]	; (8001f50 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e086      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e36:	4b46      	ldr	r3, [pc, #280]	; (8001f50 <HAL_RCC_ClockConfig+0x1f0>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f023 0203 	bic.w	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4943      	ldr	r1, [pc, #268]	; (8001f50 <HAL_RCC_ClockConfig+0x1f0>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e48:	f7ff f872 	bl	8000f30 <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e50:	f7ff f86e 	bl	8000f30 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e06e      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <HAL_RCC_ClockConfig+0x1f0>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 020c 	and.w	r2, r3, #12
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d1eb      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d010      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	4b31      	ldr	r3, [pc, #196]	; (8001f50 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d208      	bcs.n	8001ea6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e94:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <HAL_RCC_ClockConfig+0x1f0>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	492b      	ldr	r1, [pc, #172]	; (8001f50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea6:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <HAL_RCC_ClockConfig+0x1ec>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d210      	bcs.n	8001ed6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb4:	4b25      	ldr	r3, [pc, #148]	; (8001f4c <HAL_RCC_ClockConfig+0x1ec>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f023 0207 	bic.w	r2, r3, #7
 8001ebc:	4923      	ldr	r1, [pc, #140]	; (8001f4c <HAL_RCC_ClockConfig+0x1ec>)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec4:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <HAL_RCC_ClockConfig+0x1ec>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e036      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d008      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	4918      	ldr	r1, [pc, #96]	; (8001f50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d009      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f00:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <HAL_RCC_ClockConfig+0x1f0>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4910      	ldr	r1, [pc, #64]	; (8001f50 <HAL_RCC_ClockConfig+0x1f0>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f14:	f000 f824 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	091b      	lsrs	r3, r3, #4
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	490b      	ldr	r1, [pc, #44]	; (8001f54 <HAL_RCC_ClockConfig+0x1f4>)
 8001f26:	5ccb      	ldrb	r3, [r1, r3]
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f30:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <HAL_RCC_ClockConfig+0x1f8>)
 8001f32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_RCC_ClockConfig+0x1fc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe ffa9 	bl	8000e90 <HAL_InitTick>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f42:	7afb      	ldrb	r3, [r7, #11]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40022000 	.word	0x40022000
 8001f50:	40021000 	.word	0x40021000
 8001f54:	08005d0c 	.word	0x08005d0c
 8001f58:	2000001c 	.word	0x2000001c
 8001f5c:	20000020 	.word	0x20000020

08001f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f6e:	4b3e      	ldr	r3, [pc, #248]	; (8002068 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f78:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0x34>
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b0c      	cmp	r3, #12
 8001f8c:	d121      	bne.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d11e      	bne.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f94:	4b34      	ldr	r3, [pc, #208]	; (8002068 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d107      	bne.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fa0:	4b31      	ldr	r3, [pc, #196]	; (8002068 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa6:	0a1b      	lsrs	r3, r3, #8
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	e005      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fbc:	4a2b      	ldr	r2, [pc, #172]	; (800206c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10d      	bne.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d102      	bne.n	8001fde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	e004      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fe4:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fe6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d134      	bne.n	8002058 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d003      	beq.n	8002006 <HAL_RCC_GetSysClockFreq+0xa6>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d003      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0xac>
 8002004:	e005      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002006:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_RCC_GetSysClockFreq+0x110>)
 8002008:	617b      	str	r3, [r7, #20]
      break;
 800200a:	e005      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_RCC_GetSysClockFreq+0x114>)
 800200e:	617b      	str	r3, [r7, #20]
      break;
 8002010:	e002      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	617b      	str	r3, [r7, #20]
      break;
 8002016:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_RCC_GetSysClockFreq+0x108>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	3301      	adds	r3, #1
 8002024:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <HAL_RCC_GetSysClockFreq+0x108>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	0a1b      	lsrs	r3, r3, #8
 800202c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	fb03 f202 	mul.w	r2, r3, r2
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	fbb2 f3f3 	udiv	r3, r2, r3
 800203c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_RCC_GetSysClockFreq+0x108>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	0e5b      	lsrs	r3, r3, #25
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	3301      	adds	r3, #1
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	fbb2 f3f3 	udiv	r3, r2, r3
 8002056:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002058:	69bb      	ldr	r3, [r7, #24]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	08005d24 	.word	0x08005d24
 8002070:	00f42400 	.word	0x00f42400
 8002074:	007a1200 	.word	0x007a1200

08002078 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HAL_RCC_GetHCLKFreq+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	2000001c 	.word	0x2000001c

08002090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002094:	f7ff fff0 	bl	8002078 <HAL_RCC_GetHCLKFreq>
 8002098:	4602      	mov	r2, r0
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	0a1b      	lsrs	r3, r3, #8
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	4904      	ldr	r1, [pc, #16]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020a6:	5ccb      	ldrb	r3, [r1, r3]
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000
 80020b8:	08005d1c 	.word	0x08005d1c

080020bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020c0:	f7ff ffda 	bl	8002078 <HAL_RCC_GetHCLKFreq>
 80020c4:	4602      	mov	r2, r0
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	0adb      	lsrs	r3, r3, #11
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	4904      	ldr	r1, [pc, #16]	; (80020e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020d2:	5ccb      	ldrb	r3, [r1, r3]
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020dc:	4618      	mov	r0, r3
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000
 80020e4:	08005d1c 	.word	0x08005d1c

080020e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020f0:	2300      	movs	r3, #0
 80020f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020f4:	4b2a      	ldr	r3, [pc, #168]	; (80021a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002100:	f7ff f9ee 	bl	80014e0 <HAL_PWREx_GetVoltageRange>
 8002104:	6178      	str	r0, [r7, #20]
 8002106:	e014      	b.n	8002132 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002108:	4b25      	ldr	r3, [pc, #148]	; (80021a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	4a24      	ldr	r2, [pc, #144]	; (80021a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800210e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002112:	6593      	str	r3, [r2, #88]	; 0x58
 8002114:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002120:	f7ff f9de 	bl	80014e0 <HAL_PWREx_GetVoltageRange>
 8002124:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	4a1d      	ldr	r2, [pc, #116]	; (80021a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800212c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002130:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002138:	d10b      	bne.n	8002152 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b80      	cmp	r3, #128	; 0x80
 800213e:	d919      	bls.n	8002174 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2ba0      	cmp	r3, #160	; 0xa0
 8002144:	d902      	bls.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002146:	2302      	movs	r3, #2
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	e013      	b.n	8002174 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800214c:	2301      	movs	r3, #1
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	e010      	b.n	8002174 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b80      	cmp	r3, #128	; 0x80
 8002156:	d902      	bls.n	800215e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002158:	2303      	movs	r3, #3
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	e00a      	b.n	8002174 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b80      	cmp	r3, #128	; 0x80
 8002162:	d102      	bne.n	800216a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002164:	2302      	movs	r3, #2
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	e004      	b.n	8002174 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b70      	cmp	r3, #112	; 0x70
 800216e:	d101      	bne.n	8002174 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002170:	2301      	movs	r3, #1
 8002172:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f023 0207 	bic.w	r2, r3, #7
 800217c:	4909      	ldr	r1, [pc, #36]	; (80021a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002184:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	429a      	cmp	r2, r3
 8002190:	d001      	beq.n	8002196 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40022000 	.word	0x40022000

080021a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021b0:	2300      	movs	r3, #0
 80021b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021b4:	2300      	movs	r3, #0
 80021b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d041      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021cc:	d02a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021d2:	d824      	bhi.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021d8:	d008      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021de:	d81e      	bhi.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021e8:	d010      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021ea:	e018      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021ec:	4b86      	ldr	r3, [pc, #536]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4a85      	ldr	r2, [pc, #532]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021f8:	e015      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3304      	adds	r3, #4
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f000 fabb 	bl	800277c <RCCEx_PLLSAI1_Config>
 8002206:	4603      	mov	r3, r0
 8002208:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800220a:	e00c      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3320      	adds	r3, #32
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fba6 	bl	8002964 <RCCEx_PLLSAI2_Config>
 8002218:	4603      	mov	r3, r0
 800221a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800221c:	e003      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	74fb      	strb	r3, [r7, #19]
      break;
 8002222:	e000      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002224:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002226:	7cfb      	ldrb	r3, [r7, #19]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10b      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800222c:	4b76      	ldr	r3, [pc, #472]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800223a:	4973      	ldr	r1, [pc, #460]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002242:	e001      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d041      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002258:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800225c:	d02a      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800225e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002262:	d824      	bhi.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002264:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002268:	d008      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800226a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800226e:	d81e      	bhi.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002278:	d010      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800227a:	e018      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800227c:	4b62      	ldr	r3, [pc, #392]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a61      	ldr	r2, [pc, #388]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002286:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002288:	e015      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3304      	adds	r3, #4
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fa73 	bl	800277c <RCCEx_PLLSAI1_Config>
 8002296:	4603      	mov	r3, r0
 8002298:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800229a:	e00c      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3320      	adds	r3, #32
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fb5e 	bl	8002964 <RCCEx_PLLSAI2_Config>
 80022a8:	4603      	mov	r3, r0
 80022aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022ac:	e003      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	74fb      	strb	r3, [r7, #19]
      break;
 80022b2:	e000      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022b6:	7cfb      	ldrb	r3, [r7, #19]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10b      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022bc:	4b52      	ldr	r3, [pc, #328]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022ca:	494f      	ldr	r1, [pc, #316]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022d2:	e001      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022d4:	7cfb      	ldrb	r3, [r7, #19]
 80022d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80a0 	beq.w	8002426 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022ea:	4b47      	ldr	r3, [pc, #284]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022fa:	2300      	movs	r3, #0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00d      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002300:	4b41      	ldr	r3, [pc, #260]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	4a40      	ldr	r2, [pc, #256]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230a:	6593      	str	r3, [r2, #88]	; 0x58
 800230c:	4b3e      	ldr	r3, [pc, #248]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002318:	2301      	movs	r3, #1
 800231a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800231c:	4b3b      	ldr	r3, [pc, #236]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a3a      	ldr	r2, [pc, #232]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002326:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002328:	f7fe fe02 	bl	8000f30 <HAL_GetTick>
 800232c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800232e:	e009      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002330:	f7fe fdfe 	bl	8000f30 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d902      	bls.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	74fb      	strb	r3, [r7, #19]
        break;
 8002342:	e005      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002344:	4b31      	ldr	r3, [pc, #196]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0ef      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d15c      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002356:	4b2c      	ldr	r3, [pc, #176]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002360:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d01f      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	429a      	cmp	r2, r3
 8002372:	d019      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002374:	4b24      	ldr	r3, [pc, #144]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800237e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002380:	4b21      	ldr	r3, [pc, #132]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002386:	4a20      	ldr	r2, [pc, #128]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002390:	4b1d      	ldr	r3, [pc, #116]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002396:	4a1c      	ldr	r2, [pc, #112]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023a0:	4a19      	ldr	r2, [pc, #100]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d016      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b2:	f7fe fdbd 	bl	8000f30 <HAL_GetTick>
 80023b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023b8:	e00b      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7fe fdb9 	bl	8000f30 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d902      	bls.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	74fb      	strb	r3, [r7, #19]
            break;
 80023d0:	e006      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0ec      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10c      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f6:	4904      	ldr	r1, [pc, #16]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023fe:	e009      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002400:	7cfb      	ldrb	r3, [r7, #19]
 8002402:	74bb      	strb	r3, [r7, #18]
 8002404:	e006      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002410:	7cfb      	ldrb	r3, [r7, #19]
 8002412:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002414:	7c7b      	ldrb	r3, [r7, #17]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d105      	bne.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241a:	4b9e      	ldr	r3, [pc, #632]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241e:	4a9d      	ldr	r2, [pc, #628]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002424:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002432:	4b98      	ldr	r3, [pc, #608]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002438:	f023 0203 	bic.w	r2, r3, #3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002440:	4994      	ldr	r1, [pc, #592]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00a      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002454:	4b8f      	ldr	r3, [pc, #572]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245a:	f023 020c 	bic.w	r2, r3, #12
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002462:	498c      	ldr	r1, [pc, #560]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002476:	4b87      	ldr	r3, [pc, #540]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	4983      	ldr	r1, [pc, #524]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00a      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002498:	4b7e      	ldr	r3, [pc, #504]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	497b      	ldr	r1, [pc, #492]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024ba:	4b76      	ldr	r3, [pc, #472]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c8:	4972      	ldr	r1, [pc, #456]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00a      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024dc:	4b6d      	ldr	r3, [pc, #436]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	496a      	ldr	r1, [pc, #424]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024fe:	4b65      	ldr	r3, [pc, #404]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002504:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	4961      	ldr	r1, [pc, #388]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00a      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002520:	4b5c      	ldr	r3, [pc, #368]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002526:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252e:	4959      	ldr	r1, [pc, #356]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002530:	4313      	orrs	r3, r2
 8002532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00a      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002542:	4b54      	ldr	r3, [pc, #336]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002548:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002550:	4950      	ldr	r1, [pc, #320]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00a      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002564:	4b4b      	ldr	r3, [pc, #300]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002572:	4948      	ldr	r1, [pc, #288]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00a      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002586:	4b43      	ldr	r3, [pc, #268]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002594:	493f      	ldr	r1, [pc, #252]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d028      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025a8:	4b3a      	ldr	r3, [pc, #232]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025b6:	4937      	ldr	r1, [pc, #220]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025c6:	d106      	bne.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025c8:	4b32      	ldr	r3, [pc, #200]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4a31      	ldr	r2, [pc, #196]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025d2:	60d3      	str	r3, [r2, #12]
 80025d4:	e011      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025de:	d10c      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3304      	adds	r3, #4
 80025e4:	2101      	movs	r1, #1
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f8c8 	bl	800277c <RCCEx_PLLSAI1_Config>
 80025ec:	4603      	mov	r3, r0
 80025ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025f6:	7cfb      	ldrb	r3, [r7, #19]
 80025f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d028      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002614:	491f      	ldr	r1, [pc, #124]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002624:	d106      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002626:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	4a1a      	ldr	r2, [pc, #104]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002630:	60d3      	str	r3, [r2, #12]
 8002632:	e011      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800263c:	d10c      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3304      	adds	r3, #4
 8002642:	2101      	movs	r1, #1
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f899 	bl	800277c <RCCEx_PLLSAI1_Config>
 800264a:	4603      	mov	r3, r0
 800264c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d02b      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002672:	4908      	ldr	r1, [pc, #32]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002682:	d109      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4a02      	ldr	r2, [pc, #8]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800268e:	60d3      	str	r3, [r2, #12]
 8002690:	e014      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800269c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026a0:	d10c      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3304      	adds	r3, #4
 80026a6:	2101      	movs	r1, #1
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 f867 	bl	800277c <RCCEx_PLLSAI1_Config>
 80026ae:	4603      	mov	r3, r0
 80026b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026b2:	7cfb      	ldrb	r3, [r7, #19]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026b8:	7cfb      	ldrb	r3, [r7, #19]
 80026ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d02f      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026c8:	4b2b      	ldr	r3, [pc, #172]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026d6:	4928      	ldr	r1, [pc, #160]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026e6:	d10d      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3304      	adds	r3, #4
 80026ec:	2102      	movs	r1, #2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 f844 	bl	800277c <RCCEx_PLLSAI1_Config>
 80026f4:	4603      	mov	r3, r0
 80026f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d014      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026fe:	7cfb      	ldrb	r3, [r7, #19]
 8002700:	74bb      	strb	r3, [r7, #18]
 8002702:	e011      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002708:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800270c:	d10c      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3320      	adds	r3, #32
 8002712:	2102      	movs	r1, #2
 8002714:	4618      	mov	r0, r3
 8002716:	f000 f925 	bl	8002964 <RCCEx_PLLSAI2_Config>
 800271a:	4603      	mov	r3, r0
 800271c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800271e:	7cfb      	ldrb	r3, [r7, #19]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002734:	4b10      	ldr	r3, [pc, #64]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002742:	490d      	ldr	r1, [pc, #52]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00b      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002766:	4904      	ldr	r1, [pc, #16]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800276e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000

0800277c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800278a:	4b75      	ldr	r3, [pc, #468]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d018      	beq.n	80027c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002796:	4b72      	ldr	r3, [pc, #456]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0203 	and.w	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d10d      	bne.n	80027c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
       ||
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d009      	beq.n	80027c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027ae:	4b6c      	ldr	r3, [pc, #432]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
       ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d047      	beq.n	8002852 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
 80027c6:	e044      	b.n	8002852 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d018      	beq.n	8002802 <RCCEx_PLLSAI1_Config+0x86>
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d825      	bhi.n	8002820 <RCCEx_PLLSAI1_Config+0xa4>
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d002      	beq.n	80027de <RCCEx_PLLSAI1_Config+0x62>
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d009      	beq.n	80027f0 <RCCEx_PLLSAI1_Config+0x74>
 80027dc:	e020      	b.n	8002820 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027de:	4b60      	ldr	r3, [pc, #384]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d11d      	bne.n	8002826 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ee:	e01a      	b.n	8002826 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027f0:	4b5b      	ldr	r3, [pc, #364]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d116      	bne.n	800282a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002800:	e013      	b.n	800282a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002802:	4b57      	ldr	r3, [pc, #348]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10f      	bne.n	800282e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800280e:	4b54      	ldr	r3, [pc, #336]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800281e:	e006      	b.n	800282e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
      break;
 8002824:	e004      	b.n	8002830 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002826:	bf00      	nop
 8002828:	e002      	b.n	8002830 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800282a:	bf00      	nop
 800282c:	e000      	b.n	8002830 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800282e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002830:	7bfb      	ldrb	r3, [r7, #15]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10d      	bne.n	8002852 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002836:	4b4a      	ldr	r3, [pc, #296]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6819      	ldr	r1, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	430b      	orrs	r3, r1
 800284c:	4944      	ldr	r1, [pc, #272]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 800284e:	4313      	orrs	r3, r2
 8002850:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d17d      	bne.n	8002954 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002858:	4b41      	ldr	r3, [pc, #260]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a40      	ldr	r2, [pc, #256]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 800285e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002862:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002864:	f7fe fb64 	bl	8000f30 <HAL_GetTick>
 8002868:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800286a:	e009      	b.n	8002880 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800286c:	f7fe fb60 	bl	8000f30 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d902      	bls.n	8002880 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	73fb      	strb	r3, [r7, #15]
        break;
 800287e:	e005      	b.n	800288c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002880:	4b37      	ldr	r3, [pc, #220]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1ef      	bne.n	800286c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d160      	bne.n	8002954 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d111      	bne.n	80028bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002898:	4b31      	ldr	r3, [pc, #196]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6892      	ldr	r2, [r2, #8]
 80028a8:	0211      	lsls	r1, r2, #8
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68d2      	ldr	r2, [r2, #12]
 80028ae:	0912      	lsrs	r2, r2, #4
 80028b0:	0452      	lsls	r2, r2, #17
 80028b2:	430a      	orrs	r2, r1
 80028b4:	492a      	ldr	r1, [pc, #168]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	610b      	str	r3, [r1, #16]
 80028ba:	e027      	b.n	800290c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d112      	bne.n	80028e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028c2:	4b27      	ldr	r3, [pc, #156]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6892      	ldr	r2, [r2, #8]
 80028d2:	0211      	lsls	r1, r2, #8
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6912      	ldr	r2, [r2, #16]
 80028d8:	0852      	lsrs	r2, r2, #1
 80028da:	3a01      	subs	r2, #1
 80028dc:	0552      	lsls	r2, r2, #21
 80028de:	430a      	orrs	r2, r1
 80028e0:	491f      	ldr	r1, [pc, #124]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	610b      	str	r3, [r1, #16]
 80028e6:	e011      	b.n	800290c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028e8:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6892      	ldr	r2, [r2, #8]
 80028f8:	0211      	lsls	r1, r2, #8
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6952      	ldr	r2, [r2, #20]
 80028fe:	0852      	lsrs	r2, r2, #1
 8002900:	3a01      	subs	r2, #1
 8002902:	0652      	lsls	r2, r2, #25
 8002904:	430a      	orrs	r2, r1
 8002906:	4916      	ldr	r1, [pc, #88]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002908:	4313      	orrs	r3, r2
 800290a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800290c:	4b14      	ldr	r3, [pc, #80]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a13      	ldr	r2, [pc, #76]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002912:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002916:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002918:	f7fe fb0a 	bl	8000f30 <HAL_GetTick>
 800291c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800291e:	e009      	b.n	8002934 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002920:	f7fe fb06 	bl	8000f30 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d902      	bls.n	8002934 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	73fb      	strb	r3, [r7, #15]
          break;
 8002932:	e005      	b.n	8002940 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0ef      	beq.n	8002920 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	4904      	ldr	r1, [pc, #16]	; (8002960 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002950:	4313      	orrs	r3, r2
 8002952:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000

08002964 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002972:	4b6a      	ldr	r3, [pc, #424]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d018      	beq.n	80029b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800297e:	4b67      	ldr	r3, [pc, #412]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f003 0203 	and.w	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d10d      	bne.n	80029aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
       ||
 8002992:	2b00      	cmp	r3, #0
 8002994:	d009      	beq.n	80029aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002996:	4b61      	ldr	r3, [pc, #388]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
       ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d047      	beq.n	8002a3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
 80029ae:	e044      	b.n	8002a3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d018      	beq.n	80029ea <RCCEx_PLLSAI2_Config+0x86>
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d825      	bhi.n	8002a08 <RCCEx_PLLSAI2_Config+0xa4>
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d002      	beq.n	80029c6 <RCCEx_PLLSAI2_Config+0x62>
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d009      	beq.n	80029d8 <RCCEx_PLLSAI2_Config+0x74>
 80029c4:	e020      	b.n	8002a08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029c6:	4b55      	ldr	r3, [pc, #340]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d11d      	bne.n	8002a0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d6:	e01a      	b.n	8002a0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029d8:	4b50      	ldr	r3, [pc, #320]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d116      	bne.n	8002a12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e8:	e013      	b.n	8002a12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029ea:	4b4c      	ldr	r3, [pc, #304]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10f      	bne.n	8002a16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029f6:	4b49      	ldr	r3, [pc, #292]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a06:	e006      	b.n	8002a16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a0c:	e004      	b.n	8002a18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a0e:	bf00      	nop
 8002a10:	e002      	b.n	8002a18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a12:	bf00      	nop
 8002a14:	e000      	b.n	8002a18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a16:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10d      	bne.n	8002a3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a1e:	4b3f      	ldr	r3, [pc, #252]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6819      	ldr	r1, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	430b      	orrs	r3, r1
 8002a34:	4939      	ldr	r1, [pc, #228]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d167      	bne.n	8002b10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a40:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a35      	ldr	r2, [pc, #212]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a4c:	f7fe fa70 	bl	8000f30 <HAL_GetTick>
 8002a50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a52:	e009      	b.n	8002a68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a54:	f7fe fa6c 	bl	8000f30 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d902      	bls.n	8002a68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	73fb      	strb	r3, [r7, #15]
        break;
 8002a66:	e005      	b.n	8002a74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a68:	4b2c      	ldr	r3, [pc, #176]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1ef      	bne.n	8002a54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d14a      	bne.n	8002b10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d111      	bne.n	8002aa4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a80:	4b26      	ldr	r3, [pc, #152]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6892      	ldr	r2, [r2, #8]
 8002a90:	0211      	lsls	r1, r2, #8
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68d2      	ldr	r2, [r2, #12]
 8002a96:	0912      	lsrs	r2, r2, #4
 8002a98:	0452      	lsls	r2, r2, #17
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	491f      	ldr	r1, [pc, #124]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	614b      	str	r3, [r1, #20]
 8002aa2:	e011      	b.n	8002ac8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002aac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6892      	ldr	r2, [r2, #8]
 8002ab4:	0211      	lsls	r1, r2, #8
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6912      	ldr	r2, [r2, #16]
 8002aba:	0852      	lsrs	r2, r2, #1
 8002abc:	3a01      	subs	r2, #1
 8002abe:	0652      	lsls	r2, r2, #25
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	4916      	ldr	r1, [pc, #88]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ac8:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a13      	ldr	r2, [pc, #76]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7fe fa2c 	bl	8000f30 <HAL_GetTick>
 8002ad8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ada:	e009      	b.n	8002af0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002adc:	f7fe fa28 	bl	8000f30 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d902      	bls.n	8002af0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	73fb      	strb	r3, [r7, #15]
          break;
 8002aee:	e005      	b.n	8002afc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002af0:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0ef      	beq.n	8002adc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	4904      	ldr	r1, [pc, #16]	; (8002b1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000

08002b20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e040      	b.n	8002bb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fe f8fe 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2224      	movs	r2, #36	; 0x24
 8002b4c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f992 	bl	8002e88 <UART_SetConfig>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e022      	b.n	8002bb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fc3e 	bl	80033f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 fcc5 	bl	800353c <UART_CheckIdleState>
 8002bb2:	4603      	mov	r3, r0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08a      	sub	sp, #40	; 0x28
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	f040 8082 	bne.w	8002cda <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_UART_Transmit+0x26>
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e07a      	b.n	8002cdc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_UART_Transmit+0x38>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e073      	b.n	8002cdc <HAL_UART_Transmit+0x120>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2221      	movs	r2, #33	; 0x21
 8002c08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c0a:	f7fe f991 	bl	8000f30 <HAL_GetTick>
 8002c0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	88fa      	ldrh	r2, [r7, #6]
 8002c14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	88fa      	ldrh	r2, [r7, #6]
 8002c1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c28:	d108      	bne.n	8002c3c <HAL_UART_Transmit+0x80>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d104      	bne.n	8002c3c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	e003      	b.n	8002c44 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002c4c:	e02d      	b.n	8002caa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2200      	movs	r2, #0
 8002c56:	2180      	movs	r1, #128	; 0x80
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 fcb8 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e039      	b.n	8002cdc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10b      	bne.n	8002c86 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	881a      	ldrh	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c7a:	b292      	uxth	r2, r2
 8002c7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	3302      	adds	r3, #2
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	e008      	b.n	8002c98 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	b292      	uxth	r2, r2
 8002c90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3301      	adds	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1cb      	bne.n	8002c4e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2140      	movs	r1, #64	; 0x40
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fc84 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e005      	b.n	8002cdc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e000      	b.n	8002cdc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002cda:	2302      	movs	r3, #2
  }
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3720      	adds	r7, #32
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	; 0x28
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	f040 80bf 	bne.w	8002e7c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <HAL_UART_Receive+0x26>
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e0b7      	b.n	8002e7e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_UART_Receive+0x38>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e0b0      	b.n	8002e7e <HAL_UART_Receive+0x19a>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2222      	movs	r2, #34	; 0x22
 8002d30:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d38:	f7fe f8fa 	bl	8000f30 <HAL_GetTick>
 8002d3c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	88fa      	ldrh	r2, [r7, #6]
 8002d42:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	88fa      	ldrh	r2, [r7, #6]
 8002d4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d56:	d10e      	bne.n	8002d76 <HAL_UART_Receive+0x92>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d105      	bne.n	8002d6c <HAL_UART_Receive+0x88>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002d66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d6a:	e02d      	b.n	8002dc8 <HAL_UART_Receive+0xe4>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	22ff      	movs	r2, #255	; 0xff
 8002d70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d74:	e028      	b.n	8002dc8 <HAL_UART_Receive+0xe4>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10d      	bne.n	8002d9a <HAL_UART_Receive+0xb6>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d104      	bne.n	8002d90 <HAL_UART_Receive+0xac>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	22ff      	movs	r2, #255	; 0xff
 8002d8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d8e:	e01b      	b.n	8002dc8 <HAL_UART_Receive+0xe4>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	227f      	movs	r2, #127	; 0x7f
 8002d94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d98:	e016      	b.n	8002dc8 <HAL_UART_Receive+0xe4>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002da2:	d10d      	bne.n	8002dc0 <HAL_UART_Receive+0xdc>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d104      	bne.n	8002db6 <HAL_UART_Receive+0xd2>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	227f      	movs	r2, #127	; 0x7f
 8002db0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002db4:	e008      	b.n	8002dc8 <HAL_UART_Receive+0xe4>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	223f      	movs	r2, #63	; 0x3f
 8002dba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002dbe:	e003      	b.n	8002dc8 <HAL_UART_Receive+0xe4>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002dce:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd8:	d108      	bne.n	8002dec <HAL_UART_Receive+0x108>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d104      	bne.n	8002dec <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	e003      	b.n	8002df4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002dfc:	e033      	b.n	8002e66 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2200      	movs	r2, #0
 8002e06:	2120      	movs	r1, #32
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 fbe0 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e032      	b.n	8002e7e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10c      	bne.n	8002e38 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	8a7b      	ldrh	r3, [r7, #18]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	3302      	adds	r3, #2
 8002e34:	61bb      	str	r3, [r7, #24]
 8002e36:	e00d      	b.n	8002e54 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	8a7b      	ldrh	r3, [r7, #18]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	4013      	ands	r3, r2
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3301      	adds	r3, #1
 8002e52:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1c5      	bne.n	8002dfe <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e000      	b.n	8002e7e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002e7c:	2302      	movs	r3, #2
  }
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e8c:	b08a      	sub	sp, #40	; 0x28
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4ba4      	ldr	r3, [pc, #656]	; (8003148 <UART_SetConfig+0x2c0>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a99      	ldr	r2, [pc, #612]	; (800314c <UART_SetConfig+0x2c4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f04:	430a      	orrs	r2, r1
 8002f06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a90      	ldr	r2, [pc, #576]	; (8003150 <UART_SetConfig+0x2c8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d126      	bne.n	8002f60 <UART_SetConfig+0xd8>
 8002f12:	4b90      	ldr	r3, [pc, #576]	; (8003154 <UART_SetConfig+0x2cc>)
 8002f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d81b      	bhi.n	8002f58 <UART_SetConfig+0xd0>
 8002f20:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <UART_SetConfig+0xa0>)
 8002f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f26:	bf00      	nop
 8002f28:	08002f39 	.word	0x08002f39
 8002f2c:	08002f49 	.word	0x08002f49
 8002f30:	08002f41 	.word	0x08002f41
 8002f34:	08002f51 	.word	0x08002f51
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f3e:	e116      	b.n	800316e <UART_SetConfig+0x2e6>
 8002f40:	2302      	movs	r3, #2
 8002f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f46:	e112      	b.n	800316e <UART_SetConfig+0x2e6>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f4e:	e10e      	b.n	800316e <UART_SetConfig+0x2e6>
 8002f50:	2308      	movs	r3, #8
 8002f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f56:	e10a      	b.n	800316e <UART_SetConfig+0x2e6>
 8002f58:	2310      	movs	r3, #16
 8002f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f5e:	e106      	b.n	800316e <UART_SetConfig+0x2e6>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a7c      	ldr	r2, [pc, #496]	; (8003158 <UART_SetConfig+0x2d0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d138      	bne.n	8002fdc <UART_SetConfig+0x154>
 8002f6a:	4b7a      	ldr	r3, [pc, #488]	; (8003154 <UART_SetConfig+0x2cc>)
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b0c      	cmp	r3, #12
 8002f76:	d82d      	bhi.n	8002fd4 <UART_SetConfig+0x14c>
 8002f78:	a201      	add	r2, pc, #4	; (adr r2, 8002f80 <UART_SetConfig+0xf8>)
 8002f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7e:	bf00      	nop
 8002f80:	08002fb5 	.word	0x08002fb5
 8002f84:	08002fd5 	.word	0x08002fd5
 8002f88:	08002fd5 	.word	0x08002fd5
 8002f8c:	08002fd5 	.word	0x08002fd5
 8002f90:	08002fc5 	.word	0x08002fc5
 8002f94:	08002fd5 	.word	0x08002fd5
 8002f98:	08002fd5 	.word	0x08002fd5
 8002f9c:	08002fd5 	.word	0x08002fd5
 8002fa0:	08002fbd 	.word	0x08002fbd
 8002fa4:	08002fd5 	.word	0x08002fd5
 8002fa8:	08002fd5 	.word	0x08002fd5
 8002fac:	08002fd5 	.word	0x08002fd5
 8002fb0:	08002fcd 	.word	0x08002fcd
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fba:	e0d8      	b.n	800316e <UART_SetConfig+0x2e6>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fc2:	e0d4      	b.n	800316e <UART_SetConfig+0x2e6>
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fca:	e0d0      	b.n	800316e <UART_SetConfig+0x2e6>
 8002fcc:	2308      	movs	r3, #8
 8002fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fd2:	e0cc      	b.n	800316e <UART_SetConfig+0x2e6>
 8002fd4:	2310      	movs	r3, #16
 8002fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fda:	e0c8      	b.n	800316e <UART_SetConfig+0x2e6>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a5e      	ldr	r2, [pc, #376]	; (800315c <UART_SetConfig+0x2d4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d125      	bne.n	8003032 <UART_SetConfig+0x1aa>
 8002fe6:	4b5b      	ldr	r3, [pc, #364]	; (8003154 <UART_SetConfig+0x2cc>)
 8002fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ff0:	2b30      	cmp	r3, #48	; 0x30
 8002ff2:	d016      	beq.n	8003022 <UART_SetConfig+0x19a>
 8002ff4:	2b30      	cmp	r3, #48	; 0x30
 8002ff6:	d818      	bhi.n	800302a <UART_SetConfig+0x1a2>
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d00a      	beq.n	8003012 <UART_SetConfig+0x18a>
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d814      	bhi.n	800302a <UART_SetConfig+0x1a2>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <UART_SetConfig+0x182>
 8003004:	2b10      	cmp	r3, #16
 8003006:	d008      	beq.n	800301a <UART_SetConfig+0x192>
 8003008:	e00f      	b.n	800302a <UART_SetConfig+0x1a2>
 800300a:	2300      	movs	r3, #0
 800300c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003010:	e0ad      	b.n	800316e <UART_SetConfig+0x2e6>
 8003012:	2302      	movs	r3, #2
 8003014:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003018:	e0a9      	b.n	800316e <UART_SetConfig+0x2e6>
 800301a:	2304      	movs	r3, #4
 800301c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003020:	e0a5      	b.n	800316e <UART_SetConfig+0x2e6>
 8003022:	2308      	movs	r3, #8
 8003024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003028:	e0a1      	b.n	800316e <UART_SetConfig+0x2e6>
 800302a:	2310      	movs	r3, #16
 800302c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003030:	e09d      	b.n	800316e <UART_SetConfig+0x2e6>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a4a      	ldr	r2, [pc, #296]	; (8003160 <UART_SetConfig+0x2d8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d125      	bne.n	8003088 <UART_SetConfig+0x200>
 800303c:	4b45      	ldr	r3, [pc, #276]	; (8003154 <UART_SetConfig+0x2cc>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003042:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003046:	2bc0      	cmp	r3, #192	; 0xc0
 8003048:	d016      	beq.n	8003078 <UART_SetConfig+0x1f0>
 800304a:	2bc0      	cmp	r3, #192	; 0xc0
 800304c:	d818      	bhi.n	8003080 <UART_SetConfig+0x1f8>
 800304e:	2b80      	cmp	r3, #128	; 0x80
 8003050:	d00a      	beq.n	8003068 <UART_SetConfig+0x1e0>
 8003052:	2b80      	cmp	r3, #128	; 0x80
 8003054:	d814      	bhi.n	8003080 <UART_SetConfig+0x1f8>
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <UART_SetConfig+0x1d8>
 800305a:	2b40      	cmp	r3, #64	; 0x40
 800305c:	d008      	beq.n	8003070 <UART_SetConfig+0x1e8>
 800305e:	e00f      	b.n	8003080 <UART_SetConfig+0x1f8>
 8003060:	2300      	movs	r3, #0
 8003062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003066:	e082      	b.n	800316e <UART_SetConfig+0x2e6>
 8003068:	2302      	movs	r3, #2
 800306a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306e:	e07e      	b.n	800316e <UART_SetConfig+0x2e6>
 8003070:	2304      	movs	r3, #4
 8003072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003076:	e07a      	b.n	800316e <UART_SetConfig+0x2e6>
 8003078:	2308      	movs	r3, #8
 800307a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800307e:	e076      	b.n	800316e <UART_SetConfig+0x2e6>
 8003080:	2310      	movs	r3, #16
 8003082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003086:	e072      	b.n	800316e <UART_SetConfig+0x2e6>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a35      	ldr	r2, [pc, #212]	; (8003164 <UART_SetConfig+0x2dc>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d12a      	bne.n	80030e8 <UART_SetConfig+0x260>
 8003092:	4b30      	ldr	r3, [pc, #192]	; (8003154 <UART_SetConfig+0x2cc>)
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030a0:	d01a      	beq.n	80030d8 <UART_SetConfig+0x250>
 80030a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030a6:	d81b      	bhi.n	80030e0 <UART_SetConfig+0x258>
 80030a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ac:	d00c      	beq.n	80030c8 <UART_SetConfig+0x240>
 80030ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b2:	d815      	bhi.n	80030e0 <UART_SetConfig+0x258>
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <UART_SetConfig+0x238>
 80030b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030bc:	d008      	beq.n	80030d0 <UART_SetConfig+0x248>
 80030be:	e00f      	b.n	80030e0 <UART_SetConfig+0x258>
 80030c0:	2300      	movs	r3, #0
 80030c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c6:	e052      	b.n	800316e <UART_SetConfig+0x2e6>
 80030c8:	2302      	movs	r3, #2
 80030ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ce:	e04e      	b.n	800316e <UART_SetConfig+0x2e6>
 80030d0:	2304      	movs	r3, #4
 80030d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d6:	e04a      	b.n	800316e <UART_SetConfig+0x2e6>
 80030d8:	2308      	movs	r3, #8
 80030da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030de:	e046      	b.n	800316e <UART_SetConfig+0x2e6>
 80030e0:	2310      	movs	r3, #16
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e6:	e042      	b.n	800316e <UART_SetConfig+0x2e6>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a17      	ldr	r2, [pc, #92]	; (800314c <UART_SetConfig+0x2c4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d13a      	bne.n	8003168 <UART_SetConfig+0x2e0>
 80030f2:	4b18      	ldr	r3, [pc, #96]	; (8003154 <UART_SetConfig+0x2cc>)
 80030f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003100:	d01a      	beq.n	8003138 <UART_SetConfig+0x2b0>
 8003102:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003106:	d81b      	bhi.n	8003140 <UART_SetConfig+0x2b8>
 8003108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800310c:	d00c      	beq.n	8003128 <UART_SetConfig+0x2a0>
 800310e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003112:	d815      	bhi.n	8003140 <UART_SetConfig+0x2b8>
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <UART_SetConfig+0x298>
 8003118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800311c:	d008      	beq.n	8003130 <UART_SetConfig+0x2a8>
 800311e:	e00f      	b.n	8003140 <UART_SetConfig+0x2b8>
 8003120:	2300      	movs	r3, #0
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003126:	e022      	b.n	800316e <UART_SetConfig+0x2e6>
 8003128:	2302      	movs	r3, #2
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800312e:	e01e      	b.n	800316e <UART_SetConfig+0x2e6>
 8003130:	2304      	movs	r3, #4
 8003132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003136:	e01a      	b.n	800316e <UART_SetConfig+0x2e6>
 8003138:	2308      	movs	r3, #8
 800313a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313e:	e016      	b.n	800316e <UART_SetConfig+0x2e6>
 8003140:	2310      	movs	r3, #16
 8003142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003146:	e012      	b.n	800316e <UART_SetConfig+0x2e6>
 8003148:	efff69f3 	.word	0xefff69f3
 800314c:	40008000 	.word	0x40008000
 8003150:	40013800 	.word	0x40013800
 8003154:	40021000 	.word	0x40021000
 8003158:	40004400 	.word	0x40004400
 800315c:	40004800 	.word	0x40004800
 8003160:	40004c00 	.word	0x40004c00
 8003164:	40005000 	.word	0x40005000
 8003168:	2310      	movs	r3, #16
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a9f      	ldr	r2, [pc, #636]	; (80033f0 <UART_SetConfig+0x568>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d17a      	bne.n	800326e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800317c:	2b08      	cmp	r3, #8
 800317e:	d824      	bhi.n	80031ca <UART_SetConfig+0x342>
 8003180:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <UART_SetConfig+0x300>)
 8003182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003186:	bf00      	nop
 8003188:	080031ad 	.word	0x080031ad
 800318c:	080031cb 	.word	0x080031cb
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031cb 	.word	0x080031cb
 8003198:	080031bb 	.word	0x080031bb
 800319c:	080031cb 	.word	0x080031cb
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031cb 	.word	0x080031cb
 80031a8:	080031c3 	.word	0x080031c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031ac:	f7fe ff70 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 80031b0:	61f8      	str	r0, [r7, #28]
        break;
 80031b2:	e010      	b.n	80031d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b4:	4b8f      	ldr	r3, [pc, #572]	; (80033f4 <UART_SetConfig+0x56c>)
 80031b6:	61fb      	str	r3, [r7, #28]
        break;
 80031b8:	e00d      	b.n	80031d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ba:	f7fe fed1 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 80031be:	61f8      	str	r0, [r7, #28]
        break;
 80031c0:	e009      	b.n	80031d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031c6:	61fb      	str	r3, [r7, #28]
        break;
 80031c8:	e005      	b.n	80031d6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80fb 	beq.w	80033d4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4413      	add	r3, r2
 80031e8:	69fa      	ldr	r2, [r7, #28]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d305      	bcc.n	80031fa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d903      	bls.n	8003202 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003200:	e0e8      	b.n	80033d4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	2200      	movs	r2, #0
 8003206:	461c      	mov	r4, r3
 8003208:	4615      	mov	r5, r2
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	022b      	lsls	r3, r5, #8
 8003214:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003218:	0222      	lsls	r2, r4, #8
 800321a:	68f9      	ldr	r1, [r7, #12]
 800321c:	6849      	ldr	r1, [r1, #4]
 800321e:	0849      	lsrs	r1, r1, #1
 8003220:	2000      	movs	r0, #0
 8003222:	4688      	mov	r8, r1
 8003224:	4681      	mov	r9, r0
 8003226:	eb12 0a08 	adds.w	sl, r2, r8
 800322a:	eb43 0b09 	adc.w	fp, r3, r9
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	603b      	str	r3, [r7, #0]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800323c:	4650      	mov	r0, sl
 800323e:	4659      	mov	r1, fp
 8003240:	f7fd f87e 	bl	8000340 <__aeabi_uldivmod>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4613      	mov	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003252:	d308      	bcc.n	8003266 <UART_SetConfig+0x3de>
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800325a:	d204      	bcs.n	8003266 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	60da      	str	r2, [r3, #12]
 8003264:	e0b6      	b.n	80033d4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800326c:	e0b2      	b.n	80033d4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003276:	d15e      	bne.n	8003336 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003278:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800327c:	2b08      	cmp	r3, #8
 800327e:	d828      	bhi.n	80032d2 <UART_SetConfig+0x44a>
 8003280:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <UART_SetConfig+0x400>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	080032ad 	.word	0x080032ad
 800328c:	080032b5 	.word	0x080032b5
 8003290:	080032bd 	.word	0x080032bd
 8003294:	080032d3 	.word	0x080032d3
 8003298:	080032c3 	.word	0x080032c3
 800329c:	080032d3 	.word	0x080032d3
 80032a0:	080032d3 	.word	0x080032d3
 80032a4:	080032d3 	.word	0x080032d3
 80032a8:	080032cb 	.word	0x080032cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ac:	f7fe fef0 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 80032b0:	61f8      	str	r0, [r7, #28]
        break;
 80032b2:	e014      	b.n	80032de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032b4:	f7fe ff02 	bl	80020bc <HAL_RCC_GetPCLK2Freq>
 80032b8:	61f8      	str	r0, [r7, #28]
        break;
 80032ba:	e010      	b.n	80032de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032bc:	4b4d      	ldr	r3, [pc, #308]	; (80033f4 <UART_SetConfig+0x56c>)
 80032be:	61fb      	str	r3, [r7, #28]
        break;
 80032c0:	e00d      	b.n	80032de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032c2:	f7fe fe4d 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 80032c6:	61f8      	str	r0, [r7, #28]
        break;
 80032c8:	e009      	b.n	80032de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ce:	61fb      	str	r3, [r7, #28]
        break;
 80032d0:	e005      	b.n	80032de <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d077      	beq.n	80033d4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	005a      	lsls	r2, r3, #1
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	085b      	lsrs	r3, r3, #1
 80032ee:	441a      	add	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b0f      	cmp	r3, #15
 80032fe:	d916      	bls.n	800332e <UART_SetConfig+0x4a6>
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003306:	d212      	bcs.n	800332e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	b29b      	uxth	r3, r3
 800330c:	f023 030f 	bic.w	r3, r3, #15
 8003310:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	085b      	lsrs	r3, r3, #1
 8003316:	b29b      	uxth	r3, r3
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	b29a      	uxth	r2, r3
 800331e:	8afb      	ldrh	r3, [r7, #22]
 8003320:	4313      	orrs	r3, r2
 8003322:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	8afa      	ldrh	r2, [r7, #22]
 800332a:	60da      	str	r2, [r3, #12]
 800332c:	e052      	b.n	80033d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003334:	e04e      	b.n	80033d4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003336:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800333a:	2b08      	cmp	r3, #8
 800333c:	d827      	bhi.n	800338e <UART_SetConfig+0x506>
 800333e:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <UART_SetConfig+0x4bc>)
 8003340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003344:	08003369 	.word	0x08003369
 8003348:	08003371 	.word	0x08003371
 800334c:	08003379 	.word	0x08003379
 8003350:	0800338f 	.word	0x0800338f
 8003354:	0800337f 	.word	0x0800337f
 8003358:	0800338f 	.word	0x0800338f
 800335c:	0800338f 	.word	0x0800338f
 8003360:	0800338f 	.word	0x0800338f
 8003364:	08003387 	.word	0x08003387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003368:	f7fe fe92 	bl	8002090 <HAL_RCC_GetPCLK1Freq>
 800336c:	61f8      	str	r0, [r7, #28]
        break;
 800336e:	e014      	b.n	800339a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003370:	f7fe fea4 	bl	80020bc <HAL_RCC_GetPCLK2Freq>
 8003374:	61f8      	str	r0, [r7, #28]
        break;
 8003376:	e010      	b.n	800339a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003378:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <UART_SetConfig+0x56c>)
 800337a:	61fb      	str	r3, [r7, #28]
        break;
 800337c:	e00d      	b.n	800339a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337e:	f7fe fdef 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 8003382:	61f8      	str	r0, [r7, #28]
        break;
 8003384:	e009      	b.n	800339a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800338a:	61fb      	str	r3, [r7, #28]
        break;
 800338c:	e005      	b.n	800339a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003398:	bf00      	nop
    }

    if (pclk != 0U)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d019      	beq.n	80033d4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	085a      	lsrs	r2, r3, #1
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	441a      	add	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	2b0f      	cmp	r3, #15
 80033b8:	d909      	bls.n	80033ce <UART_SetConfig+0x546>
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c0:	d205      	bcs.n	80033ce <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60da      	str	r2, [r3, #12]
 80033cc:	e002      	b.n	80033d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3728      	adds	r7, #40	; 0x28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ee:	bf00      	nop
 80033f0:	40008000 	.word	0x40008000
 80033f4:	00f42400 	.word	0x00f42400

080033f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01a      	beq.n	800350e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034f6:	d10a      	bne.n	800350e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	605a      	str	r2, [r3, #4]
  }
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af02      	add	r7, sp, #8
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800354c:	f7fd fcf0 	bl	8000f30 <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b08      	cmp	r3, #8
 800355e:	d10e      	bne.n	800357e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003560:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f82d 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e023      	b.n	80035c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b04      	cmp	r3, #4
 800358a:	d10e      	bne.n	80035aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800358c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f817 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e00d      	b.n	80035c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b09c      	sub	sp, #112	; 0x70
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	603b      	str	r3, [r7, #0]
 80035da:	4613      	mov	r3, r2
 80035dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035de:	e0a5      	b.n	800372c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035e6:	f000 80a1 	beq.w	800372c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ea:	f7fd fca1 	bl	8000f30 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d302      	bcc.n	8003600 <UART_WaitOnFlagUntilTimeout+0x32>
 80035fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d13e      	bne.n	800367e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800360e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003610:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003614:	667b      	str	r3, [r7, #100]	; 0x64
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800361e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003620:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003624:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800362c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1e6      	bne.n	8003600 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3308      	adds	r3, #8
 8003638:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363c:	e853 3f00 	ldrex	r3, [r3]
 8003640:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003644:	f023 0301 	bic.w	r3, r3, #1
 8003648:	663b      	str	r3, [r7, #96]	; 0x60
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3308      	adds	r3, #8
 8003650:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003652:	64ba      	str	r2, [r7, #72]	; 0x48
 8003654:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003656:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e5      	bne.n	8003632 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e067      	b.n	800374e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d04f      	beq.n	800372c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800369a:	d147      	bne.n	800372c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036a4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ae:	e853 3f00 	ldrex	r3, [r3]
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	461a      	mov	r2, r3
 80036c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c4:	637b      	str	r3, [r7, #52]	; 0x34
 80036c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036cc:	e841 2300 	strex	r3, r2, [r1]
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e6      	bne.n	80036a6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3308      	adds	r3, #8
 80036de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	e853 3f00 	ldrex	r3, [r3]
 80036e6:	613b      	str	r3, [r7, #16]
   return(result);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f023 0301 	bic.w	r3, r3, #1
 80036ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3308      	adds	r3, #8
 80036f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036f8:	623a      	str	r2, [r7, #32]
 80036fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fc:	69f9      	ldr	r1, [r7, #28]
 80036fe:	6a3a      	ldr	r2, [r7, #32]
 8003700:	e841 2300 	strex	r3, r2, [r1]
 8003704:	61bb      	str	r3, [r7, #24]
   return(result);
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1e5      	bne.n	80036d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e010      	b.n	800374e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4013      	ands	r3, r2
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	429a      	cmp	r2, r3
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	461a      	mov	r2, r3
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	429a      	cmp	r2, r3
 8003748:	f43f af4a 	beq.w	80035e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3770      	adds	r7, #112	; 0x70
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <__errno>:
 8003758:	4b01      	ldr	r3, [pc, #4]	; (8003760 <__errno+0x8>)
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000028 	.word	0x20000028

08003764 <__sflush_r>:
 8003764:	898a      	ldrh	r2, [r1, #12]
 8003766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800376a:	4605      	mov	r5, r0
 800376c:	0710      	lsls	r0, r2, #28
 800376e:	460c      	mov	r4, r1
 8003770:	d458      	bmi.n	8003824 <__sflush_r+0xc0>
 8003772:	684b      	ldr	r3, [r1, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	dc05      	bgt.n	8003784 <__sflush_r+0x20>
 8003778:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	dc02      	bgt.n	8003784 <__sflush_r+0x20>
 800377e:	2000      	movs	r0, #0
 8003780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003784:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003786:	2e00      	cmp	r6, #0
 8003788:	d0f9      	beq.n	800377e <__sflush_r+0x1a>
 800378a:	2300      	movs	r3, #0
 800378c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003790:	682f      	ldr	r7, [r5, #0]
 8003792:	602b      	str	r3, [r5, #0]
 8003794:	d032      	beq.n	80037fc <__sflush_r+0x98>
 8003796:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003798:	89a3      	ldrh	r3, [r4, #12]
 800379a:	075a      	lsls	r2, r3, #29
 800379c:	d505      	bpl.n	80037aa <__sflush_r+0x46>
 800379e:	6863      	ldr	r3, [r4, #4]
 80037a0:	1ac0      	subs	r0, r0, r3
 80037a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037a4:	b10b      	cbz	r3, 80037aa <__sflush_r+0x46>
 80037a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037a8:	1ac0      	subs	r0, r0, r3
 80037aa:	2300      	movs	r3, #0
 80037ac:	4602      	mov	r2, r0
 80037ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037b0:	6a21      	ldr	r1, [r4, #32]
 80037b2:	4628      	mov	r0, r5
 80037b4:	47b0      	blx	r6
 80037b6:	1c43      	adds	r3, r0, #1
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	d106      	bne.n	80037ca <__sflush_r+0x66>
 80037bc:	6829      	ldr	r1, [r5, #0]
 80037be:	291d      	cmp	r1, #29
 80037c0:	d82c      	bhi.n	800381c <__sflush_r+0xb8>
 80037c2:	4a2a      	ldr	r2, [pc, #168]	; (800386c <__sflush_r+0x108>)
 80037c4:	40ca      	lsrs	r2, r1
 80037c6:	07d6      	lsls	r6, r2, #31
 80037c8:	d528      	bpl.n	800381c <__sflush_r+0xb8>
 80037ca:	2200      	movs	r2, #0
 80037cc:	6062      	str	r2, [r4, #4]
 80037ce:	04d9      	lsls	r1, r3, #19
 80037d0:	6922      	ldr	r2, [r4, #16]
 80037d2:	6022      	str	r2, [r4, #0]
 80037d4:	d504      	bpl.n	80037e0 <__sflush_r+0x7c>
 80037d6:	1c42      	adds	r2, r0, #1
 80037d8:	d101      	bne.n	80037de <__sflush_r+0x7a>
 80037da:	682b      	ldr	r3, [r5, #0]
 80037dc:	b903      	cbnz	r3, 80037e0 <__sflush_r+0x7c>
 80037de:	6560      	str	r0, [r4, #84]	; 0x54
 80037e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037e2:	602f      	str	r7, [r5, #0]
 80037e4:	2900      	cmp	r1, #0
 80037e6:	d0ca      	beq.n	800377e <__sflush_r+0x1a>
 80037e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037ec:	4299      	cmp	r1, r3
 80037ee:	d002      	beq.n	80037f6 <__sflush_r+0x92>
 80037f0:	4628      	mov	r0, r5
 80037f2:	f000 fb35 	bl	8003e60 <_free_r>
 80037f6:	2000      	movs	r0, #0
 80037f8:	6360      	str	r0, [r4, #52]	; 0x34
 80037fa:	e7c1      	b.n	8003780 <__sflush_r+0x1c>
 80037fc:	6a21      	ldr	r1, [r4, #32]
 80037fe:	2301      	movs	r3, #1
 8003800:	4628      	mov	r0, r5
 8003802:	47b0      	blx	r6
 8003804:	1c41      	adds	r1, r0, #1
 8003806:	d1c7      	bne.n	8003798 <__sflush_r+0x34>
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0c4      	beq.n	8003798 <__sflush_r+0x34>
 800380e:	2b1d      	cmp	r3, #29
 8003810:	d001      	beq.n	8003816 <__sflush_r+0xb2>
 8003812:	2b16      	cmp	r3, #22
 8003814:	d101      	bne.n	800381a <__sflush_r+0xb6>
 8003816:	602f      	str	r7, [r5, #0]
 8003818:	e7b1      	b.n	800377e <__sflush_r+0x1a>
 800381a:	89a3      	ldrh	r3, [r4, #12]
 800381c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003820:	81a3      	strh	r3, [r4, #12]
 8003822:	e7ad      	b.n	8003780 <__sflush_r+0x1c>
 8003824:	690f      	ldr	r7, [r1, #16]
 8003826:	2f00      	cmp	r7, #0
 8003828:	d0a9      	beq.n	800377e <__sflush_r+0x1a>
 800382a:	0793      	lsls	r3, r2, #30
 800382c:	680e      	ldr	r6, [r1, #0]
 800382e:	bf08      	it	eq
 8003830:	694b      	ldreq	r3, [r1, #20]
 8003832:	600f      	str	r7, [r1, #0]
 8003834:	bf18      	it	ne
 8003836:	2300      	movne	r3, #0
 8003838:	eba6 0807 	sub.w	r8, r6, r7
 800383c:	608b      	str	r3, [r1, #8]
 800383e:	f1b8 0f00 	cmp.w	r8, #0
 8003842:	dd9c      	ble.n	800377e <__sflush_r+0x1a>
 8003844:	6a21      	ldr	r1, [r4, #32]
 8003846:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003848:	4643      	mov	r3, r8
 800384a:	463a      	mov	r2, r7
 800384c:	4628      	mov	r0, r5
 800384e:	47b0      	blx	r6
 8003850:	2800      	cmp	r0, #0
 8003852:	dc06      	bgt.n	8003862 <__sflush_r+0xfe>
 8003854:	89a3      	ldrh	r3, [r4, #12]
 8003856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800385a:	81a3      	strh	r3, [r4, #12]
 800385c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003860:	e78e      	b.n	8003780 <__sflush_r+0x1c>
 8003862:	4407      	add	r7, r0
 8003864:	eba8 0800 	sub.w	r8, r8, r0
 8003868:	e7e9      	b.n	800383e <__sflush_r+0xda>
 800386a:	bf00      	nop
 800386c:	20400001 	.word	0x20400001

08003870 <_fflush_r>:
 8003870:	b538      	push	{r3, r4, r5, lr}
 8003872:	690b      	ldr	r3, [r1, #16]
 8003874:	4605      	mov	r5, r0
 8003876:	460c      	mov	r4, r1
 8003878:	b913      	cbnz	r3, 8003880 <_fflush_r+0x10>
 800387a:	2500      	movs	r5, #0
 800387c:	4628      	mov	r0, r5
 800387e:	bd38      	pop	{r3, r4, r5, pc}
 8003880:	b118      	cbz	r0, 800388a <_fflush_r+0x1a>
 8003882:	6983      	ldr	r3, [r0, #24]
 8003884:	b90b      	cbnz	r3, 800388a <_fflush_r+0x1a>
 8003886:	f000 f899 	bl	80039bc <__sinit>
 800388a:	4b14      	ldr	r3, [pc, #80]	; (80038dc <_fflush_r+0x6c>)
 800388c:	429c      	cmp	r4, r3
 800388e:	d11b      	bne.n	80038c8 <_fflush_r+0x58>
 8003890:	686c      	ldr	r4, [r5, #4]
 8003892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0ef      	beq.n	800387a <_fflush_r+0xa>
 800389a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800389c:	07d0      	lsls	r0, r2, #31
 800389e:	d404      	bmi.n	80038aa <_fflush_r+0x3a>
 80038a0:	0599      	lsls	r1, r3, #22
 80038a2:	d402      	bmi.n	80038aa <_fflush_r+0x3a>
 80038a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038a6:	f000 fab1 	bl	8003e0c <__retarget_lock_acquire_recursive>
 80038aa:	4628      	mov	r0, r5
 80038ac:	4621      	mov	r1, r4
 80038ae:	f7ff ff59 	bl	8003764 <__sflush_r>
 80038b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038b4:	07da      	lsls	r2, r3, #31
 80038b6:	4605      	mov	r5, r0
 80038b8:	d4e0      	bmi.n	800387c <_fflush_r+0xc>
 80038ba:	89a3      	ldrh	r3, [r4, #12]
 80038bc:	059b      	lsls	r3, r3, #22
 80038be:	d4dd      	bmi.n	800387c <_fflush_r+0xc>
 80038c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038c2:	f000 faa5 	bl	8003e10 <__retarget_lock_release_recursive>
 80038c6:	e7d9      	b.n	800387c <_fflush_r+0xc>
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <_fflush_r+0x70>)
 80038ca:	429c      	cmp	r4, r3
 80038cc:	d101      	bne.n	80038d2 <_fflush_r+0x62>
 80038ce:	68ac      	ldr	r4, [r5, #8]
 80038d0:	e7df      	b.n	8003892 <_fflush_r+0x22>
 80038d2:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <_fflush_r+0x74>)
 80038d4:	429c      	cmp	r4, r3
 80038d6:	bf08      	it	eq
 80038d8:	68ec      	ldreq	r4, [r5, #12]
 80038da:	e7da      	b.n	8003892 <_fflush_r+0x22>
 80038dc:	08005e78 	.word	0x08005e78
 80038e0:	08005e98 	.word	0x08005e98
 80038e4:	08005e58 	.word	0x08005e58

080038e8 <fflush>:
 80038e8:	4601      	mov	r1, r0
 80038ea:	b920      	cbnz	r0, 80038f6 <fflush+0xe>
 80038ec:	4b04      	ldr	r3, [pc, #16]	; (8003900 <fflush+0x18>)
 80038ee:	4905      	ldr	r1, [pc, #20]	; (8003904 <fflush+0x1c>)
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	f000 b933 	b.w	8003b5c <_fwalk_reent>
 80038f6:	4b04      	ldr	r3, [pc, #16]	; (8003908 <fflush+0x20>)
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	f7ff bfb9 	b.w	8003870 <_fflush_r>
 80038fe:	bf00      	nop
 8003900:	08005eb8 	.word	0x08005eb8
 8003904:	08003871 	.word	0x08003871
 8003908:	20000028 	.word	0x20000028

0800390c <std>:
 800390c:	2300      	movs	r3, #0
 800390e:	b510      	push	{r4, lr}
 8003910:	4604      	mov	r4, r0
 8003912:	e9c0 3300 	strd	r3, r3, [r0]
 8003916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800391a:	6083      	str	r3, [r0, #8]
 800391c:	8181      	strh	r1, [r0, #12]
 800391e:	6643      	str	r3, [r0, #100]	; 0x64
 8003920:	81c2      	strh	r2, [r0, #14]
 8003922:	6183      	str	r3, [r0, #24]
 8003924:	4619      	mov	r1, r3
 8003926:	2208      	movs	r2, #8
 8003928:	305c      	adds	r0, #92	; 0x5c
 800392a:	f000 fa91 	bl	8003e50 <memset>
 800392e:	4b05      	ldr	r3, [pc, #20]	; (8003944 <std+0x38>)
 8003930:	6263      	str	r3, [r4, #36]	; 0x24
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <std+0x3c>)
 8003934:	62a3      	str	r3, [r4, #40]	; 0x28
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <std+0x40>)
 8003938:	62e3      	str	r3, [r4, #44]	; 0x2c
 800393a:	4b05      	ldr	r3, [pc, #20]	; (8003950 <std+0x44>)
 800393c:	6224      	str	r4, [r4, #32]
 800393e:	6323      	str	r3, [r4, #48]	; 0x30
 8003940:	bd10      	pop	{r4, pc}
 8003942:	bf00      	nop
 8003944:	08004719 	.word	0x08004719
 8003948:	0800473f 	.word	0x0800473f
 800394c:	08004777 	.word	0x08004777
 8003950:	0800479b 	.word	0x0800479b

08003954 <_cleanup_r>:
 8003954:	4901      	ldr	r1, [pc, #4]	; (800395c <_cleanup_r+0x8>)
 8003956:	f000 b901 	b.w	8003b5c <_fwalk_reent>
 800395a:	bf00      	nop
 800395c:	08003871 	.word	0x08003871

08003960 <__sfmoreglue>:
 8003960:	b570      	push	{r4, r5, r6, lr}
 8003962:	2268      	movs	r2, #104	; 0x68
 8003964:	1e4d      	subs	r5, r1, #1
 8003966:	4355      	muls	r5, r2
 8003968:	460e      	mov	r6, r1
 800396a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800396e:	f000 fae3 	bl	8003f38 <_malloc_r>
 8003972:	4604      	mov	r4, r0
 8003974:	b140      	cbz	r0, 8003988 <__sfmoreglue+0x28>
 8003976:	2100      	movs	r1, #0
 8003978:	e9c0 1600 	strd	r1, r6, [r0]
 800397c:	300c      	adds	r0, #12
 800397e:	60a0      	str	r0, [r4, #8]
 8003980:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003984:	f000 fa64 	bl	8003e50 <memset>
 8003988:	4620      	mov	r0, r4
 800398a:	bd70      	pop	{r4, r5, r6, pc}

0800398c <__sfp_lock_acquire>:
 800398c:	4801      	ldr	r0, [pc, #4]	; (8003994 <__sfp_lock_acquire+0x8>)
 800398e:	f000 ba3d 	b.w	8003e0c <__retarget_lock_acquire_recursive>
 8003992:	bf00      	nop
 8003994:	20000336 	.word	0x20000336

08003998 <__sfp_lock_release>:
 8003998:	4801      	ldr	r0, [pc, #4]	; (80039a0 <__sfp_lock_release+0x8>)
 800399a:	f000 ba39 	b.w	8003e10 <__retarget_lock_release_recursive>
 800399e:	bf00      	nop
 80039a0:	20000336 	.word	0x20000336

080039a4 <__sinit_lock_acquire>:
 80039a4:	4801      	ldr	r0, [pc, #4]	; (80039ac <__sinit_lock_acquire+0x8>)
 80039a6:	f000 ba31 	b.w	8003e0c <__retarget_lock_acquire_recursive>
 80039aa:	bf00      	nop
 80039ac:	20000337 	.word	0x20000337

080039b0 <__sinit_lock_release>:
 80039b0:	4801      	ldr	r0, [pc, #4]	; (80039b8 <__sinit_lock_release+0x8>)
 80039b2:	f000 ba2d 	b.w	8003e10 <__retarget_lock_release_recursive>
 80039b6:	bf00      	nop
 80039b8:	20000337 	.word	0x20000337

080039bc <__sinit>:
 80039bc:	b510      	push	{r4, lr}
 80039be:	4604      	mov	r4, r0
 80039c0:	f7ff fff0 	bl	80039a4 <__sinit_lock_acquire>
 80039c4:	69a3      	ldr	r3, [r4, #24]
 80039c6:	b11b      	cbz	r3, 80039d0 <__sinit+0x14>
 80039c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039cc:	f7ff bff0 	b.w	80039b0 <__sinit_lock_release>
 80039d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80039d4:	6523      	str	r3, [r4, #80]	; 0x50
 80039d6:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <__sinit+0x68>)
 80039d8:	4a13      	ldr	r2, [pc, #76]	; (8003a28 <__sinit+0x6c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80039de:	42a3      	cmp	r3, r4
 80039e0:	bf04      	itt	eq
 80039e2:	2301      	moveq	r3, #1
 80039e4:	61a3      	streq	r3, [r4, #24]
 80039e6:	4620      	mov	r0, r4
 80039e8:	f000 f820 	bl	8003a2c <__sfp>
 80039ec:	6060      	str	r0, [r4, #4]
 80039ee:	4620      	mov	r0, r4
 80039f0:	f000 f81c 	bl	8003a2c <__sfp>
 80039f4:	60a0      	str	r0, [r4, #8]
 80039f6:	4620      	mov	r0, r4
 80039f8:	f000 f818 	bl	8003a2c <__sfp>
 80039fc:	2200      	movs	r2, #0
 80039fe:	60e0      	str	r0, [r4, #12]
 8003a00:	2104      	movs	r1, #4
 8003a02:	6860      	ldr	r0, [r4, #4]
 8003a04:	f7ff ff82 	bl	800390c <std>
 8003a08:	68a0      	ldr	r0, [r4, #8]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	2109      	movs	r1, #9
 8003a0e:	f7ff ff7d 	bl	800390c <std>
 8003a12:	68e0      	ldr	r0, [r4, #12]
 8003a14:	2202      	movs	r2, #2
 8003a16:	2112      	movs	r1, #18
 8003a18:	f7ff ff78 	bl	800390c <std>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	61a3      	str	r3, [r4, #24]
 8003a20:	e7d2      	b.n	80039c8 <__sinit+0xc>
 8003a22:	bf00      	nop
 8003a24:	08005eb8 	.word	0x08005eb8
 8003a28:	08003955 	.word	0x08003955

08003a2c <__sfp>:
 8003a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2e:	4607      	mov	r7, r0
 8003a30:	f7ff ffac 	bl	800398c <__sfp_lock_acquire>
 8003a34:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <__sfp+0x84>)
 8003a36:	681e      	ldr	r6, [r3, #0]
 8003a38:	69b3      	ldr	r3, [r6, #24]
 8003a3a:	b913      	cbnz	r3, 8003a42 <__sfp+0x16>
 8003a3c:	4630      	mov	r0, r6
 8003a3e:	f7ff ffbd 	bl	80039bc <__sinit>
 8003a42:	3648      	adds	r6, #72	; 0x48
 8003a44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	d503      	bpl.n	8003a54 <__sfp+0x28>
 8003a4c:	6833      	ldr	r3, [r6, #0]
 8003a4e:	b30b      	cbz	r3, 8003a94 <__sfp+0x68>
 8003a50:	6836      	ldr	r6, [r6, #0]
 8003a52:	e7f7      	b.n	8003a44 <__sfp+0x18>
 8003a54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a58:	b9d5      	cbnz	r5, 8003a90 <__sfp+0x64>
 8003a5a:	4b16      	ldr	r3, [pc, #88]	; (8003ab4 <__sfp+0x88>)
 8003a5c:	60e3      	str	r3, [r4, #12]
 8003a5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a62:	6665      	str	r5, [r4, #100]	; 0x64
 8003a64:	f000 f9d0 	bl	8003e08 <__retarget_lock_init_recursive>
 8003a68:	f7ff ff96 	bl	8003998 <__sfp_lock_release>
 8003a6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a74:	6025      	str	r5, [r4, #0]
 8003a76:	61a5      	str	r5, [r4, #24]
 8003a78:	2208      	movs	r2, #8
 8003a7a:	4629      	mov	r1, r5
 8003a7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a80:	f000 f9e6 	bl	8003e50 <memset>
 8003a84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a90:	3468      	adds	r4, #104	; 0x68
 8003a92:	e7d9      	b.n	8003a48 <__sfp+0x1c>
 8003a94:	2104      	movs	r1, #4
 8003a96:	4638      	mov	r0, r7
 8003a98:	f7ff ff62 	bl	8003960 <__sfmoreglue>
 8003a9c:	4604      	mov	r4, r0
 8003a9e:	6030      	str	r0, [r6, #0]
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	d1d5      	bne.n	8003a50 <__sfp+0x24>
 8003aa4:	f7ff ff78 	bl	8003998 <__sfp_lock_release>
 8003aa8:	230c      	movs	r3, #12
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	e7ee      	b.n	8003a8c <__sfp+0x60>
 8003aae:	bf00      	nop
 8003ab0:	08005eb8 	.word	0x08005eb8
 8003ab4:	ffff0001 	.word	0xffff0001

08003ab8 <fiprintf>:
 8003ab8:	b40e      	push	{r1, r2, r3}
 8003aba:	b503      	push	{r0, r1, lr}
 8003abc:	4601      	mov	r1, r0
 8003abe:	ab03      	add	r3, sp, #12
 8003ac0:	4805      	ldr	r0, [pc, #20]	; (8003ad8 <fiprintf+0x20>)
 8003ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ac6:	6800      	ldr	r0, [r0, #0]
 8003ac8:	9301      	str	r3, [sp, #4]
 8003aca:	f000 fad3 	bl	8004074 <_vfiprintf_r>
 8003ace:	b002      	add	sp, #8
 8003ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ad4:	b003      	add	sp, #12
 8003ad6:	4770      	bx	lr
 8003ad8:	20000028 	.word	0x20000028

08003adc <_fputc_r>:
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	460e      	mov	r6, r1
 8003ae0:	4614      	mov	r4, r2
 8003ae2:	4605      	mov	r5, r0
 8003ae4:	b118      	cbz	r0, 8003aee <_fputc_r+0x12>
 8003ae6:	6983      	ldr	r3, [r0, #24]
 8003ae8:	b90b      	cbnz	r3, 8003aee <_fputc_r+0x12>
 8003aea:	f7ff ff67 	bl	80039bc <__sinit>
 8003aee:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <_fputc_r+0x64>)
 8003af0:	429c      	cmp	r4, r3
 8003af2:	d11a      	bne.n	8003b2a <_fputc_r+0x4e>
 8003af4:	686c      	ldr	r4, [r5, #4]
 8003af6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003af8:	07d8      	lsls	r0, r3, #31
 8003afa:	d405      	bmi.n	8003b08 <_fputc_r+0x2c>
 8003afc:	89a3      	ldrh	r3, [r4, #12]
 8003afe:	0599      	lsls	r1, r3, #22
 8003b00:	d402      	bmi.n	8003b08 <_fputc_r+0x2c>
 8003b02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b04:	f000 f982 	bl	8003e0c <__retarget_lock_acquire_recursive>
 8003b08:	4622      	mov	r2, r4
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	4631      	mov	r1, r6
 8003b0e:	f000 fd7f 	bl	8004610 <_putc_r>
 8003b12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b14:	07da      	lsls	r2, r3, #31
 8003b16:	4605      	mov	r5, r0
 8003b18:	d405      	bmi.n	8003b26 <_fputc_r+0x4a>
 8003b1a:	89a3      	ldrh	r3, [r4, #12]
 8003b1c:	059b      	lsls	r3, r3, #22
 8003b1e:	d402      	bmi.n	8003b26 <_fputc_r+0x4a>
 8003b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b22:	f000 f975 	bl	8003e10 <__retarget_lock_release_recursive>
 8003b26:	4628      	mov	r0, r5
 8003b28:	bd70      	pop	{r4, r5, r6, pc}
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <_fputc_r+0x68>)
 8003b2c:	429c      	cmp	r4, r3
 8003b2e:	d101      	bne.n	8003b34 <_fputc_r+0x58>
 8003b30:	68ac      	ldr	r4, [r5, #8]
 8003b32:	e7e0      	b.n	8003af6 <_fputc_r+0x1a>
 8003b34:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <_fputc_r+0x6c>)
 8003b36:	429c      	cmp	r4, r3
 8003b38:	bf08      	it	eq
 8003b3a:	68ec      	ldreq	r4, [r5, #12]
 8003b3c:	e7db      	b.n	8003af6 <_fputc_r+0x1a>
 8003b3e:	bf00      	nop
 8003b40:	08005e78 	.word	0x08005e78
 8003b44:	08005e98 	.word	0x08005e98
 8003b48:	08005e58 	.word	0x08005e58

08003b4c <fputc>:
 8003b4c:	4b02      	ldr	r3, [pc, #8]	; (8003b58 <fputc+0xc>)
 8003b4e:	460a      	mov	r2, r1
 8003b50:	4601      	mov	r1, r0
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	f7ff bfc2 	b.w	8003adc <_fputc_r>
 8003b58:	20000028 	.word	0x20000028

08003b5c <_fwalk_reent>:
 8003b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b60:	4606      	mov	r6, r0
 8003b62:	4688      	mov	r8, r1
 8003b64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b68:	2700      	movs	r7, #0
 8003b6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b6e:	f1b9 0901 	subs.w	r9, r9, #1
 8003b72:	d505      	bpl.n	8003b80 <_fwalk_reent+0x24>
 8003b74:	6824      	ldr	r4, [r4, #0]
 8003b76:	2c00      	cmp	r4, #0
 8003b78:	d1f7      	bne.n	8003b6a <_fwalk_reent+0xe>
 8003b7a:	4638      	mov	r0, r7
 8003b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b80:	89ab      	ldrh	r3, [r5, #12]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d907      	bls.n	8003b96 <_fwalk_reent+0x3a>
 8003b86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	d003      	beq.n	8003b96 <_fwalk_reent+0x3a>
 8003b8e:	4629      	mov	r1, r5
 8003b90:	4630      	mov	r0, r6
 8003b92:	47c0      	blx	r8
 8003b94:	4307      	orrs	r7, r0
 8003b96:	3568      	adds	r5, #104	; 0x68
 8003b98:	e7e9      	b.n	8003b6e <_fwalk_reent+0x12>
	...

08003b9c <__libc_init_array>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	4d0d      	ldr	r5, [pc, #52]	; (8003bd4 <__libc_init_array+0x38>)
 8003ba0:	4c0d      	ldr	r4, [pc, #52]	; (8003bd8 <__libc_init_array+0x3c>)
 8003ba2:	1b64      	subs	r4, r4, r5
 8003ba4:	10a4      	asrs	r4, r4, #2
 8003ba6:	2600      	movs	r6, #0
 8003ba8:	42a6      	cmp	r6, r4
 8003baa:	d109      	bne.n	8003bc0 <__libc_init_array+0x24>
 8003bac:	4d0b      	ldr	r5, [pc, #44]	; (8003bdc <__libc_init_array+0x40>)
 8003bae:	4c0c      	ldr	r4, [pc, #48]	; (8003be0 <__libc_init_array+0x44>)
 8003bb0:	f002 f858 	bl	8005c64 <_init>
 8003bb4:	1b64      	subs	r4, r4, r5
 8003bb6:	10a4      	asrs	r4, r4, #2
 8003bb8:	2600      	movs	r6, #0
 8003bba:	42a6      	cmp	r6, r4
 8003bbc:	d105      	bne.n	8003bca <__libc_init_array+0x2e>
 8003bbe:	bd70      	pop	{r4, r5, r6, pc}
 8003bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc4:	4798      	blx	r3
 8003bc6:	3601      	adds	r6, #1
 8003bc8:	e7ee      	b.n	8003ba8 <__libc_init_array+0xc>
 8003bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bce:	4798      	blx	r3
 8003bd0:	3601      	adds	r6, #1
 8003bd2:	e7f2      	b.n	8003bba <__libc_init_array+0x1e>
 8003bd4:	08006060 	.word	0x08006060
 8003bd8:	08006060 	.word	0x08006060
 8003bdc:	08006060 	.word	0x08006060
 8003be0:	08006064 	.word	0x08006064

08003be4 <localtime>:
 8003be4:	b538      	push	{r3, r4, r5, lr}
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <localtime+0x30>)
 8003be8:	681d      	ldr	r5, [r3, #0]
 8003bea:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003bec:	4604      	mov	r4, r0
 8003bee:	b953      	cbnz	r3, 8003c06 <localtime+0x22>
 8003bf0:	2024      	movs	r0, #36	; 0x24
 8003bf2:	f000 f90f 	bl	8003e14 <malloc>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	63e8      	str	r0, [r5, #60]	; 0x3c
 8003bfa:	b920      	cbnz	r0, 8003c06 <localtime+0x22>
 8003bfc:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <localtime+0x34>)
 8003bfe:	4807      	ldr	r0, [pc, #28]	; (8003c1c <localtime+0x38>)
 8003c00:	2132      	movs	r1, #50	; 0x32
 8003c02:	f001 f991 	bl	8004f28 <__assert_func>
 8003c06:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8003c08:	4620      	mov	r0, r4
 8003c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c0e:	f000 b807 	b.w	8003c20 <localtime_r>
 8003c12:	bf00      	nop
 8003c14:	20000028 	.word	0x20000028
 8003c18:	08005ebc 	.word	0x08005ebc
 8003c1c:	08005ed3 	.word	0x08005ed3

08003c20 <localtime_r>:
 8003c20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003c24:	4680      	mov	r8, r0
 8003c26:	9101      	str	r1, [sp, #4]
 8003c28:	f001 fa02 	bl	8005030 <__gettzinfo>
 8003c2c:	9901      	ldr	r1, [sp, #4]
 8003c2e:	4605      	mov	r5, r0
 8003c30:	4640      	mov	r0, r8
 8003c32:	f001 fa01 	bl	8005038 <gmtime_r>
 8003c36:	6943      	ldr	r3, [r0, #20]
 8003c38:	0799      	lsls	r1, r3, #30
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8003c40:	d105      	bne.n	8003c4e <localtime_r+0x2e>
 8003c42:	2264      	movs	r2, #100	; 0x64
 8003c44:	fb97 f3f2 	sdiv	r3, r7, r2
 8003c48:	fb02 7313 	mls	r3, r2, r3, r7
 8003c4c:	bb73      	cbnz	r3, 8003cac <localtime_r+0x8c>
 8003c4e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003c52:	fb97 f6f3 	sdiv	r6, r7, r3
 8003c56:	fb03 7616 	mls	r6, r3, r6, r7
 8003c5a:	fab6 f386 	clz	r3, r6
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	4e67      	ldr	r6, [pc, #412]	; (8003e00 <localtime_r+0x1e0>)
 8003c62:	2230      	movs	r2, #48	; 0x30
 8003c64:	fb02 6603 	mla	r6, r2, r3, r6
 8003c68:	f000 fefa 	bl	8004a60 <__tz_lock>
 8003c6c:	f000 ff04 	bl	8004a78 <_tzset_unlocked>
 8003c70:	4b64      	ldr	r3, [pc, #400]	; (8003e04 <localtime_r+0x1e4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	b34b      	cbz	r3, 8003cca <localtime_r+0xaa>
 8003c76:	686b      	ldr	r3, [r5, #4]
 8003c78:	42bb      	cmp	r3, r7
 8003c7a:	d119      	bne.n	8003cb0 <localtime_r+0x90>
 8003c7c:	682f      	ldr	r7, [r5, #0]
 8003c7e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003c82:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8003c86:	b9df      	cbnz	r7, 8003cc0 <localtime_r+0xa0>
 8003c88:	4282      	cmp	r2, r0
 8003c8a:	eb73 0101 	sbcs.w	r1, r3, r1
 8003c8e:	da23      	bge.n	8003cd8 <localtime_r+0xb8>
 8003c90:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8003c94:	4282      	cmp	r2, r0
 8003c96:	eb73 0701 	sbcs.w	r7, r3, r1
 8003c9a:	bfb4      	ite	lt
 8003c9c:	2701      	movlt	r7, #1
 8003c9e:	2700      	movge	r7, #0
 8003ca0:	4282      	cmp	r2, r0
 8003ca2:	418b      	sbcs	r3, r1
 8003ca4:	6227      	str	r7, [r4, #32]
 8003ca6:	db19      	blt.n	8003cdc <localtime_r+0xbc>
 8003ca8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003caa:	e018      	b.n	8003cde <localtime_r+0xbe>
 8003cac:	2301      	movs	r3, #1
 8003cae:	e7d7      	b.n	8003c60 <localtime_r+0x40>
 8003cb0:	4638      	mov	r0, r7
 8003cb2:	f000 fe2b 	bl	800490c <__tzcalc_limits>
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	d1e0      	bne.n	8003c7c <localtime_r+0x5c>
 8003cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cbe:	e004      	b.n	8003cca <localtime_r+0xaa>
 8003cc0:	4282      	cmp	r2, r0
 8003cc2:	eb73 0101 	sbcs.w	r1, r3, r1
 8003cc6:	da02      	bge.n	8003cce <localtime_r+0xae>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	6223      	str	r3, [r4, #32]
 8003ccc:	e7ec      	b.n	8003ca8 <localtime_r+0x88>
 8003cce:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8003cd2:	4282      	cmp	r2, r0
 8003cd4:	418b      	sbcs	r3, r1
 8003cd6:	daf7      	bge.n	8003cc8 <localtime_r+0xa8>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	6223      	str	r3, [r4, #32]
 8003cdc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8003cde:	6861      	ldr	r1, [r4, #4]
 8003ce0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8003ce4:	203c      	movs	r0, #60	; 0x3c
 8003ce6:	fb93 f5f2 	sdiv	r5, r3, r2
 8003cea:	fb02 3315 	mls	r3, r2, r5, r3
 8003cee:	fb93 f2f0 	sdiv	r2, r3, r0
 8003cf2:	fb00 3012 	mls	r0, r0, r2, r3
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	1a89      	subs	r1, r1, r2
 8003cfa:	68a2      	ldr	r2, [r4, #8]
 8003cfc:	6061      	str	r1, [r4, #4]
 8003cfe:	1a1b      	subs	r3, r3, r0
 8003d00:	1b52      	subs	r2, r2, r5
 8003d02:	2b3b      	cmp	r3, #59	; 0x3b
 8003d04:	6023      	str	r3, [r4, #0]
 8003d06:	60a2      	str	r2, [r4, #8]
 8003d08:	dd35      	ble.n	8003d76 <localtime_r+0x156>
 8003d0a:	3101      	adds	r1, #1
 8003d0c:	6061      	str	r1, [r4, #4]
 8003d0e:	3b3c      	subs	r3, #60	; 0x3c
 8003d10:	6023      	str	r3, [r4, #0]
 8003d12:	6863      	ldr	r3, [r4, #4]
 8003d14:	2b3b      	cmp	r3, #59	; 0x3b
 8003d16:	dd34      	ble.n	8003d82 <localtime_r+0x162>
 8003d18:	3201      	adds	r2, #1
 8003d1a:	60a2      	str	r2, [r4, #8]
 8003d1c:	3b3c      	subs	r3, #60	; 0x3c
 8003d1e:	6063      	str	r3, [r4, #4]
 8003d20:	68a3      	ldr	r3, [r4, #8]
 8003d22:	2b17      	cmp	r3, #23
 8003d24:	dd33      	ble.n	8003d8e <localtime_r+0x16e>
 8003d26:	69e2      	ldr	r2, [r4, #28]
 8003d28:	3201      	adds	r2, #1
 8003d2a:	61e2      	str	r2, [r4, #28]
 8003d2c:	69a2      	ldr	r2, [r4, #24]
 8003d2e:	3201      	adds	r2, #1
 8003d30:	2a06      	cmp	r2, #6
 8003d32:	bfc8      	it	gt
 8003d34:	2200      	movgt	r2, #0
 8003d36:	61a2      	str	r2, [r4, #24]
 8003d38:	68e2      	ldr	r2, [r4, #12]
 8003d3a:	3b18      	subs	r3, #24
 8003d3c:	3201      	adds	r2, #1
 8003d3e:	60a3      	str	r3, [r4, #8]
 8003d40:	6923      	ldr	r3, [r4, #16]
 8003d42:	60e2      	str	r2, [r4, #12]
 8003d44:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8003d48:	428a      	cmp	r2, r1
 8003d4a:	dd0e      	ble.n	8003d6a <localtime_r+0x14a>
 8003d4c:	2b0b      	cmp	r3, #11
 8003d4e:	eba2 0201 	sub.w	r2, r2, r1
 8003d52:	60e2      	str	r2, [r4, #12]
 8003d54:	f103 0201 	add.w	r2, r3, #1
 8003d58:	bf09      	itett	eq
 8003d5a:	6963      	ldreq	r3, [r4, #20]
 8003d5c:	6122      	strne	r2, [r4, #16]
 8003d5e:	2200      	moveq	r2, #0
 8003d60:	3301      	addeq	r3, #1
 8003d62:	bf02      	ittt	eq
 8003d64:	6122      	streq	r2, [r4, #16]
 8003d66:	6163      	streq	r3, [r4, #20]
 8003d68:	61e2      	streq	r2, [r4, #28]
 8003d6a:	f000 fe7f 	bl	8004a6c <__tz_unlock>
 8003d6e:	4620      	mov	r0, r4
 8003d70:	b002      	add	sp, #8
 8003d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	dacb      	bge.n	8003d12 <localtime_r+0xf2>
 8003d7a:	3901      	subs	r1, #1
 8003d7c:	6061      	str	r1, [r4, #4]
 8003d7e:	333c      	adds	r3, #60	; 0x3c
 8003d80:	e7c6      	b.n	8003d10 <localtime_r+0xf0>
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	dacc      	bge.n	8003d20 <localtime_r+0x100>
 8003d86:	3a01      	subs	r2, #1
 8003d88:	60a2      	str	r2, [r4, #8]
 8003d8a:	333c      	adds	r3, #60	; 0x3c
 8003d8c:	e7c7      	b.n	8003d1e <localtime_r+0xfe>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	daeb      	bge.n	8003d6a <localtime_r+0x14a>
 8003d92:	69e2      	ldr	r2, [r4, #28]
 8003d94:	3a01      	subs	r2, #1
 8003d96:	61e2      	str	r2, [r4, #28]
 8003d98:	69a2      	ldr	r2, [r4, #24]
 8003d9a:	3a01      	subs	r2, #1
 8003d9c:	bf48      	it	mi
 8003d9e:	2206      	movmi	r2, #6
 8003da0:	61a2      	str	r2, [r4, #24]
 8003da2:	68e2      	ldr	r2, [r4, #12]
 8003da4:	3318      	adds	r3, #24
 8003da6:	3a01      	subs	r2, #1
 8003da8:	60e2      	str	r2, [r4, #12]
 8003daa:	60a3      	str	r3, [r4, #8]
 8003dac:	2a00      	cmp	r2, #0
 8003dae:	d1dc      	bne.n	8003d6a <localtime_r+0x14a>
 8003db0:	6923      	ldr	r3, [r4, #16]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	d405      	bmi.n	8003dc2 <localtime_r+0x1a2>
 8003db6:	6123      	str	r3, [r4, #16]
 8003db8:	6923      	ldr	r3, [r4, #16]
 8003dba:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8003dbe:	60e3      	str	r3, [r4, #12]
 8003dc0:	e7d3      	b.n	8003d6a <localtime_r+0x14a>
 8003dc2:	230b      	movs	r3, #11
 8003dc4:	6123      	str	r3, [r4, #16]
 8003dc6:	6963      	ldr	r3, [r4, #20]
 8003dc8:	1e5a      	subs	r2, r3, #1
 8003dca:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8003dce:	6162      	str	r2, [r4, #20]
 8003dd0:	079a      	lsls	r2, r3, #30
 8003dd2:	d105      	bne.n	8003de0 <localtime_r+0x1c0>
 8003dd4:	2164      	movs	r1, #100	; 0x64
 8003dd6:	fb93 f2f1 	sdiv	r2, r3, r1
 8003dda:	fb01 3212 	mls	r2, r1, r2, r3
 8003dde:	b962      	cbnz	r2, 8003dfa <localtime_r+0x1da>
 8003de0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003de4:	fb93 f1f2 	sdiv	r1, r3, r2
 8003de8:	fb02 3311 	mls	r3, r2, r1, r3
 8003dec:	fab3 f383 	clz	r3, r3
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003df6:	61e3      	str	r3, [r4, #28]
 8003df8:	e7de      	b.n	8003db8 <localtime_r+0x198>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e7f9      	b.n	8003df2 <localtime_r+0x1d2>
 8003dfe:	bf00      	nop
 8003e00:	08005f30 	.word	0x08005f30
 8003e04:	20000360 	.word	0x20000360

08003e08 <__retarget_lock_init_recursive>:
 8003e08:	4770      	bx	lr

08003e0a <__retarget_lock_acquire>:
 8003e0a:	4770      	bx	lr

08003e0c <__retarget_lock_acquire_recursive>:
 8003e0c:	4770      	bx	lr

08003e0e <__retarget_lock_release>:
 8003e0e:	4770      	bx	lr

08003e10 <__retarget_lock_release_recursive>:
 8003e10:	4770      	bx	lr
	...

08003e14 <malloc>:
 8003e14:	4b02      	ldr	r3, [pc, #8]	; (8003e20 <malloc+0xc>)
 8003e16:	4601      	mov	r1, r0
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	f000 b88d 	b.w	8003f38 <_malloc_r>
 8003e1e:	bf00      	nop
 8003e20:	20000028 	.word	0x20000028

08003e24 <free>:
 8003e24:	4b02      	ldr	r3, [pc, #8]	; (8003e30 <free+0xc>)
 8003e26:	4601      	mov	r1, r0
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	f000 b819 	b.w	8003e60 <_free_r>
 8003e2e:	bf00      	nop
 8003e30:	20000028 	.word	0x20000028

08003e34 <memcpy>:
 8003e34:	440a      	add	r2, r1
 8003e36:	4291      	cmp	r1, r2
 8003e38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003e3c:	d100      	bne.n	8003e40 <memcpy+0xc>
 8003e3e:	4770      	bx	lr
 8003e40:	b510      	push	{r4, lr}
 8003e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e4a:	4291      	cmp	r1, r2
 8003e4c:	d1f9      	bne.n	8003e42 <memcpy+0xe>
 8003e4e:	bd10      	pop	{r4, pc}

08003e50 <memset>:
 8003e50:	4402      	add	r2, r0
 8003e52:	4603      	mov	r3, r0
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d100      	bne.n	8003e5a <memset+0xa>
 8003e58:	4770      	bx	lr
 8003e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e5e:	e7f9      	b.n	8003e54 <memset+0x4>

08003e60 <_free_r>:
 8003e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e62:	2900      	cmp	r1, #0
 8003e64:	d044      	beq.n	8003ef0 <_free_r+0x90>
 8003e66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e6a:	9001      	str	r0, [sp, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f1a1 0404 	sub.w	r4, r1, #4
 8003e72:	bfb8      	it	lt
 8003e74:	18e4      	addlt	r4, r4, r3
 8003e76:	f001 fa03 	bl	8005280 <__malloc_lock>
 8003e7a:	4a1e      	ldr	r2, [pc, #120]	; (8003ef4 <_free_r+0x94>)
 8003e7c:	9801      	ldr	r0, [sp, #4]
 8003e7e:	6813      	ldr	r3, [r2, #0]
 8003e80:	b933      	cbnz	r3, 8003e90 <_free_r+0x30>
 8003e82:	6063      	str	r3, [r4, #4]
 8003e84:	6014      	str	r4, [r2, #0]
 8003e86:	b003      	add	sp, #12
 8003e88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e8c:	f001 b9fe 	b.w	800528c <__malloc_unlock>
 8003e90:	42a3      	cmp	r3, r4
 8003e92:	d908      	bls.n	8003ea6 <_free_r+0x46>
 8003e94:	6825      	ldr	r5, [r4, #0]
 8003e96:	1961      	adds	r1, r4, r5
 8003e98:	428b      	cmp	r3, r1
 8003e9a:	bf01      	itttt	eq
 8003e9c:	6819      	ldreq	r1, [r3, #0]
 8003e9e:	685b      	ldreq	r3, [r3, #4]
 8003ea0:	1949      	addeq	r1, r1, r5
 8003ea2:	6021      	streq	r1, [r4, #0]
 8003ea4:	e7ed      	b.n	8003e82 <_free_r+0x22>
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	b10b      	cbz	r3, 8003eb0 <_free_r+0x50>
 8003eac:	42a3      	cmp	r3, r4
 8003eae:	d9fa      	bls.n	8003ea6 <_free_r+0x46>
 8003eb0:	6811      	ldr	r1, [r2, #0]
 8003eb2:	1855      	adds	r5, r2, r1
 8003eb4:	42a5      	cmp	r5, r4
 8003eb6:	d10b      	bne.n	8003ed0 <_free_r+0x70>
 8003eb8:	6824      	ldr	r4, [r4, #0]
 8003eba:	4421      	add	r1, r4
 8003ebc:	1854      	adds	r4, r2, r1
 8003ebe:	42a3      	cmp	r3, r4
 8003ec0:	6011      	str	r1, [r2, #0]
 8003ec2:	d1e0      	bne.n	8003e86 <_free_r+0x26>
 8003ec4:	681c      	ldr	r4, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	6053      	str	r3, [r2, #4]
 8003eca:	4421      	add	r1, r4
 8003ecc:	6011      	str	r1, [r2, #0]
 8003ece:	e7da      	b.n	8003e86 <_free_r+0x26>
 8003ed0:	d902      	bls.n	8003ed8 <_free_r+0x78>
 8003ed2:	230c      	movs	r3, #12
 8003ed4:	6003      	str	r3, [r0, #0]
 8003ed6:	e7d6      	b.n	8003e86 <_free_r+0x26>
 8003ed8:	6825      	ldr	r5, [r4, #0]
 8003eda:	1961      	adds	r1, r4, r5
 8003edc:	428b      	cmp	r3, r1
 8003ede:	bf04      	itt	eq
 8003ee0:	6819      	ldreq	r1, [r3, #0]
 8003ee2:	685b      	ldreq	r3, [r3, #4]
 8003ee4:	6063      	str	r3, [r4, #4]
 8003ee6:	bf04      	itt	eq
 8003ee8:	1949      	addeq	r1, r1, r5
 8003eea:	6021      	streq	r1, [r4, #0]
 8003eec:	6054      	str	r4, [r2, #4]
 8003eee:	e7ca      	b.n	8003e86 <_free_r+0x26>
 8003ef0:	b003      	add	sp, #12
 8003ef2:	bd30      	pop	{r4, r5, pc}
 8003ef4:	2000033c 	.word	0x2000033c

08003ef8 <sbrk_aligned>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	4e0e      	ldr	r6, [pc, #56]	; (8003f34 <sbrk_aligned+0x3c>)
 8003efc:	460c      	mov	r4, r1
 8003efe:	6831      	ldr	r1, [r6, #0]
 8003f00:	4605      	mov	r5, r0
 8003f02:	b911      	cbnz	r1, 8003f0a <sbrk_aligned+0x12>
 8003f04:	f000 fbcc 	bl	80046a0 <_sbrk_r>
 8003f08:	6030      	str	r0, [r6, #0]
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	f000 fbc7 	bl	80046a0 <_sbrk_r>
 8003f12:	1c43      	adds	r3, r0, #1
 8003f14:	d00a      	beq.n	8003f2c <sbrk_aligned+0x34>
 8003f16:	1cc4      	adds	r4, r0, #3
 8003f18:	f024 0403 	bic.w	r4, r4, #3
 8003f1c:	42a0      	cmp	r0, r4
 8003f1e:	d007      	beq.n	8003f30 <sbrk_aligned+0x38>
 8003f20:	1a21      	subs	r1, r4, r0
 8003f22:	4628      	mov	r0, r5
 8003f24:	f000 fbbc 	bl	80046a0 <_sbrk_r>
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d101      	bne.n	8003f30 <sbrk_aligned+0x38>
 8003f2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003f30:	4620      	mov	r0, r4
 8003f32:	bd70      	pop	{r4, r5, r6, pc}
 8003f34:	20000340 	.word	0x20000340

08003f38 <_malloc_r>:
 8003f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f3c:	1ccd      	adds	r5, r1, #3
 8003f3e:	f025 0503 	bic.w	r5, r5, #3
 8003f42:	3508      	adds	r5, #8
 8003f44:	2d0c      	cmp	r5, #12
 8003f46:	bf38      	it	cc
 8003f48:	250c      	movcc	r5, #12
 8003f4a:	2d00      	cmp	r5, #0
 8003f4c:	4607      	mov	r7, r0
 8003f4e:	db01      	blt.n	8003f54 <_malloc_r+0x1c>
 8003f50:	42a9      	cmp	r1, r5
 8003f52:	d905      	bls.n	8003f60 <_malloc_r+0x28>
 8003f54:	230c      	movs	r3, #12
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	2600      	movs	r6, #0
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f60:	4e2e      	ldr	r6, [pc, #184]	; (800401c <_malloc_r+0xe4>)
 8003f62:	f001 f98d 	bl	8005280 <__malloc_lock>
 8003f66:	6833      	ldr	r3, [r6, #0]
 8003f68:	461c      	mov	r4, r3
 8003f6a:	bb34      	cbnz	r4, 8003fba <_malloc_r+0x82>
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	4638      	mov	r0, r7
 8003f70:	f7ff ffc2 	bl	8003ef8 <sbrk_aligned>
 8003f74:	1c43      	adds	r3, r0, #1
 8003f76:	4604      	mov	r4, r0
 8003f78:	d14d      	bne.n	8004016 <_malloc_r+0xde>
 8003f7a:	6834      	ldr	r4, [r6, #0]
 8003f7c:	4626      	mov	r6, r4
 8003f7e:	2e00      	cmp	r6, #0
 8003f80:	d140      	bne.n	8004004 <_malloc_r+0xcc>
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	4631      	mov	r1, r6
 8003f86:	4638      	mov	r0, r7
 8003f88:	eb04 0803 	add.w	r8, r4, r3
 8003f8c:	f000 fb88 	bl	80046a0 <_sbrk_r>
 8003f90:	4580      	cmp	r8, r0
 8003f92:	d13a      	bne.n	800400a <_malloc_r+0xd2>
 8003f94:	6821      	ldr	r1, [r4, #0]
 8003f96:	3503      	adds	r5, #3
 8003f98:	1a6d      	subs	r5, r5, r1
 8003f9a:	f025 0503 	bic.w	r5, r5, #3
 8003f9e:	3508      	adds	r5, #8
 8003fa0:	2d0c      	cmp	r5, #12
 8003fa2:	bf38      	it	cc
 8003fa4:	250c      	movcc	r5, #12
 8003fa6:	4629      	mov	r1, r5
 8003fa8:	4638      	mov	r0, r7
 8003faa:	f7ff ffa5 	bl	8003ef8 <sbrk_aligned>
 8003fae:	3001      	adds	r0, #1
 8003fb0:	d02b      	beq.n	800400a <_malloc_r+0xd2>
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	442b      	add	r3, r5
 8003fb6:	6023      	str	r3, [r4, #0]
 8003fb8:	e00e      	b.n	8003fd8 <_malloc_r+0xa0>
 8003fba:	6822      	ldr	r2, [r4, #0]
 8003fbc:	1b52      	subs	r2, r2, r5
 8003fbe:	d41e      	bmi.n	8003ffe <_malloc_r+0xc6>
 8003fc0:	2a0b      	cmp	r2, #11
 8003fc2:	d916      	bls.n	8003ff2 <_malloc_r+0xba>
 8003fc4:	1961      	adds	r1, r4, r5
 8003fc6:	42a3      	cmp	r3, r4
 8003fc8:	6025      	str	r5, [r4, #0]
 8003fca:	bf18      	it	ne
 8003fcc:	6059      	strne	r1, [r3, #4]
 8003fce:	6863      	ldr	r3, [r4, #4]
 8003fd0:	bf08      	it	eq
 8003fd2:	6031      	streq	r1, [r6, #0]
 8003fd4:	5162      	str	r2, [r4, r5]
 8003fd6:	604b      	str	r3, [r1, #4]
 8003fd8:	4638      	mov	r0, r7
 8003fda:	f104 060b 	add.w	r6, r4, #11
 8003fde:	f001 f955 	bl	800528c <__malloc_unlock>
 8003fe2:	f026 0607 	bic.w	r6, r6, #7
 8003fe6:	1d23      	adds	r3, r4, #4
 8003fe8:	1af2      	subs	r2, r6, r3
 8003fea:	d0b6      	beq.n	8003f5a <_malloc_r+0x22>
 8003fec:	1b9b      	subs	r3, r3, r6
 8003fee:	50a3      	str	r3, [r4, r2]
 8003ff0:	e7b3      	b.n	8003f5a <_malloc_r+0x22>
 8003ff2:	6862      	ldr	r2, [r4, #4]
 8003ff4:	42a3      	cmp	r3, r4
 8003ff6:	bf0c      	ite	eq
 8003ff8:	6032      	streq	r2, [r6, #0]
 8003ffa:	605a      	strne	r2, [r3, #4]
 8003ffc:	e7ec      	b.n	8003fd8 <_malloc_r+0xa0>
 8003ffe:	4623      	mov	r3, r4
 8004000:	6864      	ldr	r4, [r4, #4]
 8004002:	e7b2      	b.n	8003f6a <_malloc_r+0x32>
 8004004:	4634      	mov	r4, r6
 8004006:	6876      	ldr	r6, [r6, #4]
 8004008:	e7b9      	b.n	8003f7e <_malloc_r+0x46>
 800400a:	230c      	movs	r3, #12
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	4638      	mov	r0, r7
 8004010:	f001 f93c 	bl	800528c <__malloc_unlock>
 8004014:	e7a1      	b.n	8003f5a <_malloc_r+0x22>
 8004016:	6025      	str	r5, [r4, #0]
 8004018:	e7de      	b.n	8003fd8 <_malloc_r+0xa0>
 800401a:	bf00      	nop
 800401c:	2000033c 	.word	0x2000033c

08004020 <__sfputc_r>:
 8004020:	6893      	ldr	r3, [r2, #8]
 8004022:	3b01      	subs	r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	b410      	push	{r4}
 8004028:	6093      	str	r3, [r2, #8]
 800402a:	da08      	bge.n	800403e <__sfputc_r+0x1e>
 800402c:	6994      	ldr	r4, [r2, #24]
 800402e:	42a3      	cmp	r3, r4
 8004030:	db01      	blt.n	8004036 <__sfputc_r+0x16>
 8004032:	290a      	cmp	r1, #10
 8004034:	d103      	bne.n	800403e <__sfputc_r+0x1e>
 8004036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800403a:	f000 bea3 	b.w	8004d84 <__swbuf_r>
 800403e:	6813      	ldr	r3, [r2, #0]
 8004040:	1c58      	adds	r0, r3, #1
 8004042:	6010      	str	r0, [r2, #0]
 8004044:	7019      	strb	r1, [r3, #0]
 8004046:	4608      	mov	r0, r1
 8004048:	f85d 4b04 	ldr.w	r4, [sp], #4
 800404c:	4770      	bx	lr

0800404e <__sfputs_r>:
 800404e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004050:	4606      	mov	r6, r0
 8004052:	460f      	mov	r7, r1
 8004054:	4614      	mov	r4, r2
 8004056:	18d5      	adds	r5, r2, r3
 8004058:	42ac      	cmp	r4, r5
 800405a:	d101      	bne.n	8004060 <__sfputs_r+0x12>
 800405c:	2000      	movs	r0, #0
 800405e:	e007      	b.n	8004070 <__sfputs_r+0x22>
 8004060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004064:	463a      	mov	r2, r7
 8004066:	4630      	mov	r0, r6
 8004068:	f7ff ffda 	bl	8004020 <__sfputc_r>
 800406c:	1c43      	adds	r3, r0, #1
 800406e:	d1f3      	bne.n	8004058 <__sfputs_r+0xa>
 8004070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004074 <_vfiprintf_r>:
 8004074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004078:	460d      	mov	r5, r1
 800407a:	b09d      	sub	sp, #116	; 0x74
 800407c:	4614      	mov	r4, r2
 800407e:	4698      	mov	r8, r3
 8004080:	4606      	mov	r6, r0
 8004082:	b118      	cbz	r0, 800408c <_vfiprintf_r+0x18>
 8004084:	6983      	ldr	r3, [r0, #24]
 8004086:	b90b      	cbnz	r3, 800408c <_vfiprintf_r+0x18>
 8004088:	f7ff fc98 	bl	80039bc <__sinit>
 800408c:	4b89      	ldr	r3, [pc, #548]	; (80042b4 <_vfiprintf_r+0x240>)
 800408e:	429d      	cmp	r5, r3
 8004090:	d11b      	bne.n	80040ca <_vfiprintf_r+0x56>
 8004092:	6875      	ldr	r5, [r6, #4]
 8004094:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004096:	07d9      	lsls	r1, r3, #31
 8004098:	d405      	bmi.n	80040a6 <_vfiprintf_r+0x32>
 800409a:	89ab      	ldrh	r3, [r5, #12]
 800409c:	059a      	lsls	r2, r3, #22
 800409e:	d402      	bmi.n	80040a6 <_vfiprintf_r+0x32>
 80040a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040a2:	f7ff feb3 	bl	8003e0c <__retarget_lock_acquire_recursive>
 80040a6:	89ab      	ldrh	r3, [r5, #12]
 80040a8:	071b      	lsls	r3, r3, #28
 80040aa:	d501      	bpl.n	80040b0 <_vfiprintf_r+0x3c>
 80040ac:	692b      	ldr	r3, [r5, #16]
 80040ae:	b9eb      	cbnz	r3, 80040ec <_vfiprintf_r+0x78>
 80040b0:	4629      	mov	r1, r5
 80040b2:	4630      	mov	r0, r6
 80040b4:	f000 feca 	bl	8004e4c <__swsetup_r>
 80040b8:	b1c0      	cbz	r0, 80040ec <_vfiprintf_r+0x78>
 80040ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040bc:	07dc      	lsls	r4, r3, #31
 80040be:	d50e      	bpl.n	80040de <_vfiprintf_r+0x6a>
 80040c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040c4:	b01d      	add	sp, #116	; 0x74
 80040c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ca:	4b7b      	ldr	r3, [pc, #492]	; (80042b8 <_vfiprintf_r+0x244>)
 80040cc:	429d      	cmp	r5, r3
 80040ce:	d101      	bne.n	80040d4 <_vfiprintf_r+0x60>
 80040d0:	68b5      	ldr	r5, [r6, #8]
 80040d2:	e7df      	b.n	8004094 <_vfiprintf_r+0x20>
 80040d4:	4b79      	ldr	r3, [pc, #484]	; (80042bc <_vfiprintf_r+0x248>)
 80040d6:	429d      	cmp	r5, r3
 80040d8:	bf08      	it	eq
 80040da:	68f5      	ldreq	r5, [r6, #12]
 80040dc:	e7da      	b.n	8004094 <_vfiprintf_r+0x20>
 80040de:	89ab      	ldrh	r3, [r5, #12]
 80040e0:	0598      	lsls	r0, r3, #22
 80040e2:	d4ed      	bmi.n	80040c0 <_vfiprintf_r+0x4c>
 80040e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040e6:	f7ff fe93 	bl	8003e10 <__retarget_lock_release_recursive>
 80040ea:	e7e9      	b.n	80040c0 <_vfiprintf_r+0x4c>
 80040ec:	2300      	movs	r3, #0
 80040ee:	9309      	str	r3, [sp, #36]	; 0x24
 80040f0:	2320      	movs	r3, #32
 80040f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80040fa:	2330      	movs	r3, #48	; 0x30
 80040fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80042c0 <_vfiprintf_r+0x24c>
 8004100:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004104:	f04f 0901 	mov.w	r9, #1
 8004108:	4623      	mov	r3, r4
 800410a:	469a      	mov	sl, r3
 800410c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004110:	b10a      	cbz	r2, 8004116 <_vfiprintf_r+0xa2>
 8004112:	2a25      	cmp	r2, #37	; 0x25
 8004114:	d1f9      	bne.n	800410a <_vfiprintf_r+0x96>
 8004116:	ebba 0b04 	subs.w	fp, sl, r4
 800411a:	d00b      	beq.n	8004134 <_vfiprintf_r+0xc0>
 800411c:	465b      	mov	r3, fp
 800411e:	4622      	mov	r2, r4
 8004120:	4629      	mov	r1, r5
 8004122:	4630      	mov	r0, r6
 8004124:	f7ff ff93 	bl	800404e <__sfputs_r>
 8004128:	3001      	adds	r0, #1
 800412a:	f000 80aa 	beq.w	8004282 <_vfiprintf_r+0x20e>
 800412e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004130:	445a      	add	r2, fp
 8004132:	9209      	str	r2, [sp, #36]	; 0x24
 8004134:	f89a 3000 	ldrb.w	r3, [sl]
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80a2 	beq.w	8004282 <_vfiprintf_r+0x20e>
 800413e:	2300      	movs	r3, #0
 8004140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004144:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004148:	f10a 0a01 	add.w	sl, sl, #1
 800414c:	9304      	str	r3, [sp, #16]
 800414e:	9307      	str	r3, [sp, #28]
 8004150:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004154:	931a      	str	r3, [sp, #104]	; 0x68
 8004156:	4654      	mov	r4, sl
 8004158:	2205      	movs	r2, #5
 800415a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800415e:	4858      	ldr	r0, [pc, #352]	; (80042c0 <_vfiprintf_r+0x24c>)
 8004160:	f7fc f84e 	bl	8000200 <memchr>
 8004164:	9a04      	ldr	r2, [sp, #16]
 8004166:	b9d8      	cbnz	r0, 80041a0 <_vfiprintf_r+0x12c>
 8004168:	06d1      	lsls	r1, r2, #27
 800416a:	bf44      	itt	mi
 800416c:	2320      	movmi	r3, #32
 800416e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004172:	0713      	lsls	r3, r2, #28
 8004174:	bf44      	itt	mi
 8004176:	232b      	movmi	r3, #43	; 0x2b
 8004178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800417c:	f89a 3000 	ldrb.w	r3, [sl]
 8004180:	2b2a      	cmp	r3, #42	; 0x2a
 8004182:	d015      	beq.n	80041b0 <_vfiprintf_r+0x13c>
 8004184:	9a07      	ldr	r2, [sp, #28]
 8004186:	4654      	mov	r4, sl
 8004188:	2000      	movs	r0, #0
 800418a:	f04f 0c0a 	mov.w	ip, #10
 800418e:	4621      	mov	r1, r4
 8004190:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004194:	3b30      	subs	r3, #48	; 0x30
 8004196:	2b09      	cmp	r3, #9
 8004198:	d94e      	bls.n	8004238 <_vfiprintf_r+0x1c4>
 800419a:	b1b0      	cbz	r0, 80041ca <_vfiprintf_r+0x156>
 800419c:	9207      	str	r2, [sp, #28]
 800419e:	e014      	b.n	80041ca <_vfiprintf_r+0x156>
 80041a0:	eba0 0308 	sub.w	r3, r0, r8
 80041a4:	fa09 f303 	lsl.w	r3, r9, r3
 80041a8:	4313      	orrs	r3, r2
 80041aa:	9304      	str	r3, [sp, #16]
 80041ac:	46a2      	mov	sl, r4
 80041ae:	e7d2      	b.n	8004156 <_vfiprintf_r+0xe2>
 80041b0:	9b03      	ldr	r3, [sp, #12]
 80041b2:	1d19      	adds	r1, r3, #4
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	9103      	str	r1, [sp, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bfbb      	ittet	lt
 80041bc:	425b      	neglt	r3, r3
 80041be:	f042 0202 	orrlt.w	r2, r2, #2
 80041c2:	9307      	strge	r3, [sp, #28]
 80041c4:	9307      	strlt	r3, [sp, #28]
 80041c6:	bfb8      	it	lt
 80041c8:	9204      	strlt	r2, [sp, #16]
 80041ca:	7823      	ldrb	r3, [r4, #0]
 80041cc:	2b2e      	cmp	r3, #46	; 0x2e
 80041ce:	d10c      	bne.n	80041ea <_vfiprintf_r+0x176>
 80041d0:	7863      	ldrb	r3, [r4, #1]
 80041d2:	2b2a      	cmp	r3, #42	; 0x2a
 80041d4:	d135      	bne.n	8004242 <_vfiprintf_r+0x1ce>
 80041d6:	9b03      	ldr	r3, [sp, #12]
 80041d8:	1d1a      	adds	r2, r3, #4
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	9203      	str	r2, [sp, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	bfb8      	it	lt
 80041e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80041e6:	3402      	adds	r4, #2
 80041e8:	9305      	str	r3, [sp, #20]
 80041ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80042d0 <_vfiprintf_r+0x25c>
 80041ee:	7821      	ldrb	r1, [r4, #0]
 80041f0:	2203      	movs	r2, #3
 80041f2:	4650      	mov	r0, sl
 80041f4:	f7fc f804 	bl	8000200 <memchr>
 80041f8:	b140      	cbz	r0, 800420c <_vfiprintf_r+0x198>
 80041fa:	2340      	movs	r3, #64	; 0x40
 80041fc:	eba0 000a 	sub.w	r0, r0, sl
 8004200:	fa03 f000 	lsl.w	r0, r3, r0
 8004204:	9b04      	ldr	r3, [sp, #16]
 8004206:	4303      	orrs	r3, r0
 8004208:	3401      	adds	r4, #1
 800420a:	9304      	str	r3, [sp, #16]
 800420c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004210:	482c      	ldr	r0, [pc, #176]	; (80042c4 <_vfiprintf_r+0x250>)
 8004212:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004216:	2206      	movs	r2, #6
 8004218:	f7fb fff2 	bl	8000200 <memchr>
 800421c:	2800      	cmp	r0, #0
 800421e:	d03f      	beq.n	80042a0 <_vfiprintf_r+0x22c>
 8004220:	4b29      	ldr	r3, [pc, #164]	; (80042c8 <_vfiprintf_r+0x254>)
 8004222:	bb1b      	cbnz	r3, 800426c <_vfiprintf_r+0x1f8>
 8004224:	9b03      	ldr	r3, [sp, #12]
 8004226:	3307      	adds	r3, #7
 8004228:	f023 0307 	bic.w	r3, r3, #7
 800422c:	3308      	adds	r3, #8
 800422e:	9303      	str	r3, [sp, #12]
 8004230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004232:	443b      	add	r3, r7
 8004234:	9309      	str	r3, [sp, #36]	; 0x24
 8004236:	e767      	b.n	8004108 <_vfiprintf_r+0x94>
 8004238:	fb0c 3202 	mla	r2, ip, r2, r3
 800423c:	460c      	mov	r4, r1
 800423e:	2001      	movs	r0, #1
 8004240:	e7a5      	b.n	800418e <_vfiprintf_r+0x11a>
 8004242:	2300      	movs	r3, #0
 8004244:	3401      	adds	r4, #1
 8004246:	9305      	str	r3, [sp, #20]
 8004248:	4619      	mov	r1, r3
 800424a:	f04f 0c0a 	mov.w	ip, #10
 800424e:	4620      	mov	r0, r4
 8004250:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004254:	3a30      	subs	r2, #48	; 0x30
 8004256:	2a09      	cmp	r2, #9
 8004258:	d903      	bls.n	8004262 <_vfiprintf_r+0x1ee>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0c5      	beq.n	80041ea <_vfiprintf_r+0x176>
 800425e:	9105      	str	r1, [sp, #20]
 8004260:	e7c3      	b.n	80041ea <_vfiprintf_r+0x176>
 8004262:	fb0c 2101 	mla	r1, ip, r1, r2
 8004266:	4604      	mov	r4, r0
 8004268:	2301      	movs	r3, #1
 800426a:	e7f0      	b.n	800424e <_vfiprintf_r+0x1da>
 800426c:	ab03      	add	r3, sp, #12
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	462a      	mov	r2, r5
 8004272:	4b16      	ldr	r3, [pc, #88]	; (80042cc <_vfiprintf_r+0x258>)
 8004274:	a904      	add	r1, sp, #16
 8004276:	4630      	mov	r0, r6
 8004278:	f3af 8000 	nop.w
 800427c:	4607      	mov	r7, r0
 800427e:	1c78      	adds	r0, r7, #1
 8004280:	d1d6      	bne.n	8004230 <_vfiprintf_r+0x1bc>
 8004282:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004284:	07d9      	lsls	r1, r3, #31
 8004286:	d405      	bmi.n	8004294 <_vfiprintf_r+0x220>
 8004288:	89ab      	ldrh	r3, [r5, #12]
 800428a:	059a      	lsls	r2, r3, #22
 800428c:	d402      	bmi.n	8004294 <_vfiprintf_r+0x220>
 800428e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004290:	f7ff fdbe 	bl	8003e10 <__retarget_lock_release_recursive>
 8004294:	89ab      	ldrh	r3, [r5, #12]
 8004296:	065b      	lsls	r3, r3, #25
 8004298:	f53f af12 	bmi.w	80040c0 <_vfiprintf_r+0x4c>
 800429c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800429e:	e711      	b.n	80040c4 <_vfiprintf_r+0x50>
 80042a0:	ab03      	add	r3, sp, #12
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	462a      	mov	r2, r5
 80042a6:	4b09      	ldr	r3, [pc, #36]	; (80042cc <_vfiprintf_r+0x258>)
 80042a8:	a904      	add	r1, sp, #16
 80042aa:	4630      	mov	r0, r6
 80042ac:	f000 f88a 	bl	80043c4 <_printf_i>
 80042b0:	e7e4      	b.n	800427c <_vfiprintf_r+0x208>
 80042b2:	bf00      	nop
 80042b4:	08005e78 	.word	0x08005e78
 80042b8:	08005e98 	.word	0x08005e98
 80042bc:	08005e58 	.word	0x08005e58
 80042c0:	08005f90 	.word	0x08005f90
 80042c4:	08005f9a 	.word	0x08005f9a
 80042c8:	00000000 	.word	0x00000000
 80042cc:	0800404f 	.word	0x0800404f
 80042d0:	08005f96 	.word	0x08005f96

080042d4 <vfiprintf>:
 80042d4:	4613      	mov	r3, r2
 80042d6:	460a      	mov	r2, r1
 80042d8:	4601      	mov	r1, r0
 80042da:	4802      	ldr	r0, [pc, #8]	; (80042e4 <vfiprintf+0x10>)
 80042dc:	6800      	ldr	r0, [r0, #0]
 80042de:	f7ff bec9 	b.w	8004074 <_vfiprintf_r>
 80042e2:	bf00      	nop
 80042e4:	20000028 	.word	0x20000028

080042e8 <_printf_common>:
 80042e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042ec:	4616      	mov	r6, r2
 80042ee:	4699      	mov	r9, r3
 80042f0:	688a      	ldr	r2, [r1, #8]
 80042f2:	690b      	ldr	r3, [r1, #16]
 80042f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042f8:	4293      	cmp	r3, r2
 80042fa:	bfb8      	it	lt
 80042fc:	4613      	movlt	r3, r2
 80042fe:	6033      	str	r3, [r6, #0]
 8004300:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004304:	4607      	mov	r7, r0
 8004306:	460c      	mov	r4, r1
 8004308:	b10a      	cbz	r2, 800430e <_printf_common+0x26>
 800430a:	3301      	adds	r3, #1
 800430c:	6033      	str	r3, [r6, #0]
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	0699      	lsls	r1, r3, #26
 8004312:	bf42      	ittt	mi
 8004314:	6833      	ldrmi	r3, [r6, #0]
 8004316:	3302      	addmi	r3, #2
 8004318:	6033      	strmi	r3, [r6, #0]
 800431a:	6825      	ldr	r5, [r4, #0]
 800431c:	f015 0506 	ands.w	r5, r5, #6
 8004320:	d106      	bne.n	8004330 <_printf_common+0x48>
 8004322:	f104 0a19 	add.w	sl, r4, #25
 8004326:	68e3      	ldr	r3, [r4, #12]
 8004328:	6832      	ldr	r2, [r6, #0]
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	42ab      	cmp	r3, r5
 800432e:	dc26      	bgt.n	800437e <_printf_common+0x96>
 8004330:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004334:	1e13      	subs	r3, r2, #0
 8004336:	6822      	ldr	r2, [r4, #0]
 8004338:	bf18      	it	ne
 800433a:	2301      	movne	r3, #1
 800433c:	0692      	lsls	r2, r2, #26
 800433e:	d42b      	bmi.n	8004398 <_printf_common+0xb0>
 8004340:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004344:	4649      	mov	r1, r9
 8004346:	4638      	mov	r0, r7
 8004348:	47c0      	blx	r8
 800434a:	3001      	adds	r0, #1
 800434c:	d01e      	beq.n	800438c <_printf_common+0xa4>
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	68e5      	ldr	r5, [r4, #12]
 8004352:	6832      	ldr	r2, [r6, #0]
 8004354:	f003 0306 	and.w	r3, r3, #6
 8004358:	2b04      	cmp	r3, #4
 800435a:	bf08      	it	eq
 800435c:	1aad      	subeq	r5, r5, r2
 800435e:	68a3      	ldr	r3, [r4, #8]
 8004360:	6922      	ldr	r2, [r4, #16]
 8004362:	bf0c      	ite	eq
 8004364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004368:	2500      	movne	r5, #0
 800436a:	4293      	cmp	r3, r2
 800436c:	bfc4      	itt	gt
 800436e:	1a9b      	subgt	r3, r3, r2
 8004370:	18ed      	addgt	r5, r5, r3
 8004372:	2600      	movs	r6, #0
 8004374:	341a      	adds	r4, #26
 8004376:	42b5      	cmp	r5, r6
 8004378:	d11a      	bne.n	80043b0 <_printf_common+0xc8>
 800437a:	2000      	movs	r0, #0
 800437c:	e008      	b.n	8004390 <_printf_common+0xa8>
 800437e:	2301      	movs	r3, #1
 8004380:	4652      	mov	r2, sl
 8004382:	4649      	mov	r1, r9
 8004384:	4638      	mov	r0, r7
 8004386:	47c0      	blx	r8
 8004388:	3001      	adds	r0, #1
 800438a:	d103      	bne.n	8004394 <_printf_common+0xac>
 800438c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004394:	3501      	adds	r5, #1
 8004396:	e7c6      	b.n	8004326 <_printf_common+0x3e>
 8004398:	18e1      	adds	r1, r4, r3
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	2030      	movs	r0, #48	; 0x30
 800439e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043a2:	4422      	add	r2, r4
 80043a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043ac:	3302      	adds	r3, #2
 80043ae:	e7c7      	b.n	8004340 <_printf_common+0x58>
 80043b0:	2301      	movs	r3, #1
 80043b2:	4622      	mov	r2, r4
 80043b4:	4649      	mov	r1, r9
 80043b6:	4638      	mov	r0, r7
 80043b8:	47c0      	blx	r8
 80043ba:	3001      	adds	r0, #1
 80043bc:	d0e6      	beq.n	800438c <_printf_common+0xa4>
 80043be:	3601      	adds	r6, #1
 80043c0:	e7d9      	b.n	8004376 <_printf_common+0x8e>
	...

080043c4 <_printf_i>:
 80043c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043c8:	7e0f      	ldrb	r7, [r1, #24]
 80043ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043cc:	2f78      	cmp	r7, #120	; 0x78
 80043ce:	4691      	mov	r9, r2
 80043d0:	4680      	mov	r8, r0
 80043d2:	460c      	mov	r4, r1
 80043d4:	469a      	mov	sl, r3
 80043d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043da:	d807      	bhi.n	80043ec <_printf_i+0x28>
 80043dc:	2f62      	cmp	r7, #98	; 0x62
 80043de:	d80a      	bhi.n	80043f6 <_printf_i+0x32>
 80043e0:	2f00      	cmp	r7, #0
 80043e2:	f000 80d8 	beq.w	8004596 <_printf_i+0x1d2>
 80043e6:	2f58      	cmp	r7, #88	; 0x58
 80043e8:	f000 80a3 	beq.w	8004532 <_printf_i+0x16e>
 80043ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043f4:	e03a      	b.n	800446c <_printf_i+0xa8>
 80043f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043fa:	2b15      	cmp	r3, #21
 80043fc:	d8f6      	bhi.n	80043ec <_printf_i+0x28>
 80043fe:	a101      	add	r1, pc, #4	; (adr r1, 8004404 <_printf_i+0x40>)
 8004400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004404:	0800445d 	.word	0x0800445d
 8004408:	08004471 	.word	0x08004471
 800440c:	080043ed 	.word	0x080043ed
 8004410:	080043ed 	.word	0x080043ed
 8004414:	080043ed 	.word	0x080043ed
 8004418:	080043ed 	.word	0x080043ed
 800441c:	08004471 	.word	0x08004471
 8004420:	080043ed 	.word	0x080043ed
 8004424:	080043ed 	.word	0x080043ed
 8004428:	080043ed 	.word	0x080043ed
 800442c:	080043ed 	.word	0x080043ed
 8004430:	0800457d 	.word	0x0800457d
 8004434:	080044a1 	.word	0x080044a1
 8004438:	0800455f 	.word	0x0800455f
 800443c:	080043ed 	.word	0x080043ed
 8004440:	080043ed 	.word	0x080043ed
 8004444:	0800459f 	.word	0x0800459f
 8004448:	080043ed 	.word	0x080043ed
 800444c:	080044a1 	.word	0x080044a1
 8004450:	080043ed 	.word	0x080043ed
 8004454:	080043ed 	.word	0x080043ed
 8004458:	08004567 	.word	0x08004567
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	1d1a      	adds	r2, r3, #4
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	602a      	str	r2, [r5, #0]
 8004464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800446c:	2301      	movs	r3, #1
 800446e:	e0a3      	b.n	80045b8 <_printf_i+0x1f4>
 8004470:	6820      	ldr	r0, [r4, #0]
 8004472:	6829      	ldr	r1, [r5, #0]
 8004474:	0606      	lsls	r6, r0, #24
 8004476:	f101 0304 	add.w	r3, r1, #4
 800447a:	d50a      	bpl.n	8004492 <_printf_i+0xce>
 800447c:	680e      	ldr	r6, [r1, #0]
 800447e:	602b      	str	r3, [r5, #0]
 8004480:	2e00      	cmp	r6, #0
 8004482:	da03      	bge.n	800448c <_printf_i+0xc8>
 8004484:	232d      	movs	r3, #45	; 0x2d
 8004486:	4276      	negs	r6, r6
 8004488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800448c:	485e      	ldr	r0, [pc, #376]	; (8004608 <_printf_i+0x244>)
 800448e:	230a      	movs	r3, #10
 8004490:	e019      	b.n	80044c6 <_printf_i+0x102>
 8004492:	680e      	ldr	r6, [r1, #0]
 8004494:	602b      	str	r3, [r5, #0]
 8004496:	f010 0f40 	tst.w	r0, #64	; 0x40
 800449a:	bf18      	it	ne
 800449c:	b236      	sxthne	r6, r6
 800449e:	e7ef      	b.n	8004480 <_printf_i+0xbc>
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	6820      	ldr	r0, [r4, #0]
 80044a4:	1d19      	adds	r1, r3, #4
 80044a6:	6029      	str	r1, [r5, #0]
 80044a8:	0601      	lsls	r1, r0, #24
 80044aa:	d501      	bpl.n	80044b0 <_printf_i+0xec>
 80044ac:	681e      	ldr	r6, [r3, #0]
 80044ae:	e002      	b.n	80044b6 <_printf_i+0xf2>
 80044b0:	0646      	lsls	r6, r0, #25
 80044b2:	d5fb      	bpl.n	80044ac <_printf_i+0xe8>
 80044b4:	881e      	ldrh	r6, [r3, #0]
 80044b6:	4854      	ldr	r0, [pc, #336]	; (8004608 <_printf_i+0x244>)
 80044b8:	2f6f      	cmp	r7, #111	; 0x6f
 80044ba:	bf0c      	ite	eq
 80044bc:	2308      	moveq	r3, #8
 80044be:	230a      	movne	r3, #10
 80044c0:	2100      	movs	r1, #0
 80044c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044c6:	6865      	ldr	r5, [r4, #4]
 80044c8:	60a5      	str	r5, [r4, #8]
 80044ca:	2d00      	cmp	r5, #0
 80044cc:	bfa2      	ittt	ge
 80044ce:	6821      	ldrge	r1, [r4, #0]
 80044d0:	f021 0104 	bicge.w	r1, r1, #4
 80044d4:	6021      	strge	r1, [r4, #0]
 80044d6:	b90e      	cbnz	r6, 80044dc <_printf_i+0x118>
 80044d8:	2d00      	cmp	r5, #0
 80044da:	d04d      	beq.n	8004578 <_printf_i+0x1b4>
 80044dc:	4615      	mov	r5, r2
 80044de:	fbb6 f1f3 	udiv	r1, r6, r3
 80044e2:	fb03 6711 	mls	r7, r3, r1, r6
 80044e6:	5dc7      	ldrb	r7, [r0, r7]
 80044e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044ec:	4637      	mov	r7, r6
 80044ee:	42bb      	cmp	r3, r7
 80044f0:	460e      	mov	r6, r1
 80044f2:	d9f4      	bls.n	80044de <_printf_i+0x11a>
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d10b      	bne.n	8004510 <_printf_i+0x14c>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	07de      	lsls	r6, r3, #31
 80044fc:	d508      	bpl.n	8004510 <_printf_i+0x14c>
 80044fe:	6923      	ldr	r3, [r4, #16]
 8004500:	6861      	ldr	r1, [r4, #4]
 8004502:	4299      	cmp	r1, r3
 8004504:	bfde      	ittt	le
 8004506:	2330      	movle	r3, #48	; 0x30
 8004508:	f805 3c01 	strble.w	r3, [r5, #-1]
 800450c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004510:	1b52      	subs	r2, r2, r5
 8004512:	6122      	str	r2, [r4, #16]
 8004514:	f8cd a000 	str.w	sl, [sp]
 8004518:	464b      	mov	r3, r9
 800451a:	aa03      	add	r2, sp, #12
 800451c:	4621      	mov	r1, r4
 800451e:	4640      	mov	r0, r8
 8004520:	f7ff fee2 	bl	80042e8 <_printf_common>
 8004524:	3001      	adds	r0, #1
 8004526:	d14c      	bne.n	80045c2 <_printf_i+0x1fe>
 8004528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800452c:	b004      	add	sp, #16
 800452e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004532:	4835      	ldr	r0, [pc, #212]	; (8004608 <_printf_i+0x244>)
 8004534:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004538:	6829      	ldr	r1, [r5, #0]
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004540:	6029      	str	r1, [r5, #0]
 8004542:	061d      	lsls	r5, r3, #24
 8004544:	d514      	bpl.n	8004570 <_printf_i+0x1ac>
 8004546:	07df      	lsls	r7, r3, #31
 8004548:	bf44      	itt	mi
 800454a:	f043 0320 	orrmi.w	r3, r3, #32
 800454e:	6023      	strmi	r3, [r4, #0]
 8004550:	b91e      	cbnz	r6, 800455a <_printf_i+0x196>
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	f023 0320 	bic.w	r3, r3, #32
 8004558:	6023      	str	r3, [r4, #0]
 800455a:	2310      	movs	r3, #16
 800455c:	e7b0      	b.n	80044c0 <_printf_i+0xfc>
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	f043 0320 	orr.w	r3, r3, #32
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	2378      	movs	r3, #120	; 0x78
 8004568:	4828      	ldr	r0, [pc, #160]	; (800460c <_printf_i+0x248>)
 800456a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800456e:	e7e3      	b.n	8004538 <_printf_i+0x174>
 8004570:	0659      	lsls	r1, r3, #25
 8004572:	bf48      	it	mi
 8004574:	b2b6      	uxthmi	r6, r6
 8004576:	e7e6      	b.n	8004546 <_printf_i+0x182>
 8004578:	4615      	mov	r5, r2
 800457a:	e7bb      	b.n	80044f4 <_printf_i+0x130>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	6826      	ldr	r6, [r4, #0]
 8004580:	6961      	ldr	r1, [r4, #20]
 8004582:	1d18      	adds	r0, r3, #4
 8004584:	6028      	str	r0, [r5, #0]
 8004586:	0635      	lsls	r5, r6, #24
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	d501      	bpl.n	8004590 <_printf_i+0x1cc>
 800458c:	6019      	str	r1, [r3, #0]
 800458e:	e002      	b.n	8004596 <_printf_i+0x1d2>
 8004590:	0670      	lsls	r0, r6, #25
 8004592:	d5fb      	bpl.n	800458c <_printf_i+0x1c8>
 8004594:	8019      	strh	r1, [r3, #0]
 8004596:	2300      	movs	r3, #0
 8004598:	6123      	str	r3, [r4, #16]
 800459a:	4615      	mov	r5, r2
 800459c:	e7ba      	b.n	8004514 <_printf_i+0x150>
 800459e:	682b      	ldr	r3, [r5, #0]
 80045a0:	1d1a      	adds	r2, r3, #4
 80045a2:	602a      	str	r2, [r5, #0]
 80045a4:	681d      	ldr	r5, [r3, #0]
 80045a6:	6862      	ldr	r2, [r4, #4]
 80045a8:	2100      	movs	r1, #0
 80045aa:	4628      	mov	r0, r5
 80045ac:	f7fb fe28 	bl	8000200 <memchr>
 80045b0:	b108      	cbz	r0, 80045b6 <_printf_i+0x1f2>
 80045b2:	1b40      	subs	r0, r0, r5
 80045b4:	6060      	str	r0, [r4, #4]
 80045b6:	6863      	ldr	r3, [r4, #4]
 80045b8:	6123      	str	r3, [r4, #16]
 80045ba:	2300      	movs	r3, #0
 80045bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045c0:	e7a8      	b.n	8004514 <_printf_i+0x150>
 80045c2:	6923      	ldr	r3, [r4, #16]
 80045c4:	462a      	mov	r2, r5
 80045c6:	4649      	mov	r1, r9
 80045c8:	4640      	mov	r0, r8
 80045ca:	47d0      	blx	sl
 80045cc:	3001      	adds	r0, #1
 80045ce:	d0ab      	beq.n	8004528 <_printf_i+0x164>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	079b      	lsls	r3, r3, #30
 80045d4:	d413      	bmi.n	80045fe <_printf_i+0x23a>
 80045d6:	68e0      	ldr	r0, [r4, #12]
 80045d8:	9b03      	ldr	r3, [sp, #12]
 80045da:	4298      	cmp	r0, r3
 80045dc:	bfb8      	it	lt
 80045de:	4618      	movlt	r0, r3
 80045e0:	e7a4      	b.n	800452c <_printf_i+0x168>
 80045e2:	2301      	movs	r3, #1
 80045e4:	4632      	mov	r2, r6
 80045e6:	4649      	mov	r1, r9
 80045e8:	4640      	mov	r0, r8
 80045ea:	47d0      	blx	sl
 80045ec:	3001      	adds	r0, #1
 80045ee:	d09b      	beq.n	8004528 <_printf_i+0x164>
 80045f0:	3501      	adds	r5, #1
 80045f2:	68e3      	ldr	r3, [r4, #12]
 80045f4:	9903      	ldr	r1, [sp, #12]
 80045f6:	1a5b      	subs	r3, r3, r1
 80045f8:	42ab      	cmp	r3, r5
 80045fa:	dcf2      	bgt.n	80045e2 <_printf_i+0x21e>
 80045fc:	e7eb      	b.n	80045d6 <_printf_i+0x212>
 80045fe:	2500      	movs	r5, #0
 8004600:	f104 0619 	add.w	r6, r4, #25
 8004604:	e7f5      	b.n	80045f2 <_printf_i+0x22e>
 8004606:	bf00      	nop
 8004608:	08005fa1 	.word	0x08005fa1
 800460c:	08005fb2 	.word	0x08005fb2

08004610 <_putc_r>:
 8004610:	b570      	push	{r4, r5, r6, lr}
 8004612:	460d      	mov	r5, r1
 8004614:	4614      	mov	r4, r2
 8004616:	4606      	mov	r6, r0
 8004618:	b118      	cbz	r0, 8004622 <_putc_r+0x12>
 800461a:	6983      	ldr	r3, [r0, #24]
 800461c:	b90b      	cbnz	r3, 8004622 <_putc_r+0x12>
 800461e:	f7ff f9cd 	bl	80039bc <__sinit>
 8004622:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <_putc_r+0x84>)
 8004624:	429c      	cmp	r4, r3
 8004626:	d124      	bne.n	8004672 <_putc_r+0x62>
 8004628:	6874      	ldr	r4, [r6, #4]
 800462a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800462c:	07d8      	lsls	r0, r3, #31
 800462e:	d405      	bmi.n	800463c <_putc_r+0x2c>
 8004630:	89a3      	ldrh	r3, [r4, #12]
 8004632:	0599      	lsls	r1, r3, #22
 8004634:	d402      	bmi.n	800463c <_putc_r+0x2c>
 8004636:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004638:	f7ff fbe8 	bl	8003e0c <__retarget_lock_acquire_recursive>
 800463c:	68a3      	ldr	r3, [r4, #8]
 800463e:	3b01      	subs	r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	60a3      	str	r3, [r4, #8]
 8004644:	da05      	bge.n	8004652 <_putc_r+0x42>
 8004646:	69a2      	ldr	r2, [r4, #24]
 8004648:	4293      	cmp	r3, r2
 800464a:	db1c      	blt.n	8004686 <_putc_r+0x76>
 800464c:	b2eb      	uxtb	r3, r5
 800464e:	2b0a      	cmp	r3, #10
 8004650:	d019      	beq.n	8004686 <_putc_r+0x76>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	6022      	str	r2, [r4, #0]
 8004658:	701d      	strb	r5, [r3, #0]
 800465a:	b2ed      	uxtb	r5, r5
 800465c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800465e:	07da      	lsls	r2, r3, #31
 8004660:	d405      	bmi.n	800466e <_putc_r+0x5e>
 8004662:	89a3      	ldrh	r3, [r4, #12]
 8004664:	059b      	lsls	r3, r3, #22
 8004666:	d402      	bmi.n	800466e <_putc_r+0x5e>
 8004668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800466a:	f7ff fbd1 	bl	8003e10 <__retarget_lock_release_recursive>
 800466e:	4628      	mov	r0, r5
 8004670:	bd70      	pop	{r4, r5, r6, pc}
 8004672:	4b09      	ldr	r3, [pc, #36]	; (8004698 <_putc_r+0x88>)
 8004674:	429c      	cmp	r4, r3
 8004676:	d101      	bne.n	800467c <_putc_r+0x6c>
 8004678:	68b4      	ldr	r4, [r6, #8]
 800467a:	e7d6      	b.n	800462a <_putc_r+0x1a>
 800467c:	4b07      	ldr	r3, [pc, #28]	; (800469c <_putc_r+0x8c>)
 800467e:	429c      	cmp	r4, r3
 8004680:	bf08      	it	eq
 8004682:	68f4      	ldreq	r4, [r6, #12]
 8004684:	e7d1      	b.n	800462a <_putc_r+0x1a>
 8004686:	4629      	mov	r1, r5
 8004688:	4622      	mov	r2, r4
 800468a:	4630      	mov	r0, r6
 800468c:	f000 fb7a 	bl	8004d84 <__swbuf_r>
 8004690:	4605      	mov	r5, r0
 8004692:	e7e3      	b.n	800465c <_putc_r+0x4c>
 8004694:	08005e78 	.word	0x08005e78
 8004698:	08005e98 	.word	0x08005e98
 800469c:	08005e58 	.word	0x08005e58

080046a0 <_sbrk_r>:
 80046a0:	b538      	push	{r3, r4, r5, lr}
 80046a2:	4d06      	ldr	r5, [pc, #24]	; (80046bc <_sbrk_r+0x1c>)
 80046a4:	2300      	movs	r3, #0
 80046a6:	4604      	mov	r4, r0
 80046a8:	4608      	mov	r0, r1
 80046aa:	602b      	str	r3, [r5, #0]
 80046ac:	f7fc fad2 	bl	8000c54 <_sbrk>
 80046b0:	1c43      	adds	r3, r0, #1
 80046b2:	d102      	bne.n	80046ba <_sbrk_r+0x1a>
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	b103      	cbz	r3, 80046ba <_sbrk_r+0x1a>
 80046b8:	6023      	str	r3, [r4, #0]
 80046ba:	bd38      	pop	{r3, r4, r5, pc}
 80046bc:	20000368 	.word	0x20000368

080046c0 <siscanf>:
 80046c0:	b40e      	push	{r1, r2, r3}
 80046c2:	b510      	push	{r4, lr}
 80046c4:	b09f      	sub	sp, #124	; 0x7c
 80046c6:	ac21      	add	r4, sp, #132	; 0x84
 80046c8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80046cc:	f854 2b04 	ldr.w	r2, [r4], #4
 80046d0:	9201      	str	r2, [sp, #4]
 80046d2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80046d6:	9004      	str	r0, [sp, #16]
 80046d8:	9008      	str	r0, [sp, #32]
 80046da:	f7fb fd83 	bl	80001e4 <strlen>
 80046de:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <siscanf+0x50>)
 80046e0:	9005      	str	r0, [sp, #20]
 80046e2:	9009      	str	r0, [sp, #36]	; 0x24
 80046e4:	930d      	str	r3, [sp, #52]	; 0x34
 80046e6:	480b      	ldr	r0, [pc, #44]	; (8004714 <siscanf+0x54>)
 80046e8:	9a01      	ldr	r2, [sp, #4]
 80046ea:	6800      	ldr	r0, [r0, #0]
 80046ec:	9403      	str	r4, [sp, #12]
 80046ee:	2300      	movs	r3, #0
 80046f0:	9311      	str	r3, [sp, #68]	; 0x44
 80046f2:	9316      	str	r3, [sp, #88]	; 0x58
 80046f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80046fc:	a904      	add	r1, sp, #16
 80046fe:	4623      	mov	r3, r4
 8004700:	f000 fe54 	bl	80053ac <__ssvfiscanf_r>
 8004704:	b01f      	add	sp, #124	; 0x7c
 8004706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800470a:	b003      	add	sp, #12
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	0800473b 	.word	0x0800473b
 8004714:	20000028 	.word	0x20000028

08004718 <__sread>:
 8004718:	b510      	push	{r4, lr}
 800471a:	460c      	mov	r4, r1
 800471c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004720:	f001 f90e 	bl	8005940 <_read_r>
 8004724:	2800      	cmp	r0, #0
 8004726:	bfab      	itete	ge
 8004728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800472a:	89a3      	ldrhlt	r3, [r4, #12]
 800472c:	181b      	addge	r3, r3, r0
 800472e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004732:	bfac      	ite	ge
 8004734:	6563      	strge	r3, [r4, #84]	; 0x54
 8004736:	81a3      	strhlt	r3, [r4, #12]
 8004738:	bd10      	pop	{r4, pc}

0800473a <__seofread>:
 800473a:	2000      	movs	r0, #0
 800473c:	4770      	bx	lr

0800473e <__swrite>:
 800473e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004742:	461f      	mov	r7, r3
 8004744:	898b      	ldrh	r3, [r1, #12]
 8004746:	05db      	lsls	r3, r3, #23
 8004748:	4605      	mov	r5, r0
 800474a:	460c      	mov	r4, r1
 800474c:	4616      	mov	r6, r2
 800474e:	d505      	bpl.n	800475c <__swrite+0x1e>
 8004750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004754:	2302      	movs	r3, #2
 8004756:	2200      	movs	r2, #0
 8004758:	f000 fd1a 	bl	8005190 <_lseek_r>
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004762:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004766:	81a3      	strh	r3, [r4, #12]
 8004768:	4632      	mov	r2, r6
 800476a:	463b      	mov	r3, r7
 800476c:	4628      	mov	r0, r5
 800476e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004772:	f000 bb59 	b.w	8004e28 <_write_r>

08004776 <__sseek>:
 8004776:	b510      	push	{r4, lr}
 8004778:	460c      	mov	r4, r1
 800477a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800477e:	f000 fd07 	bl	8005190 <_lseek_r>
 8004782:	1c43      	adds	r3, r0, #1
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	bf15      	itete	ne
 8004788:	6560      	strne	r0, [r4, #84]	; 0x54
 800478a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800478e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004792:	81a3      	strheq	r3, [r4, #12]
 8004794:	bf18      	it	ne
 8004796:	81a3      	strhne	r3, [r4, #12]
 8004798:	bd10      	pop	{r4, pc}

0800479a <__sclose>:
 800479a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800479e:	f000 bbe1 	b.w	8004f64 <_close_r>

080047a2 <strcpy>:
 80047a2:	4603      	mov	r3, r0
 80047a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047a8:	f803 2b01 	strb.w	r2, [r3], #1
 80047ac:	2a00      	cmp	r2, #0
 80047ae:	d1f9      	bne.n	80047a4 <strcpy+0x2>
 80047b0:	4770      	bx	lr

080047b2 <strncmp>:
 80047b2:	b510      	push	{r4, lr}
 80047b4:	b17a      	cbz	r2, 80047d6 <strncmp+0x24>
 80047b6:	4603      	mov	r3, r0
 80047b8:	3901      	subs	r1, #1
 80047ba:	1884      	adds	r4, r0, r2
 80047bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80047c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80047c4:	4290      	cmp	r0, r2
 80047c6:	d101      	bne.n	80047cc <strncmp+0x1a>
 80047c8:	42a3      	cmp	r3, r4
 80047ca:	d101      	bne.n	80047d0 <strncmp+0x1e>
 80047cc:	1a80      	subs	r0, r0, r2
 80047ce:	bd10      	pop	{r4, pc}
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d1f3      	bne.n	80047bc <strncmp+0xa>
 80047d4:	e7fa      	b.n	80047cc <strncmp+0x1a>
 80047d6:	4610      	mov	r0, r2
 80047d8:	e7f9      	b.n	80047ce <strncmp+0x1c>
	...

080047dc <_strtoul_l.constprop.0>:
 80047dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047e0:	4f36      	ldr	r7, [pc, #216]	; (80048bc <_strtoul_l.constprop.0+0xe0>)
 80047e2:	4686      	mov	lr, r0
 80047e4:	460d      	mov	r5, r1
 80047e6:	4628      	mov	r0, r5
 80047e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80047ec:	5de6      	ldrb	r6, [r4, r7]
 80047ee:	f016 0608 	ands.w	r6, r6, #8
 80047f2:	d1f8      	bne.n	80047e6 <_strtoul_l.constprop.0+0xa>
 80047f4:	2c2d      	cmp	r4, #45	; 0x2d
 80047f6:	d12f      	bne.n	8004858 <_strtoul_l.constprop.0+0x7c>
 80047f8:	782c      	ldrb	r4, [r5, #0]
 80047fa:	2601      	movs	r6, #1
 80047fc:	1c85      	adds	r5, r0, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d057      	beq.n	80048b2 <_strtoul_l.constprop.0+0xd6>
 8004802:	2b10      	cmp	r3, #16
 8004804:	d109      	bne.n	800481a <_strtoul_l.constprop.0+0x3e>
 8004806:	2c30      	cmp	r4, #48	; 0x30
 8004808:	d107      	bne.n	800481a <_strtoul_l.constprop.0+0x3e>
 800480a:	7828      	ldrb	r0, [r5, #0]
 800480c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004810:	2858      	cmp	r0, #88	; 0x58
 8004812:	d149      	bne.n	80048a8 <_strtoul_l.constprop.0+0xcc>
 8004814:	786c      	ldrb	r4, [r5, #1]
 8004816:	2310      	movs	r3, #16
 8004818:	3502      	adds	r5, #2
 800481a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800481e:	2700      	movs	r7, #0
 8004820:	fbb8 f8f3 	udiv	r8, r8, r3
 8004824:	fb03 f908 	mul.w	r9, r3, r8
 8004828:	ea6f 0909 	mvn.w	r9, r9
 800482c:	4638      	mov	r0, r7
 800482e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004832:	f1bc 0f09 	cmp.w	ip, #9
 8004836:	d814      	bhi.n	8004862 <_strtoul_l.constprop.0+0x86>
 8004838:	4664      	mov	r4, ip
 800483a:	42a3      	cmp	r3, r4
 800483c:	dd22      	ble.n	8004884 <_strtoul_l.constprop.0+0xa8>
 800483e:	2f00      	cmp	r7, #0
 8004840:	db1d      	blt.n	800487e <_strtoul_l.constprop.0+0xa2>
 8004842:	4580      	cmp	r8, r0
 8004844:	d31b      	bcc.n	800487e <_strtoul_l.constprop.0+0xa2>
 8004846:	d101      	bne.n	800484c <_strtoul_l.constprop.0+0x70>
 8004848:	45a1      	cmp	r9, r4
 800484a:	db18      	blt.n	800487e <_strtoul_l.constprop.0+0xa2>
 800484c:	fb00 4003 	mla	r0, r0, r3, r4
 8004850:	2701      	movs	r7, #1
 8004852:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004856:	e7ea      	b.n	800482e <_strtoul_l.constprop.0+0x52>
 8004858:	2c2b      	cmp	r4, #43	; 0x2b
 800485a:	bf04      	itt	eq
 800485c:	782c      	ldrbeq	r4, [r5, #0]
 800485e:	1c85      	addeq	r5, r0, #2
 8004860:	e7cd      	b.n	80047fe <_strtoul_l.constprop.0+0x22>
 8004862:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004866:	f1bc 0f19 	cmp.w	ip, #25
 800486a:	d801      	bhi.n	8004870 <_strtoul_l.constprop.0+0x94>
 800486c:	3c37      	subs	r4, #55	; 0x37
 800486e:	e7e4      	b.n	800483a <_strtoul_l.constprop.0+0x5e>
 8004870:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004874:	f1bc 0f19 	cmp.w	ip, #25
 8004878:	d804      	bhi.n	8004884 <_strtoul_l.constprop.0+0xa8>
 800487a:	3c57      	subs	r4, #87	; 0x57
 800487c:	e7dd      	b.n	800483a <_strtoul_l.constprop.0+0x5e>
 800487e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004882:	e7e6      	b.n	8004852 <_strtoul_l.constprop.0+0x76>
 8004884:	2f00      	cmp	r7, #0
 8004886:	da07      	bge.n	8004898 <_strtoul_l.constprop.0+0xbc>
 8004888:	2322      	movs	r3, #34	; 0x22
 800488a:	f8ce 3000 	str.w	r3, [lr]
 800488e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004892:	b932      	cbnz	r2, 80048a2 <_strtoul_l.constprop.0+0xc6>
 8004894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004898:	b106      	cbz	r6, 800489c <_strtoul_l.constprop.0+0xc0>
 800489a:	4240      	negs	r0, r0
 800489c:	2a00      	cmp	r2, #0
 800489e:	d0f9      	beq.n	8004894 <_strtoul_l.constprop.0+0xb8>
 80048a0:	b107      	cbz	r7, 80048a4 <_strtoul_l.constprop.0+0xc8>
 80048a2:	1e69      	subs	r1, r5, #1
 80048a4:	6011      	str	r1, [r2, #0]
 80048a6:	e7f5      	b.n	8004894 <_strtoul_l.constprop.0+0xb8>
 80048a8:	2430      	movs	r4, #48	; 0x30
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1b5      	bne.n	800481a <_strtoul_l.constprop.0+0x3e>
 80048ae:	2308      	movs	r3, #8
 80048b0:	e7b3      	b.n	800481a <_strtoul_l.constprop.0+0x3e>
 80048b2:	2c30      	cmp	r4, #48	; 0x30
 80048b4:	d0a9      	beq.n	800480a <_strtoul_l.constprop.0+0x2e>
 80048b6:	230a      	movs	r3, #10
 80048b8:	e7af      	b.n	800481a <_strtoul_l.constprop.0+0x3e>
 80048ba:	bf00      	nop
 80048bc:	08005d55 	.word	0x08005d55

080048c0 <_strtoul_r>:
 80048c0:	f7ff bf8c 	b.w	80047dc <_strtoul_l.constprop.0>

080048c4 <strtoul>:
 80048c4:	4613      	mov	r3, r2
 80048c6:	460a      	mov	r2, r1
 80048c8:	4601      	mov	r1, r0
 80048ca:	4802      	ldr	r0, [pc, #8]	; (80048d4 <strtoul+0x10>)
 80048cc:	6800      	ldr	r0, [r0, #0]
 80048ce:	f7ff bf85 	b.w	80047dc <_strtoul_l.constprop.0>
 80048d2:	bf00      	nop
 80048d4:	20000028 	.word	0x20000028

080048d8 <time>:
 80048d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80048da:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <time+0x30>)
 80048dc:	2200      	movs	r2, #0
 80048de:	4669      	mov	r1, sp
 80048e0:	4604      	mov	r4, r0
 80048e2:	6818      	ldr	r0, [r3, #0]
 80048e4:	f000 fb92 	bl	800500c <_gettimeofday_r>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	bfbe      	ittt	lt
 80048ec:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 80048f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80048f4:	e9cd 2300 	strdlt	r2, r3, [sp]
 80048f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048fc:	b10c      	cbz	r4, 8004902 <time+0x2a>
 80048fe:	e9c4 0100 	strd	r0, r1, [r4]
 8004902:	b004      	add	sp, #16
 8004904:	bd10      	pop	{r4, pc}
 8004906:	bf00      	nop
 8004908:	20000028 	.word	0x20000028

0800490c <__tzcalc_limits>:
 800490c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004910:	4605      	mov	r5, r0
 8004912:	f000 fb8d 	bl	8005030 <__gettzinfo>
 8004916:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800491a:	429d      	cmp	r5, r3
 800491c:	f340 8099 	ble.w	8004a52 <__tzcalc_limits+0x146>
 8004920:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8004924:	18ac      	adds	r4, r5, r2
 8004926:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800492a:	f240 126d 	movw	r2, #365	; 0x16d
 800492e:	10a4      	asrs	r4, r4, #2
 8004930:	fb02 4403 	mla	r4, r2, r3, r4
 8004934:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8004938:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800493c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004940:	441c      	add	r4, r3
 8004942:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004946:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800494a:	fb95 fcf3 	sdiv	ip, r5, r3
 800494e:	fb03 5c1c 	mls	ip, r3, ip, r5
 8004952:	186a      	adds	r2, r5, r1
 8004954:	fabc f68c 	clz	r6, ip
 8004958:	fbb2 f2f3 	udiv	r2, r2, r3
 800495c:	f005 0303 	and.w	r3, r5, #3
 8004960:	4414      	add	r4, r2
 8004962:	2264      	movs	r2, #100	; 0x64
 8004964:	6045      	str	r5, [r0, #4]
 8004966:	fb95 f7f2 	sdiv	r7, r5, r2
 800496a:	0976      	lsrs	r6, r6, #5
 800496c:	fb02 5717 	mls	r7, r2, r7, r5
 8004970:	4601      	mov	r1, r0
 8004972:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	f04f 0a07 	mov.w	sl, #7
 800497c:	7a0d      	ldrb	r5, [r1, #8]
 800497e:	694b      	ldr	r3, [r1, #20]
 8004980:	2d4a      	cmp	r5, #74	; 0x4a
 8004982:	d12d      	bne.n	80049e0 <__tzcalc_limits+0xd4>
 8004984:	9a00      	ldr	r2, [sp, #0]
 8004986:	eb04 0e03 	add.w	lr, r4, r3
 800498a:	b902      	cbnz	r2, 800498e <__tzcalc_limits+0x82>
 800498c:	b917      	cbnz	r7, 8004994 <__tzcalc_limits+0x88>
 800498e:	f1bc 0f00 	cmp.w	ip, #0
 8004992:	d123      	bne.n	80049dc <__tzcalc_limits+0xd0>
 8004994:	2b3b      	cmp	r3, #59	; 0x3b
 8004996:	bfd4      	ite	le
 8004998:	2300      	movle	r3, #0
 800499a:	2301      	movgt	r3, #1
 800499c:	4473      	add	r3, lr
 800499e:	3b01      	subs	r3, #1
 80049a0:	698d      	ldr	r5, [r1, #24]
 80049a2:	4a2d      	ldr	r2, [pc, #180]	; (8004a58 <__tzcalc_limits+0x14c>)
 80049a4:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 80049a8:	fbc3 5e02 	smlal	r5, lr, r3, r2
 80049ac:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80049ae:	18ed      	adds	r5, r5, r3
 80049b0:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 80049b4:	e9c1 5308 	strd	r5, r3, [r1, #32]
 80049b8:	3128      	adds	r1, #40	; 0x28
 80049ba:	458b      	cmp	fp, r1
 80049bc:	d1de      	bne.n	800497c <__tzcalc_limits+0x70>
 80049be:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 80049c2:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 80049c6:	428c      	cmp	r4, r1
 80049c8:	eb72 0303 	sbcs.w	r3, r2, r3
 80049cc:	bfb4      	ite	lt
 80049ce:	2301      	movlt	r3, #1
 80049d0:	2300      	movge	r3, #0
 80049d2:	6003      	str	r3, [r0, #0]
 80049d4:	2001      	movs	r0, #1
 80049d6:	b003      	add	sp, #12
 80049d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049dc:	2300      	movs	r3, #0
 80049de:	e7dd      	b.n	800499c <__tzcalc_limits+0x90>
 80049e0:	2d44      	cmp	r5, #68	; 0x44
 80049e2:	d101      	bne.n	80049e8 <__tzcalc_limits+0xdc>
 80049e4:	4423      	add	r3, r4
 80049e6:	e7db      	b.n	80049a0 <__tzcalc_limits+0x94>
 80049e8:	9a00      	ldr	r2, [sp, #0]
 80049ea:	bb62      	cbnz	r2, 8004a46 <__tzcalc_limits+0x13a>
 80049ec:	2f00      	cmp	r7, #0
 80049ee:	bf0c      	ite	eq
 80049f0:	4635      	moveq	r5, r6
 80049f2:	2501      	movne	r5, #1
 80049f4:	68ca      	ldr	r2, [r1, #12]
 80049f6:	9201      	str	r2, [sp, #4]
 80049f8:	4a18      	ldr	r2, [pc, #96]	; (8004a5c <__tzcalc_limits+0x150>)
 80049fa:	f04f 0930 	mov.w	r9, #48	; 0x30
 80049fe:	fb09 2505 	mla	r5, r9, r5, r2
 8004a02:	46a6      	mov	lr, r4
 8004a04:	f04f 0800 	mov.w	r8, #0
 8004a08:	3d04      	subs	r5, #4
 8004a0a:	9a01      	ldr	r2, [sp, #4]
 8004a0c:	f108 0801 	add.w	r8, r8, #1
 8004a10:	4542      	cmp	r2, r8
 8004a12:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8004a16:	dc18      	bgt.n	8004a4a <__tzcalc_limits+0x13e>
 8004a18:	f10e 0504 	add.w	r5, lr, #4
 8004a1c:	fb95 f8fa 	sdiv	r8, r5, sl
 8004a20:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8004a24:	eba5 0808 	sub.w	r8, r5, r8
 8004a28:	ebb3 0808 	subs.w	r8, r3, r8
 8004a2c:	690b      	ldr	r3, [r1, #16]
 8004a2e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004a32:	bf48      	it	mi
 8004a34:	f108 0807 	addmi.w	r8, r8, #7
 8004a38:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004a3c:	4443      	add	r3, r8
 8004a3e:	454b      	cmp	r3, r9
 8004a40:	da05      	bge.n	8004a4e <__tzcalc_limits+0x142>
 8004a42:	4473      	add	r3, lr
 8004a44:	e7ac      	b.n	80049a0 <__tzcalc_limits+0x94>
 8004a46:	4635      	mov	r5, r6
 8004a48:	e7d4      	b.n	80049f4 <__tzcalc_limits+0xe8>
 8004a4a:	44ce      	add	lr, r9
 8004a4c:	e7dd      	b.n	8004a0a <__tzcalc_limits+0xfe>
 8004a4e:	3b07      	subs	r3, #7
 8004a50:	e7f5      	b.n	8004a3e <__tzcalc_limits+0x132>
 8004a52:	2000      	movs	r0, #0
 8004a54:	e7bf      	b.n	80049d6 <__tzcalc_limits+0xca>
 8004a56:	bf00      	nop
 8004a58:	00015180 	.word	0x00015180
 8004a5c:	08005f30 	.word	0x08005f30

08004a60 <__tz_lock>:
 8004a60:	4801      	ldr	r0, [pc, #4]	; (8004a68 <__tz_lock+0x8>)
 8004a62:	f7ff b9d2 	b.w	8003e0a <__retarget_lock_acquire>
 8004a66:	bf00      	nop
 8004a68:	20000338 	.word	0x20000338

08004a6c <__tz_unlock>:
 8004a6c:	4801      	ldr	r0, [pc, #4]	; (8004a74 <__tz_unlock+0x8>)
 8004a6e:	f7ff b9ce 	b.w	8003e0e <__retarget_lock_release>
 8004a72:	bf00      	nop
 8004a74:	20000338 	.word	0x20000338

08004a78 <_tzset_unlocked>:
 8004a78:	4b01      	ldr	r3, [pc, #4]	; (8004a80 <_tzset_unlocked+0x8>)
 8004a7a:	6818      	ldr	r0, [r3, #0]
 8004a7c:	f000 b802 	b.w	8004a84 <_tzset_unlocked_r>
 8004a80:	20000028 	.word	0x20000028

08004a84 <_tzset_unlocked_r>:
 8004a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a88:	b08d      	sub	sp, #52	; 0x34
 8004a8a:	4607      	mov	r7, r0
 8004a8c:	f000 fad0 	bl	8005030 <__gettzinfo>
 8004a90:	49b0      	ldr	r1, [pc, #704]	; (8004d54 <_tzset_unlocked_r+0x2d0>)
 8004a92:	4eb1      	ldr	r6, [pc, #708]	; (8004d58 <_tzset_unlocked_r+0x2d4>)
 8004a94:	4605      	mov	r5, r0
 8004a96:	4638      	mov	r0, r7
 8004a98:	f000 fab0 	bl	8004ffc <_getenv_r>
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	b970      	cbnz	r0, 8004abe <_tzset_unlocked_r+0x3a>
 8004aa0:	4bae      	ldr	r3, [pc, #696]	; (8004d5c <_tzset_unlocked_r+0x2d8>)
 8004aa2:	4aaf      	ldr	r2, [pc, #700]	; (8004d60 <_tzset_unlocked_r+0x2dc>)
 8004aa4:	6018      	str	r0, [r3, #0]
 8004aa6:	4baf      	ldr	r3, [pc, #700]	; (8004d64 <_tzset_unlocked_r+0x2e0>)
 8004aa8:	6018      	str	r0, [r3, #0]
 8004aaa:	4baf      	ldr	r3, [pc, #700]	; (8004d68 <_tzset_unlocked_r+0x2e4>)
 8004aac:	6830      	ldr	r0, [r6, #0]
 8004aae:	e9c3 2200 	strd	r2, r2, [r3]
 8004ab2:	f7ff f9b7 	bl	8003e24 <free>
 8004ab6:	6034      	str	r4, [r6, #0]
 8004ab8:	b00d      	add	sp, #52	; 0x34
 8004aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004abe:	6831      	ldr	r1, [r6, #0]
 8004ac0:	2900      	cmp	r1, #0
 8004ac2:	d162      	bne.n	8004b8a <_tzset_unlocked_r+0x106>
 8004ac4:	6830      	ldr	r0, [r6, #0]
 8004ac6:	f7ff f9ad 	bl	8003e24 <free>
 8004aca:	4620      	mov	r0, r4
 8004acc:	f7fb fb8a 	bl	80001e4 <strlen>
 8004ad0:	1c41      	adds	r1, r0, #1
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	f7ff fa30 	bl	8003f38 <_malloc_r>
 8004ad8:	6030      	str	r0, [r6, #0]
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d15a      	bne.n	8004b94 <_tzset_unlocked_r+0x110>
 8004ade:	7823      	ldrb	r3, [r4, #0]
 8004ae0:	4aa2      	ldr	r2, [pc, #648]	; (8004d6c <_tzset_unlocked_r+0x2e8>)
 8004ae2:	49a3      	ldr	r1, [pc, #652]	; (8004d70 <_tzset_unlocked_r+0x2ec>)
 8004ae4:	2b3a      	cmp	r3, #58	; 0x3a
 8004ae6:	bf08      	it	eq
 8004ae8:	3401      	addeq	r4, #1
 8004aea:	ae0a      	add	r6, sp, #40	; 0x28
 8004aec:	4633      	mov	r3, r6
 8004aee:	4620      	mov	r0, r4
 8004af0:	f7ff fde6 	bl	80046c0 <siscanf>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	dddf      	ble.n	8004ab8 <_tzset_unlocked_r+0x34>
 8004af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004afa:	18e7      	adds	r7, r4, r3
 8004afc:	5ce3      	ldrb	r3, [r4, r3]
 8004afe:	2b2d      	cmp	r3, #45	; 0x2d
 8004b00:	d14c      	bne.n	8004b9c <_tzset_unlocked_r+0x118>
 8004b02:	3701      	adds	r7, #1
 8004b04:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004b08:	f10d 0a20 	add.w	sl, sp, #32
 8004b0c:	f10d 0b1e 	add.w	fp, sp, #30
 8004b10:	2400      	movs	r4, #0
 8004b12:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8004b16:	4997      	ldr	r1, [pc, #604]	; (8004d74 <_tzset_unlocked_r+0x2f0>)
 8004b18:	9603      	str	r6, [sp, #12]
 8004b1a:	f8cd b000 	str.w	fp, [sp]
 8004b1e:	4633      	mov	r3, r6
 8004b20:	aa07      	add	r2, sp, #28
 8004b22:	4638      	mov	r0, r7
 8004b24:	f8ad 401e 	strh.w	r4, [sp, #30]
 8004b28:	f8ad 4020 	strh.w	r4, [sp, #32]
 8004b2c:	f7ff fdc8 	bl	80046c0 <siscanf>
 8004b30:	42a0      	cmp	r0, r4
 8004b32:	ddc1      	ble.n	8004ab8 <_tzset_unlocked_r+0x34>
 8004b34:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8004b38:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8004b3c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8004d80 <_tzset_unlocked_r+0x2fc>
 8004b40:	213c      	movs	r1, #60	; 0x3c
 8004b42:	fb01 3302 	mla	r3, r1, r2, r3
 8004b46:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8004b4a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004b4e:	fb01 3302 	mla	r3, r1, r2, r3
 8004b52:	fb08 f303 	mul.w	r3, r8, r3
 8004b56:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8004d68 <_tzset_unlocked_r+0x2e4>
 8004b5a:	62ab      	str	r3, [r5, #40]	; 0x28
 8004b5c:	4b83      	ldr	r3, [pc, #524]	; (8004d6c <_tzset_unlocked_r+0x2e8>)
 8004b5e:	f8c8 3000 	str.w	r3, [r8]
 8004b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b64:	4982      	ldr	r1, [pc, #520]	; (8004d70 <_tzset_unlocked_r+0x2ec>)
 8004b66:	441f      	add	r7, r3
 8004b68:	464a      	mov	r2, r9
 8004b6a:	4633      	mov	r3, r6
 8004b6c:	4638      	mov	r0, r7
 8004b6e:	f7ff fda7 	bl	80046c0 <siscanf>
 8004b72:	42a0      	cmp	r0, r4
 8004b74:	dc18      	bgt.n	8004ba8 <_tzset_unlocked_r+0x124>
 8004b76:	f8d8 3000 	ldr.w	r3, [r8]
 8004b7a:	f8c8 3004 	str.w	r3, [r8, #4]
 8004b7e:	4b77      	ldr	r3, [pc, #476]	; (8004d5c <_tzset_unlocked_r+0x2d8>)
 8004b80:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	4b77      	ldr	r3, [pc, #476]	; (8004d64 <_tzset_unlocked_r+0x2e0>)
 8004b86:	601c      	str	r4, [r3, #0]
 8004b88:	e796      	b.n	8004ab8 <_tzset_unlocked_r+0x34>
 8004b8a:	f7fb fb21 	bl	80001d0 <strcmp>
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	d198      	bne.n	8004ac4 <_tzset_unlocked_r+0x40>
 8004b92:	e791      	b.n	8004ab8 <_tzset_unlocked_r+0x34>
 8004b94:	4621      	mov	r1, r4
 8004b96:	f7ff fe04 	bl	80047a2 <strcpy>
 8004b9a:	e7a0      	b.n	8004ade <_tzset_unlocked_r+0x5a>
 8004b9c:	2b2b      	cmp	r3, #43	; 0x2b
 8004b9e:	bf08      	it	eq
 8004ba0:	3701      	addeq	r7, #1
 8004ba2:	f04f 0801 	mov.w	r8, #1
 8004ba6:	e7af      	b.n	8004b08 <_tzset_unlocked_r+0x84>
 8004ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004baa:	f8c8 9004 	str.w	r9, [r8, #4]
 8004bae:	18fc      	adds	r4, r7, r3
 8004bb0:	5cfb      	ldrb	r3, [r7, r3]
 8004bb2:	2b2d      	cmp	r3, #45	; 0x2d
 8004bb4:	f040 808b 	bne.w	8004cce <_tzset_unlocked_r+0x24a>
 8004bb8:	3401      	adds	r4, #1
 8004bba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8004bc4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004bc8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8004bcc:	930a      	str	r3, [sp, #40]	; 0x28
 8004bce:	e9cd a602 	strd	sl, r6, [sp, #8]
 8004bd2:	e9cd b600 	strd	fp, r6, [sp]
 8004bd6:	4967      	ldr	r1, [pc, #412]	; (8004d74 <_tzset_unlocked_r+0x2f0>)
 8004bd8:	4633      	mov	r3, r6
 8004bda:	aa07      	add	r2, sp, #28
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f7ff fd6f 	bl	80046c0 <siscanf>
 8004be2:	2800      	cmp	r0, #0
 8004be4:	dc78      	bgt.n	8004cd8 <_tzset_unlocked_r+0x254>
 8004be6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004be8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8004bec:	652b      	str	r3, [r5, #80]	; 0x50
 8004bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bf0:	462f      	mov	r7, r5
 8004bf2:	441c      	add	r4, r3
 8004bf4:	f04f 0900 	mov.w	r9, #0
 8004bf8:	7823      	ldrb	r3, [r4, #0]
 8004bfa:	2b2c      	cmp	r3, #44	; 0x2c
 8004bfc:	bf08      	it	eq
 8004bfe:	3401      	addeq	r4, #1
 8004c00:	f894 8000 	ldrb.w	r8, [r4]
 8004c04:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8004c08:	d178      	bne.n	8004cfc <_tzset_unlocked_r+0x278>
 8004c0a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8004c0e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8004c12:	ab09      	add	r3, sp, #36	; 0x24
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	4958      	ldr	r1, [pc, #352]	; (8004d78 <_tzset_unlocked_r+0x2f4>)
 8004c18:	9603      	str	r6, [sp, #12]
 8004c1a:	4633      	mov	r3, r6
 8004c1c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8004c20:	4620      	mov	r0, r4
 8004c22:	f7ff fd4d 	bl	80046c0 <siscanf>
 8004c26:	2803      	cmp	r0, #3
 8004c28:	f47f af46 	bne.w	8004ab8 <_tzset_unlocked_r+0x34>
 8004c2c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8004c30:	1e4b      	subs	r3, r1, #1
 8004c32:	2b0b      	cmp	r3, #11
 8004c34:	f63f af40 	bhi.w	8004ab8 <_tzset_unlocked_r+0x34>
 8004c38:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8004c3c:	1e53      	subs	r3, r2, #1
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	f63f af3a 	bhi.w	8004ab8 <_tzset_unlocked_r+0x34>
 8004c44:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8004c48:	2b06      	cmp	r3, #6
 8004c4a:	f63f af35 	bhi.w	8004ab8 <_tzset_unlocked_r+0x34>
 8004c4e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8004c52:	f887 8008 	strb.w	r8, [r7, #8]
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c5a:	eb04 0803 	add.w	r8, r4, r3
 8004c5e:	2302      	movs	r3, #2
 8004c60:	f8ad 301c 	strh.w	r3, [sp, #28]
 8004c64:	2300      	movs	r3, #0
 8004c66:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004c6a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8004c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8004c70:	f898 3000 	ldrb.w	r3, [r8]
 8004c74:	2b2f      	cmp	r3, #47	; 0x2f
 8004c76:	d109      	bne.n	8004c8c <_tzset_unlocked_r+0x208>
 8004c78:	e9cd a602 	strd	sl, r6, [sp, #8]
 8004c7c:	e9cd b600 	strd	fp, r6, [sp]
 8004c80:	493e      	ldr	r1, [pc, #248]	; (8004d7c <_tzset_unlocked_r+0x2f8>)
 8004c82:	4633      	mov	r3, r6
 8004c84:	aa07      	add	r2, sp, #28
 8004c86:	4640      	mov	r0, r8
 8004c88:	f7ff fd1a 	bl	80046c0 <siscanf>
 8004c8c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8004c90:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8004c94:	213c      	movs	r1, #60	; 0x3c
 8004c96:	fb01 3302 	mla	r3, r1, r2, r3
 8004c9a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8004c9e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004ca2:	fb01 3302 	mla	r3, r1, r2, r3
 8004ca6:	61bb      	str	r3, [r7, #24]
 8004ca8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004caa:	3728      	adds	r7, #40	; 0x28
 8004cac:	4444      	add	r4, r8
 8004cae:	f1b9 0f00 	cmp.w	r9, #0
 8004cb2:	d020      	beq.n	8004cf6 <_tzset_unlocked_r+0x272>
 8004cb4:	6868      	ldr	r0, [r5, #4]
 8004cb6:	f7ff fe29 	bl	800490c <__tzcalc_limits>
 8004cba:	4b28      	ldr	r3, [pc, #160]	; (8004d5c <_tzset_unlocked_r+0x2d8>)
 8004cbc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004cc2:	1a9b      	subs	r3, r3, r2
 8004cc4:	4a27      	ldr	r2, [pc, #156]	; (8004d64 <_tzset_unlocked_r+0x2e0>)
 8004cc6:	bf18      	it	ne
 8004cc8:	2301      	movne	r3, #1
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	e6f4      	b.n	8004ab8 <_tzset_unlocked_r+0x34>
 8004cce:	2b2b      	cmp	r3, #43	; 0x2b
 8004cd0:	bf08      	it	eq
 8004cd2:	3401      	addeq	r4, #1
 8004cd4:	2701      	movs	r7, #1
 8004cd6:	e772      	b.n	8004bbe <_tzset_unlocked_r+0x13a>
 8004cd8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8004cdc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8004ce0:	213c      	movs	r1, #60	; 0x3c
 8004ce2:	fb01 3302 	mla	r3, r1, r2, r3
 8004ce6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8004cea:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004cee:	fb01 3302 	mla	r3, r1, r2, r3
 8004cf2:	437b      	muls	r3, r7
 8004cf4:	e77a      	b.n	8004bec <_tzset_unlocked_r+0x168>
 8004cf6:	f04f 0901 	mov.w	r9, #1
 8004cfa:	e77d      	b.n	8004bf8 <_tzset_unlocked_r+0x174>
 8004cfc:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8004d00:	bf06      	itte	eq
 8004d02:	3401      	addeq	r4, #1
 8004d04:	4643      	moveq	r3, r8
 8004d06:	2344      	movne	r3, #68	; 0x44
 8004d08:	220a      	movs	r2, #10
 8004d0a:	a90b      	add	r1, sp, #44	; 0x2c
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	9305      	str	r3, [sp, #20]
 8004d10:	f7ff fdd8 	bl	80048c4 <strtoul>
 8004d14:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8004d18:	9b05      	ldr	r3, [sp, #20]
 8004d1a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8004d1e:	45a0      	cmp	r8, r4
 8004d20:	d114      	bne.n	8004d4c <_tzset_unlocked_r+0x2c8>
 8004d22:	234d      	movs	r3, #77	; 0x4d
 8004d24:	f1b9 0f00 	cmp.w	r9, #0
 8004d28:	d107      	bne.n	8004d3a <_tzset_unlocked_r+0x2b6>
 8004d2a:	722b      	strb	r3, [r5, #8]
 8004d2c:	2103      	movs	r1, #3
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8004d34:	f8c5 9014 	str.w	r9, [r5, #20]
 8004d38:	e791      	b.n	8004c5e <_tzset_unlocked_r+0x1da>
 8004d3a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8004d3e:	220b      	movs	r2, #11
 8004d40:	2301      	movs	r3, #1
 8004d42:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8004d46:	2300      	movs	r3, #0
 8004d48:	63eb      	str	r3, [r5, #60]	; 0x3c
 8004d4a:	e788      	b.n	8004c5e <_tzset_unlocked_r+0x1da>
 8004d4c:	b280      	uxth	r0, r0
 8004d4e:	723b      	strb	r3, [r7, #8]
 8004d50:	6178      	str	r0, [r7, #20]
 8004d52:	e784      	b.n	8004c5e <_tzset_unlocked_r+0x1da>
 8004d54:	08005fc3 	.word	0x08005fc3
 8004d58:	2000035c 	.word	0x2000035c
 8004d5c:	20000364 	.word	0x20000364
 8004d60:	08005fc6 	.word	0x08005fc6
 8004d64:	20000360 	.word	0x20000360
 8004d68:	2000008c 	.word	0x2000008c
 8004d6c:	2000034f 	.word	0x2000034f
 8004d70:	08005fca 	.word	0x08005fca
 8004d74:	08005fed 	.word	0x08005fed
 8004d78:	08005fd9 	.word	0x08005fd9
 8004d7c:	08005fec 	.word	0x08005fec
 8004d80:	20000344 	.word	0x20000344

08004d84 <__swbuf_r>:
 8004d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d86:	460e      	mov	r6, r1
 8004d88:	4614      	mov	r4, r2
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	b118      	cbz	r0, 8004d96 <__swbuf_r+0x12>
 8004d8e:	6983      	ldr	r3, [r0, #24]
 8004d90:	b90b      	cbnz	r3, 8004d96 <__swbuf_r+0x12>
 8004d92:	f7fe fe13 	bl	80039bc <__sinit>
 8004d96:	4b21      	ldr	r3, [pc, #132]	; (8004e1c <__swbuf_r+0x98>)
 8004d98:	429c      	cmp	r4, r3
 8004d9a:	d12b      	bne.n	8004df4 <__swbuf_r+0x70>
 8004d9c:	686c      	ldr	r4, [r5, #4]
 8004d9e:	69a3      	ldr	r3, [r4, #24]
 8004da0:	60a3      	str	r3, [r4, #8]
 8004da2:	89a3      	ldrh	r3, [r4, #12]
 8004da4:	071a      	lsls	r2, r3, #28
 8004da6:	d52f      	bpl.n	8004e08 <__swbuf_r+0x84>
 8004da8:	6923      	ldr	r3, [r4, #16]
 8004daa:	b36b      	cbz	r3, 8004e08 <__swbuf_r+0x84>
 8004dac:	6923      	ldr	r3, [r4, #16]
 8004dae:	6820      	ldr	r0, [r4, #0]
 8004db0:	1ac0      	subs	r0, r0, r3
 8004db2:	6963      	ldr	r3, [r4, #20]
 8004db4:	b2f6      	uxtb	r6, r6
 8004db6:	4283      	cmp	r3, r0
 8004db8:	4637      	mov	r7, r6
 8004dba:	dc04      	bgt.n	8004dc6 <__swbuf_r+0x42>
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f7fe fd56 	bl	8003870 <_fflush_r>
 8004dc4:	bb30      	cbnz	r0, 8004e14 <__swbuf_r+0x90>
 8004dc6:	68a3      	ldr	r3, [r4, #8]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	60a3      	str	r3, [r4, #8]
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	6022      	str	r2, [r4, #0]
 8004dd2:	701e      	strb	r6, [r3, #0]
 8004dd4:	6963      	ldr	r3, [r4, #20]
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	4283      	cmp	r3, r0
 8004dda:	d004      	beq.n	8004de6 <__swbuf_r+0x62>
 8004ddc:	89a3      	ldrh	r3, [r4, #12]
 8004dde:	07db      	lsls	r3, r3, #31
 8004de0:	d506      	bpl.n	8004df0 <__swbuf_r+0x6c>
 8004de2:	2e0a      	cmp	r6, #10
 8004de4:	d104      	bne.n	8004df0 <__swbuf_r+0x6c>
 8004de6:	4621      	mov	r1, r4
 8004de8:	4628      	mov	r0, r5
 8004dea:	f7fe fd41 	bl	8003870 <_fflush_r>
 8004dee:	b988      	cbnz	r0, 8004e14 <__swbuf_r+0x90>
 8004df0:	4638      	mov	r0, r7
 8004df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004df4:	4b0a      	ldr	r3, [pc, #40]	; (8004e20 <__swbuf_r+0x9c>)
 8004df6:	429c      	cmp	r4, r3
 8004df8:	d101      	bne.n	8004dfe <__swbuf_r+0x7a>
 8004dfa:	68ac      	ldr	r4, [r5, #8]
 8004dfc:	e7cf      	b.n	8004d9e <__swbuf_r+0x1a>
 8004dfe:	4b09      	ldr	r3, [pc, #36]	; (8004e24 <__swbuf_r+0xa0>)
 8004e00:	429c      	cmp	r4, r3
 8004e02:	bf08      	it	eq
 8004e04:	68ec      	ldreq	r4, [r5, #12]
 8004e06:	e7ca      	b.n	8004d9e <__swbuf_r+0x1a>
 8004e08:	4621      	mov	r1, r4
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	f000 f81e 	bl	8004e4c <__swsetup_r>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d0cb      	beq.n	8004dac <__swbuf_r+0x28>
 8004e14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004e18:	e7ea      	b.n	8004df0 <__swbuf_r+0x6c>
 8004e1a:	bf00      	nop
 8004e1c:	08005e78 	.word	0x08005e78
 8004e20:	08005e98 	.word	0x08005e98
 8004e24:	08005e58 	.word	0x08005e58

08004e28 <_write_r>:
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	4d07      	ldr	r5, [pc, #28]	; (8004e48 <_write_r+0x20>)
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	4608      	mov	r0, r1
 8004e30:	4611      	mov	r1, r2
 8004e32:	2200      	movs	r2, #0
 8004e34:	602a      	str	r2, [r5, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	f7fb fd06 	bl	8000848 <_write>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d102      	bne.n	8004e46 <_write_r+0x1e>
 8004e40:	682b      	ldr	r3, [r5, #0]
 8004e42:	b103      	cbz	r3, 8004e46 <_write_r+0x1e>
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	bd38      	pop	{r3, r4, r5, pc}
 8004e48:	20000368 	.word	0x20000368

08004e4c <__swsetup_r>:
 8004e4c:	4b32      	ldr	r3, [pc, #200]	; (8004f18 <__swsetup_r+0xcc>)
 8004e4e:	b570      	push	{r4, r5, r6, lr}
 8004e50:	681d      	ldr	r5, [r3, #0]
 8004e52:	4606      	mov	r6, r0
 8004e54:	460c      	mov	r4, r1
 8004e56:	b125      	cbz	r5, 8004e62 <__swsetup_r+0x16>
 8004e58:	69ab      	ldr	r3, [r5, #24]
 8004e5a:	b913      	cbnz	r3, 8004e62 <__swsetup_r+0x16>
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	f7fe fdad 	bl	80039bc <__sinit>
 8004e62:	4b2e      	ldr	r3, [pc, #184]	; (8004f1c <__swsetup_r+0xd0>)
 8004e64:	429c      	cmp	r4, r3
 8004e66:	d10f      	bne.n	8004e88 <__swsetup_r+0x3c>
 8004e68:	686c      	ldr	r4, [r5, #4]
 8004e6a:	89a3      	ldrh	r3, [r4, #12]
 8004e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e70:	0719      	lsls	r1, r3, #28
 8004e72:	d42c      	bmi.n	8004ece <__swsetup_r+0x82>
 8004e74:	06dd      	lsls	r5, r3, #27
 8004e76:	d411      	bmi.n	8004e9c <__swsetup_r+0x50>
 8004e78:	2309      	movs	r3, #9
 8004e7a:	6033      	str	r3, [r6, #0]
 8004e7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e80:	81a3      	strh	r3, [r4, #12]
 8004e82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e86:	e03e      	b.n	8004f06 <__swsetup_r+0xba>
 8004e88:	4b25      	ldr	r3, [pc, #148]	; (8004f20 <__swsetup_r+0xd4>)
 8004e8a:	429c      	cmp	r4, r3
 8004e8c:	d101      	bne.n	8004e92 <__swsetup_r+0x46>
 8004e8e:	68ac      	ldr	r4, [r5, #8]
 8004e90:	e7eb      	b.n	8004e6a <__swsetup_r+0x1e>
 8004e92:	4b24      	ldr	r3, [pc, #144]	; (8004f24 <__swsetup_r+0xd8>)
 8004e94:	429c      	cmp	r4, r3
 8004e96:	bf08      	it	eq
 8004e98:	68ec      	ldreq	r4, [r5, #12]
 8004e9a:	e7e6      	b.n	8004e6a <__swsetup_r+0x1e>
 8004e9c:	0758      	lsls	r0, r3, #29
 8004e9e:	d512      	bpl.n	8004ec6 <__swsetup_r+0x7a>
 8004ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ea2:	b141      	cbz	r1, 8004eb6 <__swsetup_r+0x6a>
 8004ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ea8:	4299      	cmp	r1, r3
 8004eaa:	d002      	beq.n	8004eb2 <__swsetup_r+0x66>
 8004eac:	4630      	mov	r0, r6
 8004eae:	f7fe ffd7 	bl	8003e60 <_free_r>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	6363      	str	r3, [r4, #52]	; 0x34
 8004eb6:	89a3      	ldrh	r3, [r4, #12]
 8004eb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ebc:	81a3      	strh	r3, [r4, #12]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	6063      	str	r3, [r4, #4]
 8004ec2:	6923      	ldr	r3, [r4, #16]
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	89a3      	ldrh	r3, [r4, #12]
 8004ec8:	f043 0308 	orr.w	r3, r3, #8
 8004ecc:	81a3      	strh	r3, [r4, #12]
 8004ece:	6923      	ldr	r3, [r4, #16]
 8004ed0:	b94b      	cbnz	r3, 8004ee6 <__swsetup_r+0x9a>
 8004ed2:	89a3      	ldrh	r3, [r4, #12]
 8004ed4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004edc:	d003      	beq.n	8004ee6 <__swsetup_r+0x9a>
 8004ede:	4621      	mov	r1, r4
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f000 f98d 	bl	8005200 <__smakebuf_r>
 8004ee6:	89a0      	ldrh	r0, [r4, #12]
 8004ee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004eec:	f010 0301 	ands.w	r3, r0, #1
 8004ef0:	d00a      	beq.n	8004f08 <__swsetup_r+0xbc>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60a3      	str	r3, [r4, #8]
 8004ef6:	6963      	ldr	r3, [r4, #20]
 8004ef8:	425b      	negs	r3, r3
 8004efa:	61a3      	str	r3, [r4, #24]
 8004efc:	6923      	ldr	r3, [r4, #16]
 8004efe:	b943      	cbnz	r3, 8004f12 <__swsetup_r+0xc6>
 8004f00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f04:	d1ba      	bne.n	8004e7c <__swsetup_r+0x30>
 8004f06:	bd70      	pop	{r4, r5, r6, pc}
 8004f08:	0781      	lsls	r1, r0, #30
 8004f0a:	bf58      	it	pl
 8004f0c:	6963      	ldrpl	r3, [r4, #20]
 8004f0e:	60a3      	str	r3, [r4, #8]
 8004f10:	e7f4      	b.n	8004efc <__swsetup_r+0xb0>
 8004f12:	2000      	movs	r0, #0
 8004f14:	e7f7      	b.n	8004f06 <__swsetup_r+0xba>
 8004f16:	bf00      	nop
 8004f18:	20000028 	.word	0x20000028
 8004f1c:	08005e78 	.word	0x08005e78
 8004f20:	08005e98 	.word	0x08005e98
 8004f24:	08005e58 	.word	0x08005e58

08004f28 <__assert_func>:
 8004f28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f2a:	4614      	mov	r4, r2
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <__assert_func+0x2c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4605      	mov	r5, r0
 8004f34:	68d8      	ldr	r0, [r3, #12]
 8004f36:	b14c      	cbz	r4, 8004f4c <__assert_func+0x24>
 8004f38:	4b07      	ldr	r3, [pc, #28]	; (8004f58 <__assert_func+0x30>)
 8004f3a:	9100      	str	r1, [sp, #0]
 8004f3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f40:	4906      	ldr	r1, [pc, #24]	; (8004f5c <__assert_func+0x34>)
 8004f42:	462b      	mov	r3, r5
 8004f44:	f7fe fdb8 	bl	8003ab8 <fiprintf>
 8004f48:	f000 fe02 	bl	8005b50 <abort>
 8004f4c:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <__assert_func+0x38>)
 8004f4e:	461c      	mov	r4, r3
 8004f50:	e7f3      	b.n	8004f3a <__assert_func+0x12>
 8004f52:	bf00      	nop
 8004f54:	20000028 	.word	0x20000028
 8004f58:	08005fff 	.word	0x08005fff
 8004f5c:	0800600c 	.word	0x0800600c
 8004f60:	0800603a 	.word	0x0800603a

08004f64 <_close_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	4d06      	ldr	r5, [pc, #24]	; (8004f80 <_close_r+0x1c>)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	4608      	mov	r0, r1
 8004f6e:	602b      	str	r3, [r5, #0]
 8004f70:	f7fb fe3c 	bl	8000bec <_close>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d102      	bne.n	8004f7e <_close_r+0x1a>
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	b103      	cbz	r3, 8004f7e <_close_r+0x1a>
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	20000368 	.word	0x20000368

08004f84 <_findenv_r>:
 8004f84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f88:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8004ff8 <_findenv_r+0x74>
 8004f8c:	4607      	mov	r7, r0
 8004f8e:	4689      	mov	r9, r1
 8004f90:	4616      	mov	r6, r2
 8004f92:	f000 fde5 	bl	8005b60 <__env_lock>
 8004f96:	f8da 4000 	ldr.w	r4, [sl]
 8004f9a:	b134      	cbz	r4, 8004faa <_findenv_r+0x26>
 8004f9c:	464b      	mov	r3, r9
 8004f9e:	4698      	mov	r8, r3
 8004fa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fa4:	b13a      	cbz	r2, 8004fb6 <_findenv_r+0x32>
 8004fa6:	2a3d      	cmp	r2, #61	; 0x3d
 8004fa8:	d1f9      	bne.n	8004f9e <_findenv_r+0x1a>
 8004faa:	4638      	mov	r0, r7
 8004fac:	f000 fdde 	bl	8005b6c <__env_unlock>
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb6:	eba8 0809 	sub.w	r8, r8, r9
 8004fba:	46a3      	mov	fp, r4
 8004fbc:	f854 0b04 	ldr.w	r0, [r4], #4
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	d0f2      	beq.n	8004faa <_findenv_r+0x26>
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	f7ff fbf3 	bl	80047b2 <strncmp>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d1f4      	bne.n	8004fba <_findenv_r+0x36>
 8004fd0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004fd4:	eb03 0508 	add.w	r5, r3, r8
 8004fd8:	f813 3008 	ldrb.w	r3, [r3, r8]
 8004fdc:	2b3d      	cmp	r3, #61	; 0x3d
 8004fde:	d1ec      	bne.n	8004fba <_findenv_r+0x36>
 8004fe0:	f8da 3000 	ldr.w	r3, [sl]
 8004fe4:	ebab 0303 	sub.w	r3, fp, r3
 8004fe8:	109b      	asrs	r3, r3, #2
 8004fea:	4638      	mov	r0, r7
 8004fec:	6033      	str	r3, [r6, #0]
 8004fee:	f000 fdbd 	bl	8005b6c <__env_unlock>
 8004ff2:	1c68      	adds	r0, r5, #1
 8004ff4:	e7dd      	b.n	8004fb2 <_findenv_r+0x2e>
 8004ff6:	bf00      	nop
 8004ff8:	20000018 	.word	0x20000018

08004ffc <_getenv_r>:
 8004ffc:	b507      	push	{r0, r1, r2, lr}
 8004ffe:	aa01      	add	r2, sp, #4
 8005000:	f7ff ffc0 	bl	8004f84 <_findenv_r>
 8005004:	b003      	add	sp, #12
 8005006:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800500c <_gettimeofday_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	4d07      	ldr	r5, [pc, #28]	; (800502c <_gettimeofday_r+0x20>)
 8005010:	2300      	movs	r3, #0
 8005012:	4604      	mov	r4, r0
 8005014:	4608      	mov	r0, r1
 8005016:	4611      	mov	r1, r2
 8005018:	602b      	str	r3, [r5, #0]
 800501a:	f000 fe1b 	bl	8005c54 <_gettimeofday>
 800501e:	1c43      	adds	r3, r0, #1
 8005020:	d102      	bne.n	8005028 <_gettimeofday_r+0x1c>
 8005022:	682b      	ldr	r3, [r5, #0]
 8005024:	b103      	cbz	r3, 8005028 <_gettimeofday_r+0x1c>
 8005026:	6023      	str	r3, [r4, #0]
 8005028:	bd38      	pop	{r3, r4, r5, pc}
 800502a:	bf00      	nop
 800502c:	20000368 	.word	0x20000368

08005030 <__gettzinfo>:
 8005030:	4800      	ldr	r0, [pc, #0]	; (8005034 <__gettzinfo+0x4>)
 8005032:	4770      	bx	lr
 8005034:	20000098 	.word	0x20000098

08005038 <gmtime_r>:
 8005038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800503c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8005040:	460c      	mov	r4, r1
 8005042:	4a4f      	ldr	r2, [pc, #316]	; (8005180 <gmtime_r+0x148>)
 8005044:	2300      	movs	r3, #0
 8005046:	4630      	mov	r0, r6
 8005048:	4639      	mov	r1, r7
 800504a:	f7fb f929 	bl	80002a0 <__aeabi_ldivmod>
 800504e:	4639      	mov	r1, r7
 8005050:	4605      	mov	r5, r0
 8005052:	4a4b      	ldr	r2, [pc, #300]	; (8005180 <gmtime_r+0x148>)
 8005054:	4630      	mov	r0, r6
 8005056:	2300      	movs	r3, #0
 8005058:	f7fb f922 	bl	80002a0 <__aeabi_ldivmod>
 800505c:	2a00      	cmp	r2, #0
 800505e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8005062:	bfb7      	itett	lt
 8005064:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8005068:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800506c:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8005070:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8005074:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8005078:	fbb2 f1f0 	udiv	r1, r2, r0
 800507c:	fb00 2211 	mls	r2, r0, r1, r2
 8005080:	203c      	movs	r0, #60	; 0x3c
 8005082:	60a1      	str	r1, [r4, #8]
 8005084:	fbb2 f1f0 	udiv	r1, r2, r0
 8005088:	fb00 2211 	mls	r2, r0, r1, r2
 800508c:	6061      	str	r1, [r4, #4]
 800508e:	6022      	str	r2, [r4, #0]
 8005090:	2107      	movs	r1, #7
 8005092:	1cda      	adds	r2, r3, #3
 8005094:	fb92 f1f1 	sdiv	r1, r2, r1
 8005098:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800509c:	1a52      	subs	r2, r2, r1
 800509e:	bf48      	it	mi
 80050a0:	3207      	addmi	r2, #7
 80050a2:	4d38      	ldr	r5, [pc, #224]	; (8005184 <gmtime_r+0x14c>)
 80050a4:	4838      	ldr	r0, [pc, #224]	; (8005188 <gmtime_r+0x150>)
 80050a6:	61a2      	str	r2, [r4, #24]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	bfb7      	itett	lt
 80050ac:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 80050b0:	fb93 f5f5 	sdivge	r5, r3, r5
 80050b4:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 80050b8:	fb92 f5f5 	sdivlt	r5, r2, r5
 80050bc:	fb00 3005 	mla	r0, r0, r5, r3
 80050c0:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80050c4:	fbb0 f2f2 	udiv	r2, r0, r2
 80050c8:	4402      	add	r2, r0
 80050ca:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80050ce:	fbb0 f1f3 	udiv	r1, r0, r3
 80050d2:	1a52      	subs	r2, r2, r1
 80050d4:	f240 1c6d 	movw	ip, #365	; 0x16d
 80050d8:	492c      	ldr	r1, [pc, #176]	; (800518c <gmtime_r+0x154>)
 80050da:	fbb0 f1f1 	udiv	r1, r0, r1
 80050de:	2764      	movs	r7, #100	; 0x64
 80050e0:	1a52      	subs	r2, r2, r1
 80050e2:	fbb2 f1fc 	udiv	r1, r2, ip
 80050e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ea:	fbb1 f6f7 	udiv	r6, r1, r7
 80050ee:	1af3      	subs	r3, r6, r3
 80050f0:	4403      	add	r3, r0
 80050f2:	fb0c 3311 	mls	r3, ip, r1, r3
 80050f6:	2299      	movs	r2, #153	; 0x99
 80050f8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 80050fc:	f10e 0e02 	add.w	lr, lr, #2
 8005100:	f103 0c01 	add.w	ip, r3, #1
 8005104:	fbbe f0f2 	udiv	r0, lr, r2
 8005108:	4342      	muls	r2, r0
 800510a:	3202      	adds	r2, #2
 800510c:	f04f 0805 	mov.w	r8, #5
 8005110:	fbb2 f2f8 	udiv	r2, r2, r8
 8005114:	ebac 0c02 	sub.w	ip, ip, r2
 8005118:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800511c:	4596      	cmp	lr, r2
 800511e:	bf94      	ite	ls
 8005120:	2202      	movls	r2, #2
 8005122:	f06f 0209 	mvnhi.w	r2, #9
 8005126:	4410      	add	r0, r2
 8005128:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800512c:	fb02 1505 	mla	r5, r2, r5, r1
 8005130:	2801      	cmp	r0, #1
 8005132:	bf98      	it	ls
 8005134:	3501      	addls	r5, #1
 8005136:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800513a:	d30d      	bcc.n	8005158 <gmtime_r+0x120>
 800513c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005140:	61e3      	str	r3, [r4, #28]
 8005142:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8005146:	2300      	movs	r3, #0
 8005148:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800514c:	f8c4 c00c 	str.w	ip, [r4, #12]
 8005150:	6223      	str	r3, [r4, #32]
 8005152:	4620      	mov	r0, r4
 8005154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005158:	078a      	lsls	r2, r1, #30
 800515a:	d102      	bne.n	8005162 <gmtime_r+0x12a>
 800515c:	fb07 1616 	mls	r6, r7, r6, r1
 8005160:	b95e      	cbnz	r6, 800517a <gmtime_r+0x142>
 8005162:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005166:	fbb1 f6f2 	udiv	r6, r1, r2
 800516a:	fb02 1216 	mls	r2, r2, r6, r1
 800516e:	fab2 f282 	clz	r2, r2
 8005172:	0952      	lsrs	r2, r2, #5
 8005174:	333b      	adds	r3, #59	; 0x3b
 8005176:	4413      	add	r3, r2
 8005178:	e7e2      	b.n	8005140 <gmtime_r+0x108>
 800517a:	2201      	movs	r2, #1
 800517c:	e7fa      	b.n	8005174 <gmtime_r+0x13c>
 800517e:	bf00      	nop
 8005180:	00015180 	.word	0x00015180
 8005184:	00023ab1 	.word	0x00023ab1
 8005188:	fffdc54f 	.word	0xfffdc54f
 800518c:	00023ab0 	.word	0x00023ab0

08005190 <_lseek_r>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	4d07      	ldr	r5, [pc, #28]	; (80051b0 <_lseek_r+0x20>)
 8005194:	4604      	mov	r4, r0
 8005196:	4608      	mov	r0, r1
 8005198:	4611      	mov	r1, r2
 800519a:	2200      	movs	r2, #0
 800519c:	602a      	str	r2, [r5, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	f7fb fd4b 	bl	8000c3a <_lseek>
 80051a4:	1c43      	adds	r3, r0, #1
 80051a6:	d102      	bne.n	80051ae <_lseek_r+0x1e>
 80051a8:	682b      	ldr	r3, [r5, #0]
 80051aa:	b103      	cbz	r3, 80051ae <_lseek_r+0x1e>
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	bd38      	pop	{r3, r4, r5, pc}
 80051b0:	20000368 	.word	0x20000368

080051b4 <__swhatbuf_r>:
 80051b4:	b570      	push	{r4, r5, r6, lr}
 80051b6:	460e      	mov	r6, r1
 80051b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051bc:	2900      	cmp	r1, #0
 80051be:	b096      	sub	sp, #88	; 0x58
 80051c0:	4614      	mov	r4, r2
 80051c2:	461d      	mov	r5, r3
 80051c4:	da08      	bge.n	80051d8 <__swhatbuf_r+0x24>
 80051c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	602a      	str	r2, [r5, #0]
 80051ce:	061a      	lsls	r2, r3, #24
 80051d0:	d410      	bmi.n	80051f4 <__swhatbuf_r+0x40>
 80051d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051d6:	e00e      	b.n	80051f6 <__swhatbuf_r+0x42>
 80051d8:	466a      	mov	r2, sp
 80051da:	f000 fccd 	bl	8005b78 <_fstat_r>
 80051de:	2800      	cmp	r0, #0
 80051e0:	dbf1      	blt.n	80051c6 <__swhatbuf_r+0x12>
 80051e2:	9a01      	ldr	r2, [sp, #4]
 80051e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80051e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80051ec:	425a      	negs	r2, r3
 80051ee:	415a      	adcs	r2, r3
 80051f0:	602a      	str	r2, [r5, #0]
 80051f2:	e7ee      	b.n	80051d2 <__swhatbuf_r+0x1e>
 80051f4:	2340      	movs	r3, #64	; 0x40
 80051f6:	2000      	movs	r0, #0
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	b016      	add	sp, #88	; 0x58
 80051fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08005200 <__smakebuf_r>:
 8005200:	898b      	ldrh	r3, [r1, #12]
 8005202:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005204:	079d      	lsls	r5, r3, #30
 8005206:	4606      	mov	r6, r0
 8005208:	460c      	mov	r4, r1
 800520a:	d507      	bpl.n	800521c <__smakebuf_r+0x1c>
 800520c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	6123      	str	r3, [r4, #16]
 8005214:	2301      	movs	r3, #1
 8005216:	6163      	str	r3, [r4, #20]
 8005218:	b002      	add	sp, #8
 800521a:	bd70      	pop	{r4, r5, r6, pc}
 800521c:	ab01      	add	r3, sp, #4
 800521e:	466a      	mov	r2, sp
 8005220:	f7ff ffc8 	bl	80051b4 <__swhatbuf_r>
 8005224:	9900      	ldr	r1, [sp, #0]
 8005226:	4605      	mov	r5, r0
 8005228:	4630      	mov	r0, r6
 800522a:	f7fe fe85 	bl	8003f38 <_malloc_r>
 800522e:	b948      	cbnz	r0, 8005244 <__smakebuf_r+0x44>
 8005230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005234:	059a      	lsls	r2, r3, #22
 8005236:	d4ef      	bmi.n	8005218 <__smakebuf_r+0x18>
 8005238:	f023 0303 	bic.w	r3, r3, #3
 800523c:	f043 0302 	orr.w	r3, r3, #2
 8005240:	81a3      	strh	r3, [r4, #12]
 8005242:	e7e3      	b.n	800520c <__smakebuf_r+0xc>
 8005244:	4b0d      	ldr	r3, [pc, #52]	; (800527c <__smakebuf_r+0x7c>)
 8005246:	62b3      	str	r3, [r6, #40]	; 0x28
 8005248:	89a3      	ldrh	r3, [r4, #12]
 800524a:	6020      	str	r0, [r4, #0]
 800524c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005250:	81a3      	strh	r3, [r4, #12]
 8005252:	9b00      	ldr	r3, [sp, #0]
 8005254:	6163      	str	r3, [r4, #20]
 8005256:	9b01      	ldr	r3, [sp, #4]
 8005258:	6120      	str	r0, [r4, #16]
 800525a:	b15b      	cbz	r3, 8005274 <__smakebuf_r+0x74>
 800525c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005260:	4630      	mov	r0, r6
 8005262:	f000 fc9b 	bl	8005b9c <_isatty_r>
 8005266:	b128      	cbz	r0, 8005274 <__smakebuf_r+0x74>
 8005268:	89a3      	ldrh	r3, [r4, #12]
 800526a:	f023 0303 	bic.w	r3, r3, #3
 800526e:	f043 0301 	orr.w	r3, r3, #1
 8005272:	81a3      	strh	r3, [r4, #12]
 8005274:	89a0      	ldrh	r0, [r4, #12]
 8005276:	4305      	orrs	r5, r0
 8005278:	81a5      	strh	r5, [r4, #12]
 800527a:	e7cd      	b.n	8005218 <__smakebuf_r+0x18>
 800527c:	08003955 	.word	0x08003955

08005280 <__malloc_lock>:
 8005280:	4801      	ldr	r0, [pc, #4]	; (8005288 <__malloc_lock+0x8>)
 8005282:	f7fe bdc3 	b.w	8003e0c <__retarget_lock_acquire_recursive>
 8005286:	bf00      	nop
 8005288:	20000335 	.word	0x20000335

0800528c <__malloc_unlock>:
 800528c:	4801      	ldr	r0, [pc, #4]	; (8005294 <__malloc_unlock+0x8>)
 800528e:	f7fe bdbf 	b.w	8003e10 <__retarget_lock_release_recursive>
 8005292:	bf00      	nop
 8005294:	20000335 	.word	0x20000335

08005298 <_realloc_r>:
 8005298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800529c:	4680      	mov	r8, r0
 800529e:	4614      	mov	r4, r2
 80052a0:	460e      	mov	r6, r1
 80052a2:	b921      	cbnz	r1, 80052ae <_realloc_r+0x16>
 80052a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052a8:	4611      	mov	r1, r2
 80052aa:	f7fe be45 	b.w	8003f38 <_malloc_r>
 80052ae:	b92a      	cbnz	r2, 80052bc <_realloc_r+0x24>
 80052b0:	f7fe fdd6 	bl	8003e60 <_free_r>
 80052b4:	4625      	mov	r5, r4
 80052b6:	4628      	mov	r0, r5
 80052b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052bc:	f000 fc7e 	bl	8005bbc <_malloc_usable_size_r>
 80052c0:	4284      	cmp	r4, r0
 80052c2:	4607      	mov	r7, r0
 80052c4:	d802      	bhi.n	80052cc <_realloc_r+0x34>
 80052c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052ca:	d812      	bhi.n	80052f2 <_realloc_r+0x5a>
 80052cc:	4621      	mov	r1, r4
 80052ce:	4640      	mov	r0, r8
 80052d0:	f7fe fe32 	bl	8003f38 <_malloc_r>
 80052d4:	4605      	mov	r5, r0
 80052d6:	2800      	cmp	r0, #0
 80052d8:	d0ed      	beq.n	80052b6 <_realloc_r+0x1e>
 80052da:	42bc      	cmp	r4, r7
 80052dc:	4622      	mov	r2, r4
 80052de:	4631      	mov	r1, r6
 80052e0:	bf28      	it	cs
 80052e2:	463a      	movcs	r2, r7
 80052e4:	f7fe fda6 	bl	8003e34 <memcpy>
 80052e8:	4631      	mov	r1, r6
 80052ea:	4640      	mov	r0, r8
 80052ec:	f7fe fdb8 	bl	8003e60 <_free_r>
 80052f0:	e7e1      	b.n	80052b6 <_realloc_r+0x1e>
 80052f2:	4635      	mov	r5, r6
 80052f4:	e7df      	b.n	80052b6 <_realloc_r+0x1e>

080052f6 <_sungetc_r>:
 80052f6:	b538      	push	{r3, r4, r5, lr}
 80052f8:	1c4b      	adds	r3, r1, #1
 80052fa:	4614      	mov	r4, r2
 80052fc:	d103      	bne.n	8005306 <_sungetc_r+0x10>
 80052fe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005302:	4628      	mov	r0, r5
 8005304:	bd38      	pop	{r3, r4, r5, pc}
 8005306:	8993      	ldrh	r3, [r2, #12]
 8005308:	f023 0320 	bic.w	r3, r3, #32
 800530c:	8193      	strh	r3, [r2, #12]
 800530e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005310:	6852      	ldr	r2, [r2, #4]
 8005312:	b2cd      	uxtb	r5, r1
 8005314:	b18b      	cbz	r3, 800533a <_sungetc_r+0x44>
 8005316:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005318:	4293      	cmp	r3, r2
 800531a:	dd08      	ble.n	800532e <_sungetc_r+0x38>
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	1e5a      	subs	r2, r3, #1
 8005320:	6022      	str	r2, [r4, #0]
 8005322:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005326:	6863      	ldr	r3, [r4, #4]
 8005328:	3301      	adds	r3, #1
 800532a:	6063      	str	r3, [r4, #4]
 800532c:	e7e9      	b.n	8005302 <_sungetc_r+0xc>
 800532e:	4621      	mov	r1, r4
 8005330:	f000 fbd4 	bl	8005adc <__submore>
 8005334:	2800      	cmp	r0, #0
 8005336:	d0f1      	beq.n	800531c <_sungetc_r+0x26>
 8005338:	e7e1      	b.n	80052fe <_sungetc_r+0x8>
 800533a:	6921      	ldr	r1, [r4, #16]
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	b151      	cbz	r1, 8005356 <_sungetc_r+0x60>
 8005340:	4299      	cmp	r1, r3
 8005342:	d208      	bcs.n	8005356 <_sungetc_r+0x60>
 8005344:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005348:	42a9      	cmp	r1, r5
 800534a:	d104      	bne.n	8005356 <_sungetc_r+0x60>
 800534c:	3b01      	subs	r3, #1
 800534e:	3201      	adds	r2, #1
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	6062      	str	r2, [r4, #4]
 8005354:	e7d5      	b.n	8005302 <_sungetc_r+0xc>
 8005356:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800535a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800535e:	6363      	str	r3, [r4, #52]	; 0x34
 8005360:	2303      	movs	r3, #3
 8005362:	63a3      	str	r3, [r4, #56]	; 0x38
 8005364:	4623      	mov	r3, r4
 8005366:	f803 5f46 	strb.w	r5, [r3, #70]!
 800536a:	6023      	str	r3, [r4, #0]
 800536c:	2301      	movs	r3, #1
 800536e:	e7dc      	b.n	800532a <_sungetc_r+0x34>

08005370 <__ssrefill_r>:
 8005370:	b510      	push	{r4, lr}
 8005372:	460c      	mov	r4, r1
 8005374:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005376:	b169      	cbz	r1, 8005394 <__ssrefill_r+0x24>
 8005378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800537c:	4299      	cmp	r1, r3
 800537e:	d001      	beq.n	8005384 <__ssrefill_r+0x14>
 8005380:	f7fe fd6e 	bl	8003e60 <_free_r>
 8005384:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005386:	6063      	str	r3, [r4, #4]
 8005388:	2000      	movs	r0, #0
 800538a:	6360      	str	r0, [r4, #52]	; 0x34
 800538c:	b113      	cbz	r3, 8005394 <__ssrefill_r+0x24>
 800538e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	bd10      	pop	{r4, pc}
 8005394:	6923      	ldr	r3, [r4, #16]
 8005396:	6023      	str	r3, [r4, #0]
 8005398:	2300      	movs	r3, #0
 800539a:	6063      	str	r3, [r4, #4]
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	f043 0320 	orr.w	r3, r3, #32
 80053a2:	81a3      	strh	r3, [r4, #12]
 80053a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053a8:	e7f3      	b.n	8005392 <__ssrefill_r+0x22>
	...

080053ac <__ssvfiscanf_r>:
 80053ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053b0:	460c      	mov	r4, r1
 80053b2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80053b6:	2100      	movs	r1, #0
 80053b8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80053bc:	49a6      	ldr	r1, [pc, #664]	; (8005658 <__ssvfiscanf_r+0x2ac>)
 80053be:	91a0      	str	r1, [sp, #640]	; 0x280
 80053c0:	f10d 0804 	add.w	r8, sp, #4
 80053c4:	49a5      	ldr	r1, [pc, #660]	; (800565c <__ssvfiscanf_r+0x2b0>)
 80053c6:	4fa6      	ldr	r7, [pc, #664]	; (8005660 <__ssvfiscanf_r+0x2b4>)
 80053c8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005664 <__ssvfiscanf_r+0x2b8>
 80053cc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80053d0:	4606      	mov	r6, r0
 80053d2:	91a1      	str	r1, [sp, #644]	; 0x284
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	7813      	ldrb	r3, [r2, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 815a 	beq.w	8005692 <__ssvfiscanf_r+0x2e6>
 80053de:	5dd9      	ldrb	r1, [r3, r7]
 80053e0:	f011 0108 	ands.w	r1, r1, #8
 80053e4:	f102 0501 	add.w	r5, r2, #1
 80053e8:	d019      	beq.n	800541e <__ssvfiscanf_r+0x72>
 80053ea:	6863      	ldr	r3, [r4, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	dd0f      	ble.n	8005410 <__ssvfiscanf_r+0x64>
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	781a      	ldrb	r2, [r3, #0]
 80053f4:	5cba      	ldrb	r2, [r7, r2]
 80053f6:	0712      	lsls	r2, r2, #28
 80053f8:	d401      	bmi.n	80053fe <__ssvfiscanf_r+0x52>
 80053fa:	462a      	mov	r2, r5
 80053fc:	e7eb      	b.n	80053d6 <__ssvfiscanf_r+0x2a>
 80053fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005400:	3201      	adds	r2, #1
 8005402:	9245      	str	r2, [sp, #276]	; 0x114
 8005404:	6862      	ldr	r2, [r4, #4]
 8005406:	3301      	adds	r3, #1
 8005408:	3a01      	subs	r2, #1
 800540a:	6062      	str	r2, [r4, #4]
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	e7ec      	b.n	80053ea <__ssvfiscanf_r+0x3e>
 8005410:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005412:	4621      	mov	r1, r4
 8005414:	4630      	mov	r0, r6
 8005416:	4798      	blx	r3
 8005418:	2800      	cmp	r0, #0
 800541a:	d0e9      	beq.n	80053f0 <__ssvfiscanf_r+0x44>
 800541c:	e7ed      	b.n	80053fa <__ssvfiscanf_r+0x4e>
 800541e:	2b25      	cmp	r3, #37	; 0x25
 8005420:	d012      	beq.n	8005448 <__ssvfiscanf_r+0x9c>
 8005422:	469a      	mov	sl, r3
 8005424:	6863      	ldr	r3, [r4, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	f340 8091 	ble.w	800554e <__ssvfiscanf_r+0x1a2>
 800542c:	6822      	ldr	r2, [r4, #0]
 800542e:	7813      	ldrb	r3, [r2, #0]
 8005430:	4553      	cmp	r3, sl
 8005432:	f040 812e 	bne.w	8005692 <__ssvfiscanf_r+0x2e6>
 8005436:	6863      	ldr	r3, [r4, #4]
 8005438:	3b01      	subs	r3, #1
 800543a:	6063      	str	r3, [r4, #4]
 800543c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800543e:	3201      	adds	r2, #1
 8005440:	3301      	adds	r3, #1
 8005442:	6022      	str	r2, [r4, #0]
 8005444:	9345      	str	r3, [sp, #276]	; 0x114
 8005446:	e7d8      	b.n	80053fa <__ssvfiscanf_r+0x4e>
 8005448:	9141      	str	r1, [sp, #260]	; 0x104
 800544a:	9143      	str	r1, [sp, #268]	; 0x10c
 800544c:	7853      	ldrb	r3, [r2, #1]
 800544e:	2b2a      	cmp	r3, #42	; 0x2a
 8005450:	bf02      	ittt	eq
 8005452:	2310      	moveq	r3, #16
 8005454:	1c95      	addeq	r5, r2, #2
 8005456:	9341      	streq	r3, [sp, #260]	; 0x104
 8005458:	220a      	movs	r2, #10
 800545a:	46aa      	mov	sl, r5
 800545c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005460:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005464:	2b09      	cmp	r3, #9
 8005466:	d91d      	bls.n	80054a4 <__ssvfiscanf_r+0xf8>
 8005468:	487e      	ldr	r0, [pc, #504]	; (8005664 <__ssvfiscanf_r+0x2b8>)
 800546a:	2203      	movs	r2, #3
 800546c:	f7fa fec8 	bl	8000200 <memchr>
 8005470:	b140      	cbz	r0, 8005484 <__ssvfiscanf_r+0xd8>
 8005472:	2301      	movs	r3, #1
 8005474:	eba0 0009 	sub.w	r0, r0, r9
 8005478:	fa03 f000 	lsl.w	r0, r3, r0
 800547c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800547e:	4318      	orrs	r0, r3
 8005480:	9041      	str	r0, [sp, #260]	; 0x104
 8005482:	4655      	mov	r5, sl
 8005484:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005488:	2b78      	cmp	r3, #120	; 0x78
 800548a:	d806      	bhi.n	800549a <__ssvfiscanf_r+0xee>
 800548c:	2b57      	cmp	r3, #87	; 0x57
 800548e:	d810      	bhi.n	80054b2 <__ssvfiscanf_r+0x106>
 8005490:	2b25      	cmp	r3, #37	; 0x25
 8005492:	d0c6      	beq.n	8005422 <__ssvfiscanf_r+0x76>
 8005494:	d856      	bhi.n	8005544 <__ssvfiscanf_r+0x198>
 8005496:	2b00      	cmp	r3, #0
 8005498:	d064      	beq.n	8005564 <__ssvfiscanf_r+0x1b8>
 800549a:	2303      	movs	r3, #3
 800549c:	9347      	str	r3, [sp, #284]	; 0x11c
 800549e:	230a      	movs	r3, #10
 80054a0:	9342      	str	r3, [sp, #264]	; 0x108
 80054a2:	e071      	b.n	8005588 <__ssvfiscanf_r+0x1dc>
 80054a4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80054a6:	fb02 1103 	mla	r1, r2, r3, r1
 80054aa:	3930      	subs	r1, #48	; 0x30
 80054ac:	9143      	str	r1, [sp, #268]	; 0x10c
 80054ae:	4655      	mov	r5, sl
 80054b0:	e7d3      	b.n	800545a <__ssvfiscanf_r+0xae>
 80054b2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80054b6:	2a20      	cmp	r2, #32
 80054b8:	d8ef      	bhi.n	800549a <__ssvfiscanf_r+0xee>
 80054ba:	a101      	add	r1, pc, #4	; (adr r1, 80054c0 <__ssvfiscanf_r+0x114>)
 80054bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80054c0:	08005573 	.word	0x08005573
 80054c4:	0800549b 	.word	0x0800549b
 80054c8:	0800549b 	.word	0x0800549b
 80054cc:	080055d1 	.word	0x080055d1
 80054d0:	0800549b 	.word	0x0800549b
 80054d4:	0800549b 	.word	0x0800549b
 80054d8:	0800549b 	.word	0x0800549b
 80054dc:	0800549b 	.word	0x0800549b
 80054e0:	0800549b 	.word	0x0800549b
 80054e4:	0800549b 	.word	0x0800549b
 80054e8:	0800549b 	.word	0x0800549b
 80054ec:	080055e7 	.word	0x080055e7
 80054f0:	080055bd 	.word	0x080055bd
 80054f4:	0800554b 	.word	0x0800554b
 80054f8:	0800554b 	.word	0x0800554b
 80054fc:	0800554b 	.word	0x0800554b
 8005500:	0800549b 	.word	0x0800549b
 8005504:	080055c1 	.word	0x080055c1
 8005508:	0800549b 	.word	0x0800549b
 800550c:	0800549b 	.word	0x0800549b
 8005510:	0800549b 	.word	0x0800549b
 8005514:	0800549b 	.word	0x0800549b
 8005518:	080055f7 	.word	0x080055f7
 800551c:	080055c9 	.word	0x080055c9
 8005520:	0800556b 	.word	0x0800556b
 8005524:	0800549b 	.word	0x0800549b
 8005528:	0800549b 	.word	0x0800549b
 800552c:	080055f3 	.word	0x080055f3
 8005530:	0800549b 	.word	0x0800549b
 8005534:	080055bd 	.word	0x080055bd
 8005538:	0800549b 	.word	0x0800549b
 800553c:	0800549b 	.word	0x0800549b
 8005540:	08005573 	.word	0x08005573
 8005544:	3b45      	subs	r3, #69	; 0x45
 8005546:	2b02      	cmp	r3, #2
 8005548:	d8a7      	bhi.n	800549a <__ssvfiscanf_r+0xee>
 800554a:	2305      	movs	r3, #5
 800554c:	e01b      	b.n	8005586 <__ssvfiscanf_r+0x1da>
 800554e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005550:	4621      	mov	r1, r4
 8005552:	4630      	mov	r0, r6
 8005554:	4798      	blx	r3
 8005556:	2800      	cmp	r0, #0
 8005558:	f43f af68 	beq.w	800542c <__ssvfiscanf_r+0x80>
 800555c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800555e:	2800      	cmp	r0, #0
 8005560:	f040 808d 	bne.w	800567e <__ssvfiscanf_r+0x2d2>
 8005564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005568:	e08f      	b.n	800568a <__ssvfiscanf_r+0x2de>
 800556a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800556c:	f042 0220 	orr.w	r2, r2, #32
 8005570:	9241      	str	r2, [sp, #260]	; 0x104
 8005572:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005578:	9241      	str	r2, [sp, #260]	; 0x104
 800557a:	2210      	movs	r2, #16
 800557c:	2b6f      	cmp	r3, #111	; 0x6f
 800557e:	9242      	str	r2, [sp, #264]	; 0x108
 8005580:	bf34      	ite	cc
 8005582:	2303      	movcc	r3, #3
 8005584:	2304      	movcs	r3, #4
 8005586:	9347      	str	r3, [sp, #284]	; 0x11c
 8005588:	6863      	ldr	r3, [r4, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	dd42      	ble.n	8005614 <__ssvfiscanf_r+0x268>
 800558e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005590:	0659      	lsls	r1, r3, #25
 8005592:	d404      	bmi.n	800559e <__ssvfiscanf_r+0x1f2>
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	781a      	ldrb	r2, [r3, #0]
 8005598:	5cba      	ldrb	r2, [r7, r2]
 800559a:	0712      	lsls	r2, r2, #28
 800559c:	d441      	bmi.n	8005622 <__ssvfiscanf_r+0x276>
 800559e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	dc50      	bgt.n	8005646 <__ssvfiscanf_r+0x29a>
 80055a4:	466b      	mov	r3, sp
 80055a6:	4622      	mov	r2, r4
 80055a8:	a941      	add	r1, sp, #260	; 0x104
 80055aa:	4630      	mov	r0, r6
 80055ac:	f000 f876 	bl	800569c <_scanf_chars>
 80055b0:	2801      	cmp	r0, #1
 80055b2:	d06e      	beq.n	8005692 <__ssvfiscanf_r+0x2e6>
 80055b4:	2802      	cmp	r0, #2
 80055b6:	f47f af20 	bne.w	80053fa <__ssvfiscanf_r+0x4e>
 80055ba:	e7cf      	b.n	800555c <__ssvfiscanf_r+0x1b0>
 80055bc:	220a      	movs	r2, #10
 80055be:	e7dd      	b.n	800557c <__ssvfiscanf_r+0x1d0>
 80055c0:	2300      	movs	r3, #0
 80055c2:	9342      	str	r3, [sp, #264]	; 0x108
 80055c4:	2303      	movs	r3, #3
 80055c6:	e7de      	b.n	8005586 <__ssvfiscanf_r+0x1da>
 80055c8:	2308      	movs	r3, #8
 80055ca:	9342      	str	r3, [sp, #264]	; 0x108
 80055cc:	2304      	movs	r3, #4
 80055ce:	e7da      	b.n	8005586 <__ssvfiscanf_r+0x1da>
 80055d0:	4629      	mov	r1, r5
 80055d2:	4640      	mov	r0, r8
 80055d4:	f000 f9c6 	bl	8005964 <__sccl>
 80055d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80055da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055de:	9341      	str	r3, [sp, #260]	; 0x104
 80055e0:	4605      	mov	r5, r0
 80055e2:	2301      	movs	r3, #1
 80055e4:	e7cf      	b.n	8005586 <__ssvfiscanf_r+0x1da>
 80055e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80055e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ec:	9341      	str	r3, [sp, #260]	; 0x104
 80055ee:	2300      	movs	r3, #0
 80055f0:	e7c9      	b.n	8005586 <__ssvfiscanf_r+0x1da>
 80055f2:	2302      	movs	r3, #2
 80055f4:	e7c7      	b.n	8005586 <__ssvfiscanf_r+0x1da>
 80055f6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80055f8:	06c3      	lsls	r3, r0, #27
 80055fa:	f53f aefe 	bmi.w	80053fa <__ssvfiscanf_r+0x4e>
 80055fe:	9b00      	ldr	r3, [sp, #0]
 8005600:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005602:	1d19      	adds	r1, r3, #4
 8005604:	9100      	str	r1, [sp, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f010 0f01 	tst.w	r0, #1
 800560c:	bf14      	ite	ne
 800560e:	801a      	strhne	r2, [r3, #0]
 8005610:	601a      	streq	r2, [r3, #0]
 8005612:	e6f2      	b.n	80053fa <__ssvfiscanf_r+0x4e>
 8005614:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005616:	4621      	mov	r1, r4
 8005618:	4630      	mov	r0, r6
 800561a:	4798      	blx	r3
 800561c:	2800      	cmp	r0, #0
 800561e:	d0b6      	beq.n	800558e <__ssvfiscanf_r+0x1e2>
 8005620:	e79c      	b.n	800555c <__ssvfiscanf_r+0x1b0>
 8005622:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005624:	3201      	adds	r2, #1
 8005626:	9245      	str	r2, [sp, #276]	; 0x114
 8005628:	6862      	ldr	r2, [r4, #4]
 800562a:	3a01      	subs	r2, #1
 800562c:	2a00      	cmp	r2, #0
 800562e:	6062      	str	r2, [r4, #4]
 8005630:	dd02      	ble.n	8005638 <__ssvfiscanf_r+0x28c>
 8005632:	3301      	adds	r3, #1
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	e7ad      	b.n	8005594 <__ssvfiscanf_r+0x1e8>
 8005638:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800563a:	4621      	mov	r1, r4
 800563c:	4630      	mov	r0, r6
 800563e:	4798      	blx	r3
 8005640:	2800      	cmp	r0, #0
 8005642:	d0a7      	beq.n	8005594 <__ssvfiscanf_r+0x1e8>
 8005644:	e78a      	b.n	800555c <__ssvfiscanf_r+0x1b0>
 8005646:	2b04      	cmp	r3, #4
 8005648:	dc0e      	bgt.n	8005668 <__ssvfiscanf_r+0x2bc>
 800564a:	466b      	mov	r3, sp
 800564c:	4622      	mov	r2, r4
 800564e:	a941      	add	r1, sp, #260	; 0x104
 8005650:	4630      	mov	r0, r6
 8005652:	f000 f87d 	bl	8005750 <_scanf_i>
 8005656:	e7ab      	b.n	80055b0 <__ssvfiscanf_r+0x204>
 8005658:	080052f7 	.word	0x080052f7
 800565c:	08005371 	.word	0x08005371
 8005660:	08005d55 	.word	0x08005d55
 8005664:	08005f96 	.word	0x08005f96
 8005668:	4b0b      	ldr	r3, [pc, #44]	; (8005698 <__ssvfiscanf_r+0x2ec>)
 800566a:	2b00      	cmp	r3, #0
 800566c:	f43f aec5 	beq.w	80053fa <__ssvfiscanf_r+0x4e>
 8005670:	466b      	mov	r3, sp
 8005672:	4622      	mov	r2, r4
 8005674:	a941      	add	r1, sp, #260	; 0x104
 8005676:	4630      	mov	r0, r6
 8005678:	f3af 8000 	nop.w
 800567c:	e798      	b.n	80055b0 <__ssvfiscanf_r+0x204>
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005684:	bf18      	it	ne
 8005686:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800568a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800568e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005692:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005694:	e7f9      	b.n	800568a <__ssvfiscanf_r+0x2de>
 8005696:	bf00      	nop
 8005698:	00000000 	.word	0x00000000

0800569c <_scanf_chars>:
 800569c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056a0:	4615      	mov	r5, r2
 80056a2:	688a      	ldr	r2, [r1, #8]
 80056a4:	4680      	mov	r8, r0
 80056a6:	460c      	mov	r4, r1
 80056a8:	b932      	cbnz	r2, 80056b8 <_scanf_chars+0x1c>
 80056aa:	698a      	ldr	r2, [r1, #24]
 80056ac:	2a00      	cmp	r2, #0
 80056ae:	bf0c      	ite	eq
 80056b0:	2201      	moveq	r2, #1
 80056b2:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80056b6:	608a      	str	r2, [r1, #8]
 80056b8:	6822      	ldr	r2, [r4, #0]
 80056ba:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800574c <_scanf_chars+0xb0>
 80056be:	06d1      	lsls	r1, r2, #27
 80056c0:	bf5f      	itttt	pl
 80056c2:	681a      	ldrpl	r2, [r3, #0]
 80056c4:	1d11      	addpl	r1, r2, #4
 80056c6:	6019      	strpl	r1, [r3, #0]
 80056c8:	6816      	ldrpl	r6, [r2, #0]
 80056ca:	2700      	movs	r7, #0
 80056cc:	69a0      	ldr	r0, [r4, #24]
 80056ce:	b188      	cbz	r0, 80056f4 <_scanf_chars+0x58>
 80056d0:	2801      	cmp	r0, #1
 80056d2:	d107      	bne.n	80056e4 <_scanf_chars+0x48>
 80056d4:	682a      	ldr	r2, [r5, #0]
 80056d6:	7811      	ldrb	r1, [r2, #0]
 80056d8:	6962      	ldr	r2, [r4, #20]
 80056da:	5c52      	ldrb	r2, [r2, r1]
 80056dc:	b952      	cbnz	r2, 80056f4 <_scanf_chars+0x58>
 80056de:	2f00      	cmp	r7, #0
 80056e0:	d031      	beq.n	8005746 <_scanf_chars+0xaa>
 80056e2:	e022      	b.n	800572a <_scanf_chars+0x8e>
 80056e4:	2802      	cmp	r0, #2
 80056e6:	d120      	bne.n	800572a <_scanf_chars+0x8e>
 80056e8:	682b      	ldr	r3, [r5, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	f813 3009 	ldrb.w	r3, [r3, r9]
 80056f0:	071b      	lsls	r3, r3, #28
 80056f2:	d41a      	bmi.n	800572a <_scanf_chars+0x8e>
 80056f4:	6823      	ldr	r3, [r4, #0]
 80056f6:	06da      	lsls	r2, r3, #27
 80056f8:	bf5e      	ittt	pl
 80056fa:	682b      	ldrpl	r3, [r5, #0]
 80056fc:	781b      	ldrbpl	r3, [r3, #0]
 80056fe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005702:	682a      	ldr	r2, [r5, #0]
 8005704:	686b      	ldr	r3, [r5, #4]
 8005706:	3201      	adds	r2, #1
 8005708:	602a      	str	r2, [r5, #0]
 800570a:	68a2      	ldr	r2, [r4, #8]
 800570c:	3b01      	subs	r3, #1
 800570e:	3a01      	subs	r2, #1
 8005710:	606b      	str	r3, [r5, #4]
 8005712:	3701      	adds	r7, #1
 8005714:	60a2      	str	r2, [r4, #8]
 8005716:	b142      	cbz	r2, 800572a <_scanf_chars+0x8e>
 8005718:	2b00      	cmp	r3, #0
 800571a:	dcd7      	bgt.n	80056cc <_scanf_chars+0x30>
 800571c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005720:	4629      	mov	r1, r5
 8005722:	4640      	mov	r0, r8
 8005724:	4798      	blx	r3
 8005726:	2800      	cmp	r0, #0
 8005728:	d0d0      	beq.n	80056cc <_scanf_chars+0x30>
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	f013 0310 	ands.w	r3, r3, #16
 8005730:	d105      	bne.n	800573e <_scanf_chars+0xa2>
 8005732:	68e2      	ldr	r2, [r4, #12]
 8005734:	3201      	adds	r2, #1
 8005736:	60e2      	str	r2, [r4, #12]
 8005738:	69a2      	ldr	r2, [r4, #24]
 800573a:	b102      	cbz	r2, 800573e <_scanf_chars+0xa2>
 800573c:	7033      	strb	r3, [r6, #0]
 800573e:	6923      	ldr	r3, [r4, #16]
 8005740:	443b      	add	r3, r7
 8005742:	6123      	str	r3, [r4, #16]
 8005744:	2000      	movs	r0, #0
 8005746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800574a:	bf00      	nop
 800574c:	08005d55 	.word	0x08005d55

08005750 <_scanf_i>:
 8005750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005754:	4698      	mov	r8, r3
 8005756:	4b76      	ldr	r3, [pc, #472]	; (8005930 <_scanf_i+0x1e0>)
 8005758:	460c      	mov	r4, r1
 800575a:	4682      	mov	sl, r0
 800575c:	4616      	mov	r6, r2
 800575e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005762:	b087      	sub	sp, #28
 8005764:	ab03      	add	r3, sp, #12
 8005766:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800576a:	4b72      	ldr	r3, [pc, #456]	; (8005934 <_scanf_i+0x1e4>)
 800576c:	69a1      	ldr	r1, [r4, #24]
 800576e:	4a72      	ldr	r2, [pc, #456]	; (8005938 <_scanf_i+0x1e8>)
 8005770:	2903      	cmp	r1, #3
 8005772:	bf18      	it	ne
 8005774:	461a      	movne	r2, r3
 8005776:	68a3      	ldr	r3, [r4, #8]
 8005778:	9201      	str	r2, [sp, #4]
 800577a:	1e5a      	subs	r2, r3, #1
 800577c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005780:	bf88      	it	hi
 8005782:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005786:	4627      	mov	r7, r4
 8005788:	bf82      	ittt	hi
 800578a:	eb03 0905 	addhi.w	r9, r3, r5
 800578e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005792:	60a3      	strhi	r3, [r4, #8]
 8005794:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005798:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800579c:	bf98      	it	ls
 800579e:	f04f 0900 	movls.w	r9, #0
 80057a2:	6023      	str	r3, [r4, #0]
 80057a4:	463d      	mov	r5, r7
 80057a6:	f04f 0b00 	mov.w	fp, #0
 80057aa:	6831      	ldr	r1, [r6, #0]
 80057ac:	ab03      	add	r3, sp, #12
 80057ae:	7809      	ldrb	r1, [r1, #0]
 80057b0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80057b4:	2202      	movs	r2, #2
 80057b6:	f7fa fd23 	bl	8000200 <memchr>
 80057ba:	b328      	cbz	r0, 8005808 <_scanf_i+0xb8>
 80057bc:	f1bb 0f01 	cmp.w	fp, #1
 80057c0:	d159      	bne.n	8005876 <_scanf_i+0x126>
 80057c2:	6862      	ldr	r2, [r4, #4]
 80057c4:	b92a      	cbnz	r2, 80057d2 <_scanf_i+0x82>
 80057c6:	6822      	ldr	r2, [r4, #0]
 80057c8:	2308      	movs	r3, #8
 80057ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ce:	6063      	str	r3, [r4, #4]
 80057d0:	6022      	str	r2, [r4, #0]
 80057d2:	6822      	ldr	r2, [r4, #0]
 80057d4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80057d8:	6022      	str	r2, [r4, #0]
 80057da:	68a2      	ldr	r2, [r4, #8]
 80057dc:	1e51      	subs	r1, r2, #1
 80057de:	60a1      	str	r1, [r4, #8]
 80057e0:	b192      	cbz	r2, 8005808 <_scanf_i+0xb8>
 80057e2:	6832      	ldr	r2, [r6, #0]
 80057e4:	1c51      	adds	r1, r2, #1
 80057e6:	6031      	str	r1, [r6, #0]
 80057e8:	7812      	ldrb	r2, [r2, #0]
 80057ea:	f805 2b01 	strb.w	r2, [r5], #1
 80057ee:	6872      	ldr	r2, [r6, #4]
 80057f0:	3a01      	subs	r2, #1
 80057f2:	2a00      	cmp	r2, #0
 80057f4:	6072      	str	r2, [r6, #4]
 80057f6:	dc07      	bgt.n	8005808 <_scanf_i+0xb8>
 80057f8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80057fc:	4631      	mov	r1, r6
 80057fe:	4650      	mov	r0, sl
 8005800:	4790      	blx	r2
 8005802:	2800      	cmp	r0, #0
 8005804:	f040 8085 	bne.w	8005912 <_scanf_i+0x1c2>
 8005808:	f10b 0b01 	add.w	fp, fp, #1
 800580c:	f1bb 0f03 	cmp.w	fp, #3
 8005810:	d1cb      	bne.n	80057aa <_scanf_i+0x5a>
 8005812:	6863      	ldr	r3, [r4, #4]
 8005814:	b90b      	cbnz	r3, 800581a <_scanf_i+0xca>
 8005816:	230a      	movs	r3, #10
 8005818:	6063      	str	r3, [r4, #4]
 800581a:	6863      	ldr	r3, [r4, #4]
 800581c:	4947      	ldr	r1, [pc, #284]	; (800593c <_scanf_i+0x1ec>)
 800581e:	6960      	ldr	r0, [r4, #20]
 8005820:	1ac9      	subs	r1, r1, r3
 8005822:	f000 f89f 	bl	8005964 <__sccl>
 8005826:	f04f 0b00 	mov.w	fp, #0
 800582a:	68a3      	ldr	r3, [r4, #8]
 800582c:	6822      	ldr	r2, [r4, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d03d      	beq.n	80058ae <_scanf_i+0x15e>
 8005832:	6831      	ldr	r1, [r6, #0]
 8005834:	6960      	ldr	r0, [r4, #20]
 8005836:	f891 c000 	ldrb.w	ip, [r1]
 800583a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800583e:	2800      	cmp	r0, #0
 8005840:	d035      	beq.n	80058ae <_scanf_i+0x15e>
 8005842:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005846:	d124      	bne.n	8005892 <_scanf_i+0x142>
 8005848:	0510      	lsls	r0, r2, #20
 800584a:	d522      	bpl.n	8005892 <_scanf_i+0x142>
 800584c:	f10b 0b01 	add.w	fp, fp, #1
 8005850:	f1b9 0f00 	cmp.w	r9, #0
 8005854:	d003      	beq.n	800585e <_scanf_i+0x10e>
 8005856:	3301      	adds	r3, #1
 8005858:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800585c:	60a3      	str	r3, [r4, #8]
 800585e:	6873      	ldr	r3, [r6, #4]
 8005860:	3b01      	subs	r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	6073      	str	r3, [r6, #4]
 8005866:	dd1b      	ble.n	80058a0 <_scanf_i+0x150>
 8005868:	6833      	ldr	r3, [r6, #0]
 800586a:	3301      	adds	r3, #1
 800586c:	6033      	str	r3, [r6, #0]
 800586e:	68a3      	ldr	r3, [r4, #8]
 8005870:	3b01      	subs	r3, #1
 8005872:	60a3      	str	r3, [r4, #8]
 8005874:	e7d9      	b.n	800582a <_scanf_i+0xda>
 8005876:	f1bb 0f02 	cmp.w	fp, #2
 800587a:	d1ae      	bne.n	80057da <_scanf_i+0x8a>
 800587c:	6822      	ldr	r2, [r4, #0]
 800587e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005882:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005886:	d1bf      	bne.n	8005808 <_scanf_i+0xb8>
 8005888:	2310      	movs	r3, #16
 800588a:	6063      	str	r3, [r4, #4]
 800588c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005890:	e7a2      	b.n	80057d8 <_scanf_i+0x88>
 8005892:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005896:	6022      	str	r2, [r4, #0]
 8005898:	780b      	ldrb	r3, [r1, #0]
 800589a:	f805 3b01 	strb.w	r3, [r5], #1
 800589e:	e7de      	b.n	800585e <_scanf_i+0x10e>
 80058a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80058a4:	4631      	mov	r1, r6
 80058a6:	4650      	mov	r0, sl
 80058a8:	4798      	blx	r3
 80058aa:	2800      	cmp	r0, #0
 80058ac:	d0df      	beq.n	800586e <_scanf_i+0x11e>
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	05db      	lsls	r3, r3, #23
 80058b2:	d50d      	bpl.n	80058d0 <_scanf_i+0x180>
 80058b4:	42bd      	cmp	r5, r7
 80058b6:	d909      	bls.n	80058cc <_scanf_i+0x17c>
 80058b8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80058bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058c0:	4632      	mov	r2, r6
 80058c2:	4650      	mov	r0, sl
 80058c4:	4798      	blx	r3
 80058c6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80058ca:	464d      	mov	r5, r9
 80058cc:	42bd      	cmp	r5, r7
 80058ce:	d02d      	beq.n	800592c <_scanf_i+0x1dc>
 80058d0:	6822      	ldr	r2, [r4, #0]
 80058d2:	f012 0210 	ands.w	r2, r2, #16
 80058d6:	d113      	bne.n	8005900 <_scanf_i+0x1b0>
 80058d8:	702a      	strb	r2, [r5, #0]
 80058da:	6863      	ldr	r3, [r4, #4]
 80058dc:	9e01      	ldr	r6, [sp, #4]
 80058de:	4639      	mov	r1, r7
 80058e0:	4650      	mov	r0, sl
 80058e2:	47b0      	blx	r6
 80058e4:	6821      	ldr	r1, [r4, #0]
 80058e6:	f8d8 3000 	ldr.w	r3, [r8]
 80058ea:	f011 0f20 	tst.w	r1, #32
 80058ee:	d013      	beq.n	8005918 <_scanf_i+0x1c8>
 80058f0:	1d1a      	adds	r2, r3, #4
 80058f2:	f8c8 2000 	str.w	r2, [r8]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6018      	str	r0, [r3, #0]
 80058fa:	68e3      	ldr	r3, [r4, #12]
 80058fc:	3301      	adds	r3, #1
 80058fe:	60e3      	str	r3, [r4, #12]
 8005900:	1bed      	subs	r5, r5, r7
 8005902:	44ab      	add	fp, r5
 8005904:	6925      	ldr	r5, [r4, #16]
 8005906:	445d      	add	r5, fp
 8005908:	6125      	str	r5, [r4, #16]
 800590a:	2000      	movs	r0, #0
 800590c:	b007      	add	sp, #28
 800590e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005912:	f04f 0b00 	mov.w	fp, #0
 8005916:	e7ca      	b.n	80058ae <_scanf_i+0x15e>
 8005918:	1d1a      	adds	r2, r3, #4
 800591a:	f8c8 2000 	str.w	r2, [r8]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f011 0f01 	tst.w	r1, #1
 8005924:	bf14      	ite	ne
 8005926:	8018      	strhne	r0, [r3, #0]
 8005928:	6018      	streq	r0, [r3, #0]
 800592a:	e7e6      	b.n	80058fa <_scanf_i+0x1aa>
 800592c:	2001      	movs	r0, #1
 800592e:	e7ed      	b.n	800590c <_scanf_i+0x1bc>
 8005930:	08005d00 	.word	0x08005d00
 8005934:	080048c1 	.word	0x080048c1
 8005938:	08005ad9 	.word	0x08005ad9
 800593c:	08006054 	.word	0x08006054

08005940 <_read_r>:
 8005940:	b538      	push	{r3, r4, r5, lr}
 8005942:	4d07      	ldr	r5, [pc, #28]	; (8005960 <_read_r+0x20>)
 8005944:	4604      	mov	r4, r0
 8005946:	4608      	mov	r0, r1
 8005948:	4611      	mov	r1, r2
 800594a:	2200      	movs	r2, #0
 800594c:	602a      	str	r2, [r5, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	f7fa ff96 	bl	8000880 <_read>
 8005954:	1c43      	adds	r3, r0, #1
 8005956:	d102      	bne.n	800595e <_read_r+0x1e>
 8005958:	682b      	ldr	r3, [r5, #0]
 800595a:	b103      	cbz	r3, 800595e <_read_r+0x1e>
 800595c:	6023      	str	r3, [r4, #0]
 800595e:	bd38      	pop	{r3, r4, r5, pc}
 8005960:	20000368 	.word	0x20000368

08005964 <__sccl>:
 8005964:	b570      	push	{r4, r5, r6, lr}
 8005966:	780b      	ldrb	r3, [r1, #0]
 8005968:	4604      	mov	r4, r0
 800596a:	2b5e      	cmp	r3, #94	; 0x5e
 800596c:	bf0b      	itete	eq
 800596e:	784b      	ldrbeq	r3, [r1, #1]
 8005970:	1c48      	addne	r0, r1, #1
 8005972:	1c88      	addeq	r0, r1, #2
 8005974:	2200      	movne	r2, #0
 8005976:	bf08      	it	eq
 8005978:	2201      	moveq	r2, #1
 800597a:	1e61      	subs	r1, r4, #1
 800597c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005980:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005984:	42a9      	cmp	r1, r5
 8005986:	d1fb      	bne.n	8005980 <__sccl+0x1c>
 8005988:	b90b      	cbnz	r3, 800598e <__sccl+0x2a>
 800598a:	3801      	subs	r0, #1
 800598c:	bd70      	pop	{r4, r5, r6, pc}
 800598e:	f082 0201 	eor.w	r2, r2, #1
 8005992:	54e2      	strb	r2, [r4, r3]
 8005994:	4605      	mov	r5, r0
 8005996:	4628      	mov	r0, r5
 8005998:	f810 1b01 	ldrb.w	r1, [r0], #1
 800599c:	292d      	cmp	r1, #45	; 0x2d
 800599e:	d006      	beq.n	80059ae <__sccl+0x4a>
 80059a0:	295d      	cmp	r1, #93	; 0x5d
 80059a2:	d0f3      	beq.n	800598c <__sccl+0x28>
 80059a4:	b909      	cbnz	r1, 80059aa <__sccl+0x46>
 80059a6:	4628      	mov	r0, r5
 80059a8:	e7f0      	b.n	800598c <__sccl+0x28>
 80059aa:	460b      	mov	r3, r1
 80059ac:	e7f1      	b.n	8005992 <__sccl+0x2e>
 80059ae:	786e      	ldrb	r6, [r5, #1]
 80059b0:	2e5d      	cmp	r6, #93	; 0x5d
 80059b2:	d0fa      	beq.n	80059aa <__sccl+0x46>
 80059b4:	42b3      	cmp	r3, r6
 80059b6:	dcf8      	bgt.n	80059aa <__sccl+0x46>
 80059b8:	3502      	adds	r5, #2
 80059ba:	4619      	mov	r1, r3
 80059bc:	3101      	adds	r1, #1
 80059be:	428e      	cmp	r6, r1
 80059c0:	5462      	strb	r2, [r4, r1]
 80059c2:	dcfb      	bgt.n	80059bc <__sccl+0x58>
 80059c4:	1af1      	subs	r1, r6, r3
 80059c6:	3901      	subs	r1, #1
 80059c8:	1c58      	adds	r0, r3, #1
 80059ca:	42b3      	cmp	r3, r6
 80059cc:	bfa8      	it	ge
 80059ce:	2100      	movge	r1, #0
 80059d0:	1843      	adds	r3, r0, r1
 80059d2:	e7e0      	b.n	8005996 <__sccl+0x32>

080059d4 <_strtol_l.constprop.0>:
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059da:	d001      	beq.n	80059e0 <_strtol_l.constprop.0+0xc>
 80059dc:	2b24      	cmp	r3, #36	; 0x24
 80059de:	d906      	bls.n	80059ee <_strtol_l.constprop.0+0x1a>
 80059e0:	f7fd feba 	bl	8003758 <__errno>
 80059e4:	2316      	movs	r3, #22
 80059e6:	6003      	str	r3, [r0, #0]
 80059e8:	2000      	movs	r0, #0
 80059ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005ad4 <_strtol_l.constprop.0+0x100>
 80059f2:	460d      	mov	r5, r1
 80059f4:	462e      	mov	r6, r5
 80059f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80059fa:	f814 700c 	ldrb.w	r7, [r4, ip]
 80059fe:	f017 0708 	ands.w	r7, r7, #8
 8005a02:	d1f7      	bne.n	80059f4 <_strtol_l.constprop.0+0x20>
 8005a04:	2c2d      	cmp	r4, #45	; 0x2d
 8005a06:	d132      	bne.n	8005a6e <_strtol_l.constprop.0+0x9a>
 8005a08:	782c      	ldrb	r4, [r5, #0]
 8005a0a:	2701      	movs	r7, #1
 8005a0c:	1cb5      	adds	r5, r6, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d05b      	beq.n	8005aca <_strtol_l.constprop.0+0xf6>
 8005a12:	2b10      	cmp	r3, #16
 8005a14:	d109      	bne.n	8005a2a <_strtol_l.constprop.0+0x56>
 8005a16:	2c30      	cmp	r4, #48	; 0x30
 8005a18:	d107      	bne.n	8005a2a <_strtol_l.constprop.0+0x56>
 8005a1a:	782c      	ldrb	r4, [r5, #0]
 8005a1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005a20:	2c58      	cmp	r4, #88	; 0x58
 8005a22:	d14d      	bne.n	8005ac0 <_strtol_l.constprop.0+0xec>
 8005a24:	786c      	ldrb	r4, [r5, #1]
 8005a26:	2310      	movs	r3, #16
 8005a28:	3502      	adds	r5, #2
 8005a2a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005a2e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005a32:	f04f 0c00 	mov.w	ip, #0
 8005a36:	fbb8 f9f3 	udiv	r9, r8, r3
 8005a3a:	4666      	mov	r6, ip
 8005a3c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005a40:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005a44:	f1be 0f09 	cmp.w	lr, #9
 8005a48:	d816      	bhi.n	8005a78 <_strtol_l.constprop.0+0xa4>
 8005a4a:	4674      	mov	r4, lr
 8005a4c:	42a3      	cmp	r3, r4
 8005a4e:	dd24      	ble.n	8005a9a <_strtol_l.constprop.0+0xc6>
 8005a50:	f1bc 0f00 	cmp.w	ip, #0
 8005a54:	db1e      	blt.n	8005a94 <_strtol_l.constprop.0+0xc0>
 8005a56:	45b1      	cmp	r9, r6
 8005a58:	d31c      	bcc.n	8005a94 <_strtol_l.constprop.0+0xc0>
 8005a5a:	d101      	bne.n	8005a60 <_strtol_l.constprop.0+0x8c>
 8005a5c:	45a2      	cmp	sl, r4
 8005a5e:	db19      	blt.n	8005a94 <_strtol_l.constprop.0+0xc0>
 8005a60:	fb06 4603 	mla	r6, r6, r3, r4
 8005a64:	f04f 0c01 	mov.w	ip, #1
 8005a68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a6c:	e7e8      	b.n	8005a40 <_strtol_l.constprop.0+0x6c>
 8005a6e:	2c2b      	cmp	r4, #43	; 0x2b
 8005a70:	bf04      	itt	eq
 8005a72:	782c      	ldrbeq	r4, [r5, #0]
 8005a74:	1cb5      	addeq	r5, r6, #2
 8005a76:	e7ca      	b.n	8005a0e <_strtol_l.constprop.0+0x3a>
 8005a78:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005a7c:	f1be 0f19 	cmp.w	lr, #25
 8005a80:	d801      	bhi.n	8005a86 <_strtol_l.constprop.0+0xb2>
 8005a82:	3c37      	subs	r4, #55	; 0x37
 8005a84:	e7e2      	b.n	8005a4c <_strtol_l.constprop.0+0x78>
 8005a86:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005a8a:	f1be 0f19 	cmp.w	lr, #25
 8005a8e:	d804      	bhi.n	8005a9a <_strtol_l.constprop.0+0xc6>
 8005a90:	3c57      	subs	r4, #87	; 0x57
 8005a92:	e7db      	b.n	8005a4c <_strtol_l.constprop.0+0x78>
 8005a94:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005a98:	e7e6      	b.n	8005a68 <_strtol_l.constprop.0+0x94>
 8005a9a:	f1bc 0f00 	cmp.w	ip, #0
 8005a9e:	da05      	bge.n	8005aac <_strtol_l.constprop.0+0xd8>
 8005aa0:	2322      	movs	r3, #34	; 0x22
 8005aa2:	6003      	str	r3, [r0, #0]
 8005aa4:	4646      	mov	r6, r8
 8005aa6:	b942      	cbnz	r2, 8005aba <_strtol_l.constprop.0+0xe6>
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	e79e      	b.n	80059ea <_strtol_l.constprop.0+0x16>
 8005aac:	b107      	cbz	r7, 8005ab0 <_strtol_l.constprop.0+0xdc>
 8005aae:	4276      	negs	r6, r6
 8005ab0:	2a00      	cmp	r2, #0
 8005ab2:	d0f9      	beq.n	8005aa8 <_strtol_l.constprop.0+0xd4>
 8005ab4:	f1bc 0f00 	cmp.w	ip, #0
 8005ab8:	d000      	beq.n	8005abc <_strtol_l.constprop.0+0xe8>
 8005aba:	1e69      	subs	r1, r5, #1
 8005abc:	6011      	str	r1, [r2, #0]
 8005abe:	e7f3      	b.n	8005aa8 <_strtol_l.constprop.0+0xd4>
 8005ac0:	2430      	movs	r4, #48	; 0x30
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1b1      	bne.n	8005a2a <_strtol_l.constprop.0+0x56>
 8005ac6:	2308      	movs	r3, #8
 8005ac8:	e7af      	b.n	8005a2a <_strtol_l.constprop.0+0x56>
 8005aca:	2c30      	cmp	r4, #48	; 0x30
 8005acc:	d0a5      	beq.n	8005a1a <_strtol_l.constprop.0+0x46>
 8005ace:	230a      	movs	r3, #10
 8005ad0:	e7ab      	b.n	8005a2a <_strtol_l.constprop.0+0x56>
 8005ad2:	bf00      	nop
 8005ad4:	08005d55 	.word	0x08005d55

08005ad8 <_strtol_r>:
 8005ad8:	f7ff bf7c 	b.w	80059d4 <_strtol_l.constprop.0>

08005adc <__submore>:
 8005adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005ae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ae8:	4299      	cmp	r1, r3
 8005aea:	d11d      	bne.n	8005b28 <__submore+0x4c>
 8005aec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005af0:	f7fe fa22 	bl	8003f38 <_malloc_r>
 8005af4:	b918      	cbnz	r0, 8005afe <__submore+0x22>
 8005af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b02:	63a3      	str	r3, [r4, #56]	; 0x38
 8005b04:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005b08:	6360      	str	r0, [r4, #52]	; 0x34
 8005b0a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005b0e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005b12:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005b16:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005b1a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005b1e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005b22:	6020      	str	r0, [r4, #0]
 8005b24:	2000      	movs	r0, #0
 8005b26:	e7e8      	b.n	8005afa <__submore+0x1e>
 8005b28:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005b2a:	0077      	lsls	r7, r6, #1
 8005b2c:	463a      	mov	r2, r7
 8005b2e:	f7ff fbb3 	bl	8005298 <_realloc_r>
 8005b32:	4605      	mov	r5, r0
 8005b34:	2800      	cmp	r0, #0
 8005b36:	d0de      	beq.n	8005af6 <__submore+0x1a>
 8005b38:	eb00 0806 	add.w	r8, r0, r6
 8005b3c:	4601      	mov	r1, r0
 8005b3e:	4632      	mov	r2, r6
 8005b40:	4640      	mov	r0, r8
 8005b42:	f7fe f977 	bl	8003e34 <memcpy>
 8005b46:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005b4a:	f8c4 8000 	str.w	r8, [r4]
 8005b4e:	e7e9      	b.n	8005b24 <__submore+0x48>

08005b50 <abort>:
 8005b50:	b508      	push	{r3, lr}
 8005b52:	2006      	movs	r0, #6
 8005b54:	f000 f862 	bl	8005c1c <raise>
 8005b58:	2001      	movs	r0, #1
 8005b5a:	f7fb f83d 	bl	8000bd8 <_exit>
	...

08005b60 <__env_lock>:
 8005b60:	4801      	ldr	r0, [pc, #4]	; (8005b68 <__env_lock+0x8>)
 8005b62:	f7fe b953 	b.w	8003e0c <__retarget_lock_acquire_recursive>
 8005b66:	bf00      	nop
 8005b68:	20000334 	.word	0x20000334

08005b6c <__env_unlock>:
 8005b6c:	4801      	ldr	r0, [pc, #4]	; (8005b74 <__env_unlock+0x8>)
 8005b6e:	f7fe b94f 	b.w	8003e10 <__retarget_lock_release_recursive>
 8005b72:	bf00      	nop
 8005b74:	20000334 	.word	0x20000334

08005b78 <_fstat_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	4d07      	ldr	r5, [pc, #28]	; (8005b98 <_fstat_r+0x20>)
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	4604      	mov	r4, r0
 8005b80:	4608      	mov	r0, r1
 8005b82:	4611      	mov	r1, r2
 8005b84:	602b      	str	r3, [r5, #0]
 8005b86:	f7fb f83d 	bl	8000c04 <_fstat>
 8005b8a:	1c43      	adds	r3, r0, #1
 8005b8c:	d102      	bne.n	8005b94 <_fstat_r+0x1c>
 8005b8e:	682b      	ldr	r3, [r5, #0]
 8005b90:	b103      	cbz	r3, 8005b94 <_fstat_r+0x1c>
 8005b92:	6023      	str	r3, [r4, #0]
 8005b94:	bd38      	pop	{r3, r4, r5, pc}
 8005b96:	bf00      	nop
 8005b98:	20000368 	.word	0x20000368

08005b9c <_isatty_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	4d06      	ldr	r5, [pc, #24]	; (8005bb8 <_isatty_r+0x1c>)
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	4608      	mov	r0, r1
 8005ba6:	602b      	str	r3, [r5, #0]
 8005ba8:	f7fb f83c 	bl	8000c24 <_isatty>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d102      	bne.n	8005bb6 <_isatty_r+0x1a>
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	b103      	cbz	r3, 8005bb6 <_isatty_r+0x1a>
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	bd38      	pop	{r3, r4, r5, pc}
 8005bb8:	20000368 	.word	0x20000368

08005bbc <_malloc_usable_size_r>:
 8005bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bc0:	1f18      	subs	r0, r3, #4
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	bfbc      	itt	lt
 8005bc6:	580b      	ldrlt	r3, [r1, r0]
 8005bc8:	18c0      	addlt	r0, r0, r3
 8005bca:	4770      	bx	lr

08005bcc <_raise_r>:
 8005bcc:	291f      	cmp	r1, #31
 8005bce:	b538      	push	{r3, r4, r5, lr}
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	460d      	mov	r5, r1
 8005bd4:	d904      	bls.n	8005be0 <_raise_r+0x14>
 8005bd6:	2316      	movs	r3, #22
 8005bd8:	6003      	str	r3, [r0, #0]
 8005bda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bde:	bd38      	pop	{r3, r4, r5, pc}
 8005be0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005be2:	b112      	cbz	r2, 8005bea <_raise_r+0x1e>
 8005be4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005be8:	b94b      	cbnz	r3, 8005bfe <_raise_r+0x32>
 8005bea:	4620      	mov	r0, r4
 8005bec:	f000 f830 	bl	8005c50 <_getpid_r>
 8005bf0:	462a      	mov	r2, r5
 8005bf2:	4601      	mov	r1, r0
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bfa:	f000 b817 	b.w	8005c2c <_kill_r>
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d00a      	beq.n	8005c18 <_raise_r+0x4c>
 8005c02:	1c59      	adds	r1, r3, #1
 8005c04:	d103      	bne.n	8005c0e <_raise_r+0x42>
 8005c06:	2316      	movs	r3, #22
 8005c08:	6003      	str	r3, [r0, #0]
 8005c0a:	2001      	movs	r0, #1
 8005c0c:	e7e7      	b.n	8005bde <_raise_r+0x12>
 8005c0e:	2400      	movs	r4, #0
 8005c10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c14:	4628      	mov	r0, r5
 8005c16:	4798      	blx	r3
 8005c18:	2000      	movs	r0, #0
 8005c1a:	e7e0      	b.n	8005bde <_raise_r+0x12>

08005c1c <raise>:
 8005c1c:	4b02      	ldr	r3, [pc, #8]	; (8005c28 <raise+0xc>)
 8005c1e:	4601      	mov	r1, r0
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	f7ff bfd3 	b.w	8005bcc <_raise_r>
 8005c26:	bf00      	nop
 8005c28:	20000028 	.word	0x20000028

08005c2c <_kill_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	4d07      	ldr	r5, [pc, #28]	; (8005c4c <_kill_r+0x20>)
 8005c30:	2300      	movs	r3, #0
 8005c32:	4604      	mov	r4, r0
 8005c34:	4608      	mov	r0, r1
 8005c36:	4611      	mov	r1, r2
 8005c38:	602b      	str	r3, [r5, #0]
 8005c3a:	f7fa ffbd 	bl	8000bb8 <_kill>
 8005c3e:	1c43      	adds	r3, r0, #1
 8005c40:	d102      	bne.n	8005c48 <_kill_r+0x1c>
 8005c42:	682b      	ldr	r3, [r5, #0]
 8005c44:	b103      	cbz	r3, 8005c48 <_kill_r+0x1c>
 8005c46:	6023      	str	r3, [r4, #0]
 8005c48:	bd38      	pop	{r3, r4, r5, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20000368 	.word	0x20000368

08005c50 <_getpid_r>:
 8005c50:	f7fa bfaa 	b.w	8000ba8 <_getpid>

08005c54 <_gettimeofday>:
 8005c54:	4b02      	ldr	r3, [pc, #8]	; (8005c60 <_gettimeofday+0xc>)
 8005c56:	2258      	movs	r2, #88	; 0x58
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c5e:	4770      	bx	lr
 8005c60:	20000368 	.word	0x20000368

08005c64 <_init>:
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	bf00      	nop
 8005c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6a:	bc08      	pop	{r3}
 8005c6c:	469e      	mov	lr, r3
 8005c6e:	4770      	bx	lr

08005c70 <_fini>:
 8005c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c72:	bf00      	nop
 8005c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c76:	bc08      	pop	{r3}
 8005c78:	469e      	mov	lr, r3
 8005c7a:	4770      	bx	lr
